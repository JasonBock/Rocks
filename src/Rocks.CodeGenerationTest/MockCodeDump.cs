// <auto-generated/>

#nullable enable

using Rocks.Extensions;
using System.Collections.Generic;
using System.Collections.Immutable;

internal sealed class OsSettingsCreateExpectations
	: global::Rocks.Expectations.ExpectationsV4
{
#pragma warning disable CS8618

	internal sealed class Handler2
		: global::Rocks.HandlerV4<global::System.Func<string>, string>
	{ }

	internal sealed class Handler3
		: global::Rocks.HandlerV4<global::System.Func<global::System.Text.StringBuilder, bool>, bool>
	{
		public global::Rocks.Argument<global::System.Text.StringBuilder> @builder { get; set; }
	}

	internal sealed class Handler4
		: global::Rocks.HandlerV4<global::System.Func<int>, int>
	{ }

	internal sealed class Handler5
		: global::Rocks.HandlerV4<global::System.Func<global::System.Type>, global::System.Type>
	{ }

#pragma warning restore CS8618

	private readonly global::System.Collections.Generic.List<global::OsSettingsCreateExpectations.Handler2> @handlers2 = new();
	private readonly global::System.Collections.Generic.List<global::OsSettingsCreateExpectations.Handler3> @handlers3 = new();
	private readonly global::System.Collections.Generic.List<global::OsSettingsCreateExpectations.Handler4> @handlers4 = new();
	private readonly global::System.Collections.Generic.List<global::OsSettingsCreateExpectations.Handler5> @handlers5 = new();

	public override void Verify()
	{
		if (this.WasInstanceInvoked)
		{
			var failures = new global::System.Collections.Generic.List<string>();

			failures.AddRange(this.Verify(handlers2));
			failures.AddRange(this.Verify(handlers3));
			failures.AddRange(this.Verify(handlers4));
			failures.AddRange(this.Verify(handlers5));

			if (failures.Count > 0)
			{
				throw new global::Rocks.Exceptions.VerificationException(failures);
			}
		}
	}

	private sealed record RockOsSettings
		: global::OsSettings
	{
		public RockOsSettings(global::OsSettingsCreateExpectations @expectations, ConstructorProperties? @constructorProperties, string @ExeName, string @PathCommandName, global::DiffEngine.LaunchArguments @LaunchArguments, params string[] @SearchDirectories)
			: base(@ExeName, @PathCommandName, @LaunchArguments, @SearchDirectories)
		{
			this.Expectations = @expectations;
			if (@constructorProperties is not null)
			{
				this.ExeName = @constructorProperties.ExeName!;
				this.PathCommandName = @constructorProperties.PathCommandName!;
				this.LaunchArguments = @constructorProperties.LaunchArguments!;
				this.SearchDirectories = @constructorProperties.SearchDirectories!;
			}
		}
		public RockOsSettings(global::OsSettingsCreateExpectations @expectations, ConstructorProperties? @constructorProperties, string @exeName, string @pathCommandName, global::DiffEngine.LaunchArguments @launchArguments, string @searchDirectory)
			: base(@exeName, @pathCommandName, @launchArguments, @searchDirectory)
		{
			this.Expectations = @expectations;
			if (@constructorProperties is not null)
			{
				this.ExeName = @constructorProperties.ExeName!;
				this.PathCommandName = @constructorProperties.PathCommandName!;
				this.LaunchArguments = @constructorProperties.LaunchArguments!;
				this.SearchDirectories = @constructorProperties.SearchDirectories!;
			}
		}
		public RockOsSettings(global::OsSettingsCreateExpectations @expectations, ConstructorProperties? @constructorProperties, string @exeName, global::DiffEngine.LaunchArguments @launchArguments, params string[] @searchDirectories)
			: base(@exeName, @launchArguments, @searchDirectories)
		{
			this.Expectations = @expectations;
			if (@constructorProperties is not null)
			{
				this.ExeName = @constructorProperties.ExeName!;
				this.PathCommandName = @constructorProperties.PathCommandName!;
				this.LaunchArguments = @constructorProperties.LaunchArguments!;
				this.SearchDirectories = @constructorProperties.SearchDirectories!;
			}
		}
		public RockOsSettings(global::OsSettingsCreateExpectations @expectations, ConstructorProperties? @constructorProperties, string @exeName, global::DiffEngine.LaunchArguments @launchArguments, string @searchDirectory)
			: base(@exeName, @launchArguments, @searchDirectory)
		{
			this.Expectations = @expectations;
			if (@constructorProperties is not null)
			{
				this.ExeName = @constructorProperties.ExeName!;
				this.PathCommandName = @constructorProperties.PathCommandName!;
				this.LaunchArguments = @constructorProperties.LaunchArguments!;
				this.SearchDirectories = @constructorProperties.SearchDirectories!;
			}
		}
		public RockOsSettings(global::OsSettingsCreateExpectations @expectations, ConstructorProperties? @constructorProperties, string @exeName, string @pathCommandName, global::DiffEngine.LaunchArguments @launchArguments)
			: base(@exeName, @pathCommandName, @launchArguments)
		{
			this.Expectations = @expectations;
			if (@constructorProperties is not null)
			{
				this.ExeName = @constructorProperties.ExeName!;
				this.PathCommandName = @constructorProperties.PathCommandName!;
				this.LaunchArguments = @constructorProperties.LaunchArguments!;
				this.SearchDirectories = @constructorProperties.SearchDirectories!;
			}
		}
		public RockOsSettings(global::OsSettingsCreateExpectations @expectations, ConstructorProperties? @constructorProperties, string @exeName, global::DiffEngine.LaunchArguments @launchArguments)
			: base(@exeName, @launchArguments)
		{
			this.Expectations = @expectations;
			if (@constructorProperties is not null)
			{
				this.ExeName = @constructorProperties.ExeName!;
				this.PathCommandName = @constructorProperties.PathCommandName!;
				this.LaunchArguments = @constructorProperties.LaunchArguments!;
				this.SearchDirectories = @constructorProperties.SearchDirectories!;
			}
		}
		public RockOsSettings(global::OsSettingsCreateExpectations @expectations, ConstructorProperties? @constructorProperties, global::OsSettings @original)
			: base(@original)
		{
			this.Expectations = @expectations;
			if (@constructorProperties is not null)
			{
				this.ExeName = @constructorProperties.ExeName!;
				this.PathCommandName = @constructorProperties.PathCommandName!;
				this.LaunchArguments = @constructorProperties.LaunchArguments!;
				this.SearchDirectories = @constructorProperties.SearchDirectories!;
			}
		}

		[global::Rocks.MemberIdentifier(2, "string ToString()")]
		public override string ToString()
		{
			if (this.Expectations.handlers2.Count > 0)
			{
				var @handler = this.Expectations.handlers2[0];
				@handler.CallCount++;
				var @result = @handler.Callback is not null ?
					@handler.Callback() : @handler.ReturnValue;
				return @result!;
			}
			else
			{
				return base.ToString();
			}
		}

		[global::Rocks.MemberIdentifier(3, "bool PrintMembers(global::System.Text.StringBuilder @builder)")]
		protected override bool PrintMembers(global::System.Text.StringBuilder @builder)
		{
			if (this.Expectations.handlers3.Count > 0)
			{
				foreach (var @handler in this.Expectations.handlers3)
				{
					if (@handler.@builder.IsValid(@builder!))
					{
						@handler.CallCount++;
						var @result = @handler.Callback is not null ?
							@handler.Callback(@builder!) : @handler.ReturnValue;
						return @result!;
					}
				}

				throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool PrintMembers(global::System.Text.StringBuilder @builder)");
			}
			else
			{
				return base.PrintMembers(builder: @builder!);
			}
		}

		[global::Rocks.MemberIdentifier(4, "int GetHashCode()")]
		public override int GetHashCode()
		{
			if (this.Expectations.handlers4.Count > 0)
			{
				var @handler = this.Expectations.handlers4[0];
				@handler.CallCount++;
				var @result = @handler.Callback is not null ?
					@handler.Callback() : @handler.ReturnValue;
				return @result!;
			}
			else
			{
				return base.GetHashCode();
			}
		}

		[global::Rocks.MemberIdentifier(5, "get_EqualityContract()")]
		protected override global::System.Type EqualityContract
		{
			get
			{
				if (this.Expectations.handlers5.Count > 0)
				{
					var @handler = this.Expectations.handlers5[0];
					@handler.CallCount++;
					var @result = @handler.Callback is not null ?
						@handler.Callback() : @handler.ReturnValue;
					return @result!;
				}
				else
				{
					return base.EqualityContract;
				}
			}
		}

		private global::OsSettingsCreateExpectations Expectations { get; }
	}

	internal sealed class OsSettingsMethodExpectations
	{
		internal OsSettingsMethodExpectations(global::OsSettingsCreateExpectations expectations) =>
			this.Expectations = expectations;

		internal new global::Rocks.AdornmentsV4<global::OsSettingsCreateExpectations.Handler2, global::System.Func<string>, string> ToString()
		{
			var handler = new global::OsSettingsCreateExpectations.Handler2();
			this.Expectations.handlers2.Add(handler);
			return new(handler);
		}

		internal global::Rocks.AdornmentsV4<global::OsSettingsCreateExpectations.Handler3, global::System.Func<global::System.Text.StringBuilder, bool>, bool> PrintMembers(global::Rocks.Argument<global::System.Text.StringBuilder> @builder)
		{
			global::System.ArgumentNullException.ThrowIfNull(@builder);

			var handler = new global::OsSettingsCreateExpectations.Handler3
			{
				@builder = @builder,
			};

			this.Expectations.handlers3.Add(handler);
			return new(handler);
		}

		internal new global::Rocks.AdornmentsV4<global::OsSettingsCreateExpectations.Handler4, global::System.Func<int>, int> GetHashCode()
		{
			var handler = new global::OsSettingsCreateExpectations.Handler4();
			this.Expectations.handlers4.Add(handler);
			return new(handler);
		}

		private global::OsSettingsCreateExpectations Expectations { get; }
	}

	internal sealed class OsSettingsPropertyExpectations
	{
		internal sealed class OsSettingsPropertyGetterExpectations
		{
			internal OsSettingsPropertyGetterExpectations(global::OsSettingsCreateExpectations expectations) =>
				this.Expectations = expectations;

			internal global::Rocks.AdornmentsV4<global::OsSettingsCreateExpectations.Handler5, global::System.Func<global::System.Type>, global::System.Type> EqualityContract()
			{
				var handler = new global::OsSettingsCreateExpectations.Handler5();
				this.Expectations.handlers5.Add(handler);
				return new(handler);
			}
			private global::OsSettingsCreateExpectations Expectations { get; }
		}


		internal OsSettingsPropertyExpectations(global::OsSettingsCreateExpectations expectations) =>
			(this.Getters) = (new(expectations));

		internal global::OsSettingsCreateExpectations.OsSettingsPropertyExpectations.OsSettingsPropertyGetterExpectations Getters { get; }
	}

	internal global::OsSettingsCreateExpectations.OsSettingsMethodExpectations Methods { get; }
	internal global::OsSettingsCreateExpectations.OsSettingsPropertyExpectations Properties { get; }

	internal OsSettingsCreateExpectations() =>
		(this.Methods, this.Properties) = (new(this), new(this));

	internal sealed class ConstructorProperties
	{
		internal string? ExeName { get; init; }
		internal string? PathCommandName { get; init; }
		internal global::DiffEngine.LaunchArguments? LaunchArguments { get; init; }
		internal string[]? SearchDirectories { get; init; }
	}

	internal global::OsSettings Instance(global::OsSettingsCreateExpectations.ConstructorProperties? @constructorProperties, string @ExeName, string @PathCommandName, global::DiffEngine.LaunchArguments @LaunchArguments, params string[] @SearchDirectories)
	{
		if (!this.WasInstanceInvoked)
		{
			this.WasInstanceInvoked = true;
			var @mock = new RockOsSettings(this, @constructorProperties, @ExeName, @PathCommandName, @LaunchArguments, @SearchDirectories);
			this.MockType = @mock.GetType();
			return @mock;
		}
		else
		{
			throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
		}
	}
	internal global::OsSettings Instance(global::OsSettingsCreateExpectations.ConstructorProperties? @constructorProperties, string @exeName, string @pathCommandName, global::DiffEngine.LaunchArguments @launchArguments, string @searchDirectory)
	{
		if (!this.WasInstanceInvoked)
		{
			this.WasInstanceInvoked = true;
			var @mock = new RockOsSettings(this, @constructorProperties, @exeName, @pathCommandName, @launchArguments, @searchDirectory);
			this.MockType = @mock.GetType();
			return @mock;
		}
		else
		{
			throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
		}
	}
	internal global::OsSettings Instance(global::OsSettingsCreateExpectations.ConstructorProperties? @constructorProperties, string @exeName, global::DiffEngine.LaunchArguments @launchArguments, params string[] @searchDirectories)
	{
		if (!this.WasInstanceInvoked)
		{
			this.WasInstanceInvoked = true;
			var @mock = new RockOsSettings(this, @constructorProperties, @exeName, @launchArguments, @searchDirectories);
			this.MockType = @mock.GetType();
			return @mock;
		}
		else
		{
			throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
		}
	}
	internal global::OsSettings Instance(global::OsSettingsCreateExpectations.ConstructorProperties? @constructorProperties, string @exeName, global::DiffEngine.LaunchArguments @launchArguments, string @searchDirectory)
	{
		if (!this.WasInstanceInvoked)
		{
			this.WasInstanceInvoked = true;
			var @mock = new RockOsSettings(this, @constructorProperties, @exeName, @launchArguments, @searchDirectory);
			this.MockType = @mock.GetType();
			return @mock;
		}
		else
		{
			throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
		}
	}
	internal global::OsSettings Instance(global::OsSettingsCreateExpectations.ConstructorProperties? @constructorProperties, string @exeName, string @pathCommandName, global::DiffEngine.LaunchArguments @launchArguments)
	{
		if (!this.WasInstanceInvoked)
		{
			this.WasInstanceInvoked = true;
			var @mock = new RockOsSettings(this, @constructorProperties, @exeName, @pathCommandName, @launchArguments);
			this.MockType = @mock.GetType();
			return @mock;
		}
		else
		{
			throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
		}
	}
	internal global::OsSettings Instance(global::OsSettingsCreateExpectations.ConstructorProperties? @constructorProperties, string @exeName, global::DiffEngine.LaunchArguments @launchArguments)
	{
		if (!this.WasInstanceInvoked)
		{
			this.WasInstanceInvoked = true;
			var @mock = new RockOsSettings(this, @constructorProperties, @exeName, @launchArguments);
			this.MockType = @mock.GetType();
			return @mock;
		}
		else
		{
			throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
		}
	}
	internal global::OsSettings Instance(global::OsSettingsCreateExpectations.ConstructorProperties? @constructorProperties, global::OsSettings @original)
	{
		if (!this.WasInstanceInvoked)
		{
			this.WasInstanceInvoked = true;
			var @mock = new RockOsSettings(this, @constructorProperties, @original);
			this.MockType = @mock.GetType();
			return @mock;
		}
		else
		{
			throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
		}
	}
}