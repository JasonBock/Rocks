// <auto-generated/>

#nullable enable

using Rocks.Extensions;

namespace CsvHelper.Configuration
{
	internal sealed class IHasTypeConverterOptionsCreateExpectations<TClass, TMember>
		: global::Rocks.Expectations
	{
		#pragma warning disable CS8618
		internal sealed class Handler0<TMember1>
			: global::Rocks.Handler<global::System.Func<global::System.Linq.Expressions.Expression<global::System.Func<TClass, TMember>>, bool, global::CsvHelper.Configuration.IHasMapOptions<TClass, TMember>>, global::CsvHelper.Configuration.IHasMapOptions<TClass, TMember>>
		{
			public global::Rocks.Argument<global::System.Linq.Expressions.Expression<global::System.Func<TClass, TMember>>> @expression { get; set; }
			public global::Rocks.Argument<bool> @useExistingMap { get; set; }
		}
		private global::Rocks.Handlers<global::Rocks.Handler>? @handlers0;
		internal sealed class Handler1
			: global::Rocks.Handler<global::System.Func<TMember, global::CsvHelper.Configuration.IHasDefaultOptions<TClass, TMember>>, global::CsvHelper.Configuration.IHasDefaultOptions<TClass, TMember>>
		{
			public global::Rocks.Argument<TMember> @defaultValue { get; set; }
		}
		private global::Rocks.Handlers<global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler1>? @handlers1;
		internal sealed class Handler2
			: global::Rocks.Handler<global::System.Func<string, global::CsvHelper.Configuration.IHasDefaultOptions<TClass, TMember>>, global::CsvHelper.Configuration.IHasDefaultOptions<TClass, TMember>>
		{
			public global::Rocks.Argument<string> @defaultValue { get; set; }
		}
		private global::Rocks.Handlers<global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler2>? @handlers2;
		internal sealed class Handler3
			: global::Rocks.Handler<global::System.Func<global::CsvHelper.Validate, global::CsvHelper.Configuration.IHasMap<TClass>>, global::CsvHelper.Configuration.IHasMap<TClass>>
		{
			public global::Rocks.Argument<global::CsvHelper.Validate> @validateExpression { get; set; }
		}
		private global::Rocks.Handlers<global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler3>? @handlers3;
		internal sealed class Handler4
			: global::Rocks.Handler<global::System.Func<global::CsvHelper.Configuration.ClassMap<TClass>>, global::CsvHelper.Configuration.ClassMap<TClass>>
		{ }
		private global::Rocks.Handlers<global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler4>? @handlers4;
		#pragma warning restore CS8618
		
		public override void Verify()
		{
			if (this.WasInstanceInvoked)
			{
				var failures = new global::System.Collections.Generic.List<string>();
		
				if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
				if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
				if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
		
				if (failures.Count > 0)
				{
					throw new global::Rocks.Exceptions.VerificationException(failures);
				}
			}
		}
		
		private sealed class Mock
			: global::CsvHelper.Configuration.IHasTypeConverterOptions<TClass, TMember>
		{
			public Mock(global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember> @expectations)
			{
				this.Expectations = @expectations;
			}
			
			[global::Rocks.MemberIdentifier(0)]
			public global::CsvHelper.Configuration.IHasMapOptions<TClass, TMember> Map<TMember1>(global::System.Linq.Expressions.Expression<global::System.Func<TClass, TMember>> @expression, bool @useExistingMap = true)
			{
				if (this.Expectations.handlers0 is not null)
				{
					foreach (var @genericHandler in this.Expectations.handlers0)
					{
						if (@genericHandler is global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler0<TMember1> @handler)
						{
							if (@handler.@expression.IsValid(@expression!) &&
								@handler.@useExistingMap.IsValid(@useExistingMap!))
							{
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback(@expression!, @useExistingMap!) : @handler.ReturnValue;
								return @result!;
							}
						}
					}
					
					throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
				}
				
				throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
			}
			
			[global::Rocks.MemberIdentifier(1)]
			public global::CsvHelper.Configuration.IHasDefaultOptions<TClass, TMember> Default(TMember @defaultValue)
			{
				if (this.Expectations.handlers1 is not null)
				{
					foreach (var @handler in this.Expectations.handlers1)
					{
						if (@handler.@defaultValue.IsValid(@defaultValue!))
						{
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback(@defaultValue!) : @handler.ReturnValue;
							return @result!;
						}
					}
					
					throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(1)}");
				}
				
				throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
			}
			
			[global::Rocks.MemberIdentifier(2)]
			public global::CsvHelper.Configuration.IHasDefaultOptions<TClass, TMember> Default(string @defaultValue)
			{
				if (this.Expectations.handlers2 is not null)
				{
					foreach (var @handler in this.Expectations.handlers2)
					{
						if (@handler.@defaultValue.IsValid(@defaultValue!))
						{
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback(@defaultValue!) : @handler.ReturnValue;
							return @result!;
						}
					}
					
					throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(2)}");
				}
				
				throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(2)}");
			}
			
			[global::Rocks.MemberIdentifier(3)]
			public global::CsvHelper.Configuration.IHasMap<TClass> Validate(global::CsvHelper.Validate @validateExpression)
			{
				if (this.Expectations.handlers3 is not null)
				{
					foreach (var @handler in this.Expectations.handlers3)
					{
						if (@handler.@validateExpression.IsValid(@validateExpression!))
						{
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback(@validateExpression!) : @handler.ReturnValue;
							return @result!;
						}
					}
					
					throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(3)}");
				}
				
				throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(3)}");
			}
			
			[global::Rocks.MemberIdentifier(4)]
			public global::CsvHelper.Configuration.ClassMap<TClass> Build()
			{
				if (this.Expectations.handlers4 is not null)
				{
					var @handler = this.Expectations.handlers4.First;
					@handler.CallCount++;
					var @result = @handler.Callback is not null ?
						@handler.Callback() : @handler.ReturnValue;
					return @result!;
				}
				
				throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(4)}");
			}
			
			private global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember> Expectations { get; }
		}
		
		internal sealed class MethodExpectations
		{
			internal MethodExpectations(global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember> expectations) =>
				this.Expectations = expectations;
			
			internal global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Adornments.AdornmentsForHandler0<TMember1> Map<TMember1>(global::Rocks.Argument<global::System.Linq.Expressions.Expression<global::System.Func<TClass, TMember>>> @expression, global::Rocks.Argument<bool> @useExistingMap)
			{
				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
				global::System.ArgumentNullException.ThrowIfNull(@expression);
				global::System.ArgumentNullException.ThrowIfNull(@useExistingMap);
				
				var @handler = new global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler0<TMember1>
				{
					@expression = @expression,
					@useExistingMap = @useExistingMap.Transform(true),
				};
				
				if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(@handler); }
				else { this.Expectations.handlers0.Add(@handler); }
				return new(@handler);
			}
			internal global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Adornments.AdornmentsForHandler0<TMember1> Map<TMember1>(global::Rocks.Argument<global::System.Linq.Expressions.Expression<global::System.Func<TClass, TMember>>> @expression, bool @useExistingMap = true) =>
				this.Map<TMember1>(@expression, global::Rocks.Arg.Is(@useExistingMap));
			
			internal global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Adornments.AdornmentsForHandler1 Default(global::Rocks.Argument<TMember> @defaultValue)
			{
				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
				global::System.ArgumentNullException.ThrowIfNull(@defaultValue);
				
				var @handler = new global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler1
				{
					@defaultValue = @defaultValue,
				};
				
				if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(@handler); }
				else { this.Expectations.handlers1.Add(@handler); }
				return new(@handler);
			}
			
			internal global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Adornments.AdornmentsForHandler2 Default(global::Rocks.Argument<string> @defaultValue)
			{
				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
				global::System.ArgumentNullException.ThrowIfNull(@defaultValue);
				
				var @handler = new global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler2
				{
					@defaultValue = @defaultValue,
				};
				
				if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(@handler); }
				else { this.Expectations.handlers2.Add(@handler); }
				return new(@handler);
			}
			
			internal global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Adornments.AdornmentsForHandler3 Validate(global::Rocks.Argument<global::CsvHelper.Validate> @validateExpression)
			{
				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
				global::System.ArgumentNullException.ThrowIfNull(@validateExpression);
				
				var @handler = new global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler3
				{
					@validateExpression = @validateExpression,
				};
				
				if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(@handler); }
				else { this.Expectations.handlers3.Add(@handler); }
				return new(@handler);
			}
			
			internal global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Adornments.AdornmentsForHandler4 Build()
			{
				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
				var handler = new global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler4();
				if (this.Expectations.handlers4 is null ) { this.Expectations.handlers4 = new(handler); }
				else { this.Expectations.handlers4.Add(handler); }
				return new(handler);
			}
			
			private global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember> Expectations { get; }
		}
		
		internal global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.MethodExpectations Methods { get; }
		
		internal IHasTypeConverterOptionsCreateExpectations() =>
			(this.Methods) = (new(this));
		
		internal global::CsvHelper.Configuration.IHasTypeConverterOptions<TClass, TMember> Instance()
		{
			if (!this.WasInstanceInvoked)
			{
				this.WasInstanceInvoked = true;
				var @mock = new Mock(this);
				this.MockType = @mock.GetType();
				return @mock;
			}
			else
			{
				throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
			}
		}
		
		internal static class Adornments
		{
			public interface IAdornmentsForIHasTypeConverterOptions<TAdornments>
				: global::Rocks.IAdornments<TAdornments>
				where TAdornments : IAdornmentsForIHasTypeConverterOptions<TAdornments>
			{ }
			
			public sealed class AdornmentsForHandler0<TMember1>
				: global::Rocks.Adornments<AdornmentsForHandler0<TMember1>, global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler0<TMember1>, global::System.Func<global::System.Linq.Expressions.Expression<global::System.Func<TClass, TMember>>, bool, global::CsvHelper.Configuration.IHasMapOptions<TClass, TMember>>, global::CsvHelper.Configuration.IHasMapOptions<TClass, TMember>>, IAdornmentsForIHasTypeConverterOptions<AdornmentsForHandler0<TMember1>>
			{ 
				public AdornmentsForHandler0(global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler0<TMember1> handler)
					: base(handler) { }				
			}
			public sealed class AdornmentsForHandler1
				: global::Rocks.Adornments<AdornmentsForHandler1, global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler1, global::System.Func<TMember, global::CsvHelper.Configuration.IHasDefaultOptions<TClass, TMember>>, global::CsvHelper.Configuration.IHasDefaultOptions<TClass, TMember>>, IAdornmentsForIHasTypeConverterOptions<AdornmentsForHandler1>
			{ 
				public AdornmentsForHandler1(global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler1 handler)
					: base(handler) { }				
			}
			public sealed class AdornmentsForHandler2
				: global::Rocks.Adornments<AdornmentsForHandler2, global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler2, global::System.Func<string, global::CsvHelper.Configuration.IHasDefaultOptions<TClass, TMember>>, global::CsvHelper.Configuration.IHasDefaultOptions<TClass, TMember>>, IAdornmentsForIHasTypeConverterOptions<AdornmentsForHandler2>
			{ 
				public AdornmentsForHandler2(global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler2 handler)
					: base(handler) { }				
			}
			public sealed class AdornmentsForHandler3
				: global::Rocks.Adornments<AdornmentsForHandler3, global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler3, global::System.Func<global::CsvHelper.Validate, global::CsvHelper.Configuration.IHasMap<TClass>>, global::CsvHelper.Configuration.IHasMap<TClass>>, IAdornmentsForIHasTypeConverterOptions<AdornmentsForHandler3>
			{ 
				public AdornmentsForHandler3(global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler3 handler)
					: base(handler) { }				
			}
			public sealed class AdornmentsForHandler4
				: global::Rocks.Adornments<AdornmentsForHandler4, global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler4, global::System.Func<global::CsvHelper.Configuration.ClassMap<TClass>>, global::CsvHelper.Configuration.ClassMap<TClass>>, IAdornmentsForIHasTypeConverterOptions<AdornmentsForHandler4>
			{ 
				public AdornmentsForHandler4(global::CsvHelper.Configuration.IHasTypeConverterOptionsCreateExpectations<TClass, TMember>.Handler4 handler)
					: base(handler) { }				
			}
		}
	}
}