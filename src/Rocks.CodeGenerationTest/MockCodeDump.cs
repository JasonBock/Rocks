//// <auto-generated/>

//#pragma warning disable CS8618
//#pragma warning disable CS8633
//#pragma warning disable CS8714
//#pragma warning disable CS8775

//#nullable enable

//using Rocks.Extensions;

//namespace System.Reactive.Concurrency
//{
//	[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
//	public sealed partial class HistoricalSchedulerPartialTarget
//		: global::Rocks.Expectations
//	{
//		internal sealed class Handler0
//			: global::Rocks.Handler<global::System.Func<string?>, string?>
//		{ }
//		private global::Rocks.Handlers<global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler0>? @handlers0;
//		internal sealed class Handler1
//			: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
//		{
//			public global::Rocks.Argument<object?> @obj { get; set; }
//		}
//		private global::Rocks.Handlers<global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler1>? @handlers1;
//		internal sealed class Handler2
//			: global::Rocks.Handler<global::System.Func<int>, int>
//		{ }
//		private global::Rocks.Handlers<global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler2>? @handlers2;
//		internal sealed class Handler6<TState>
//			: global::Rocks.Handler<global::System.Func<TState, global::System.DateTimeOffset, global::System.Func<global::System.Reactive.Concurrency.IScheduler, TState, global::System.IDisposable>, global::System.IDisposable>, global::System.IDisposable>
//		{
//			public global::Rocks.Argument<TState> @state { get; set; }
//			public global::Rocks.Argument<global::System.DateTimeOffset> @dueTime { get; set; }
//			public global::Rocks.Argument<global::System.Func<global::System.Reactive.Concurrency.IScheduler, TState, global::System.IDisposable>> @action { get; set; }
//		}
//		private global::Rocks.Handlers<global::Rocks.Handler>? @handlers6;
//		internal sealed class Handler8
//			: global::Rocks.Handler<global::System.Func<global::System.Type, object?>, object?>
//		{
//			public global::Rocks.Argument<global::System.Type> @serviceType { get; set; }
//		}
//		private global::Rocks.Handlers<global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler8>? @handlers8;
//		internal sealed class Handler9
//			: global::Rocks.Handler<global::System.Func<global::System.DateTimeOffset, global::System.TimeSpan, global::System.DateTimeOffset>, global::System.DateTimeOffset>
//		{
//			public global::Rocks.Argument<global::System.DateTimeOffset> @absolute { get; set; }
//			public global::Rocks.Argument<global::System.TimeSpan> @relative { get; set; }
//		}
//		private global::Rocks.Handlers<global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler9>? @handlers9;
//		internal sealed class Handler10
//			: global::Rocks.Handler<global::System.Func<global::System.DateTimeOffset, global::System.DateTimeOffset>, global::System.DateTimeOffset>
//		{
//			public global::Rocks.Argument<global::System.DateTimeOffset> @absolute { get; set; }
//		}
//		private global::Rocks.Handlers<global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler10>? @handlers10;
//		internal sealed class Handler11
//			: global::Rocks.Handler<global::System.Func<global::System.TimeSpan, global::System.TimeSpan>, global::System.TimeSpan>
//		{
//			public global::Rocks.Argument<global::System.TimeSpan> @timeSpan { get; set; }
//		}
//		private global::Rocks.Handlers<global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler11>? @handlers11;
//		internal sealed class Handler12
//			: global::Rocks.Handler<global::System.Func<global::System.Reactive.Concurrency.IScheduledItem<global::System.DateTimeOffset>?>, global::System.Reactive.Concurrency.IScheduledItem<global::System.DateTimeOffset>?>
//		{ }
//		private global::Rocks.Handlers<global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler12>? @handlers12;
//		internal sealed class Handler13<TState>
//			: global::Rocks.Handler<global::System.Func<TState, global::System.DateTimeOffset, global::System.Func<global::System.Reactive.Concurrency.IScheduler, TState, global::System.IDisposable>, global::System.IDisposable>, global::System.IDisposable>
//		{
//			public global::Rocks.Argument<TState> @state { get; set; }
//			public global::Rocks.Argument<global::System.DateTimeOffset> @dueTime { get; set; }
//			public global::Rocks.Argument<global::System.Func<global::System.Reactive.Concurrency.IScheduler, TState, global::System.IDisposable>> @action { get; set; }
//		}
//		private global::Rocks.Handlers<global::Rocks.Handler>? @handlers13;

//		public override void Verify()
//		{
//			if (this.WasInstanceInvoked)
//			{
//				var failures = new global::System.Collections.Generic.List<string>();

//				if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
//				if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
//				if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
//				if (this.handlers6 is not null) { failures.AddRange(this.Verify(this.handlers6, 6)); }
//				if (this.handlers8 is not null) { failures.AddRange(this.Verify(this.handlers8, 8)); }
//				if (this.handlers9 is not null) { failures.AddRange(this.Verify(this.handlers9, 9)); }
//				if (this.handlers10 is not null) { failures.AddRange(this.Verify(this.handlers10, 10)); }
//				if (this.handlers11 is not null) { failures.AddRange(this.Verify(this.handlers11, 11)); }
//				if (this.handlers12 is not null) { failures.AddRange(this.Verify(this.handlers12, 12)); }
//				if (this.handlers13 is not null) { failures.AddRange(this.Verify(this.handlers13, 13)); }

//				if (failures.Count > 0)
//				{
//					throw new global::Rocks.Exceptions.VerificationException(failures);
//				}
//			}
//		}

//		private sealed class Mock
//			: global::System.Reactive.Concurrency.HistoricalScheduler
//		{
//			public Mock(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget @expectations)
//			{
//				this.Expectations = @expectations;
//			}
//			public Mock(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget @expectations, global::System.DateTimeOffset @initialClock)
//				: base(@initialClock)
//			{
//				this.Expectations = @expectations;
//			}
//			public Mock(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget @expectations, global::System.DateTimeOffset @initialClock, global::System.Collections.Generic.IComparer<global::System.DateTimeOffset> @comparer)
//				: base(@initialClock, @comparer)
//			{
//				this.Expectations = @expectations;
//			}

//			[global::Rocks.MemberIdentifier(0)]
//			public override string? ToString()
//			{
//				if (this.Expectations.handlers0 is not null)
//				{
//					var @handler = this.Expectations.handlers0.First;
//					@handler.CallCount++;
//					var @result = @handler.Callback is not null ?
//						@handler.Callback() : @handler.ReturnValue;
//					return @result!;
//				}
//				else
//				{
//					return base.ToString();
//				}
//			}

//			[global::Rocks.MemberIdentifier(1)]
//			public override bool Equals(object? @obj)
//			{
//				if (this.Expectations.handlers1 is not null)
//				{
//					foreach (var @handler in this.Expectations.handlers1)
//					{
//						if (@handler.@obj.IsValid(@obj!))
//						{
//							@handler.CallCount++;
//							var @result = @handler.Callback is not null ?
//								@handler.Callback(@obj!) : @handler.ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException(
//						$"""
//						No handlers match for {this.GetType().GetMemberDescription(1)}
//							obj: {@obj.FormatValue()}
//						""");
//				}
//				else
//				{
//					return base.Equals(@obj: @obj!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(2)]
//			public override int GetHashCode()
//			{
//				if (this.Expectations.handlers2 is not null)
//				{
//					var @handler = this.Expectations.handlers2.First;
//					@handler.CallCount++;
//					var @result = @handler.Callback is not null ?
//						@handler.Callback() : @handler.ReturnValue;
//					return @result!;
//				}
//				else
//				{
//					return base.GetHashCode();
//				}
//			}

//			[global::Rocks.MemberIdentifier(6)]
//			public override global::System.IDisposable ScheduleAbsolute<TState>(TState @state, global::System.DateTimeOffset @dueTime, global::System.Func<global::System.Reactive.Concurrency.IScheduler, TState, global::System.IDisposable> @action)
//			{
//				if (this.Expectations.handlers6 is not null)
//				{
//					foreach (var @genericHandler in this.Expectations.handlers6)
//					{
//						if (@genericHandler is global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler6<TState> @handler)
//						{
//							if (@handler.@state.IsValid(@state!) &&
//								@handler.@dueTime.IsValid(@dueTime!) &&
//								@handler.@action.IsValid(@action!))
//							{
//								@handler.CallCount++;
//								var @result = @handler.Callback is not null ?
//									@handler.Callback(@state!, @dueTime!, @action!) : @handler.ReturnValue;
//								return @result!;
//							}
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException(
//						$"""
//						No handlers match for {this.GetType().GetMemberDescription(6)}
//							state: {@state.FormatValue()}
//							dueTime: {@dueTime.FormatValue()}
//							action: {@action.FormatValue()}
//						""");
//				}

//				throw new global::Rocks.Exceptions.ExpectationException(
//					$"""
//					No handlers were found for {this.GetType().GetMemberDescription(6)}
//						state: {@state.FormatValue()}
//						dueTime: {@dueTime.FormatValue()}
//						action: {@action.FormatValue()}
//					""");
//			}

//			[global::Rocks.MemberIdentifier(8)]
//			protected override object? GetService(global::System.Type @serviceType)
//			{
//				if (this.Expectations.handlers8 is not null)
//				{
//					foreach (var @handler in this.Expectations.handlers8)
//					{
//						if (@handler.@serviceType.IsValid(@serviceType!))
//						{
//							@handler.CallCount++;
//							var @result = @handler.Callback is not null ?
//								@handler.Callback(@serviceType!) : @handler.ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException(
//						$"""
//						No handlers match for {this.GetType().GetMemberDescription(8)}
//							serviceType: {@serviceType.FormatValue()}
//						""");
//				}
//				else
//				{
//					return base.GetService(@serviceType: @serviceType!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(9)]
//			protected override global::System.DateTimeOffset Add(global::System.DateTimeOffset @absolute, global::System.TimeSpan @relative)
//			{
//				if (this.Expectations.handlers9 is not null)
//				{
//					foreach (var @handler in this.Expectations.handlers9)
//					{
//						if (@handler.@absolute.IsValid(@absolute!) &&
//							@handler.@relative.IsValid(@relative!))
//						{
//							@handler.CallCount++;
//							var @result = @handler.Callback is not null ?
//								@handler.Callback(@absolute!, @relative!) : @handler.ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException(
//						$"""
//						No handlers match for {this.GetType().GetMemberDescription(9)}
//							absolute: {@absolute.FormatValue()}
//							relative: {@relative.FormatValue()}
//						""");
//				}
//				else
//				{
//					return base.Add(@absolute: @absolute!, @relative: @relative!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(10)]
//			protected override global::System.DateTimeOffset ToDateTimeOffset(global::System.DateTimeOffset @absolute)
//			{
//				if (this.Expectations.handlers10 is not null)
//				{
//					foreach (var @handler in this.Expectations.handlers10)
//					{
//						if (@handler.@absolute.IsValid(@absolute!))
//						{
//							@handler.CallCount++;
//							var @result = @handler.Callback is not null ?
//								@handler.Callback(@absolute!) : @handler.ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException(
//						$"""
//						No handlers match for {this.GetType().GetMemberDescription(10)}
//							absolute: {@absolute.FormatValue()}
//						""");
//				}
//				else
//				{
//					return base.ToDateTimeOffset(@absolute: @absolute!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(11)]
//			protected override global::System.TimeSpan ToRelative(global::System.TimeSpan @timeSpan)
//			{
//				if (this.Expectations.handlers11 is not null)
//				{
//					foreach (var @handler in this.Expectations.handlers11)
//					{
//						if (@handler.@timeSpan.IsValid(@timeSpan!))
//						{
//							@handler.CallCount++;
//							var @result = @handler.Callback is not null ?
//								@handler.Callback(@timeSpan!) : @handler.ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException(
//						$"""
//						No handlers match for {this.GetType().GetMemberDescription(11)}
//							timeSpan: {@timeSpan.FormatValue()}
//						""");
//				}
//				else
//				{
//					return base.ToRelative(@timeSpan: @timeSpan!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(12)]
//			protected override global::System.Reactive.Concurrency.IScheduledItem<global::System.DateTimeOffset>? GetNext()
//			{
//				if (this.Expectations.handlers12 is not null)
//				{
//					var @handler = this.Expectations.handlers12.First;
//					@handler.CallCount++;
//					var @result = @handler.Callback is not null ?
//						@handler.Callback() : @handler.ReturnValue;
//					return @result!;
//				}
//				else
//				{
//					return base.GetNext();
//				}
//			}

//			[global::Rocks.MemberIdentifier(13)]
//			public override global::System.IDisposable ScheduleAbsolute<TState>(TState @state, global::System.DateTimeOffset @dueTime, global::System.Func<global::System.Reactive.Concurrency.IScheduler, TState, global::System.IDisposable> @action)
//			{
//				if (this.Expectations.handlers13 is not null)
//				{
//					foreach (var @genericHandler in this.Expectations.handlers13)
//					{
//						if (@genericHandler is global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler13<TState> @handler)
//						{
//							if (@handler.@state.IsValid(@state!) &&
//								@handler.@dueTime.IsValid(@dueTime!) &&
//								@handler.@action.IsValid(@action!))
//							{
//								@handler.CallCount++;
//								var @result = @handler.Callback is not null ?
//									@handler.Callback(@state!, @dueTime!, @action!) : @handler.ReturnValue;
//								return @result!;
//							}
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException(
//						$"""
//						No handlers match for {this.GetType().GetMemberDescription(13)}
//							state: {@state.FormatValue()}
//							dueTime: {@dueTime.FormatValue()}
//							action: {@action.FormatValue()}
//						""");
//				}
//				else
//				{
//					return base.ScheduleAbsolute<TState>(@state: @state!, @dueTime: @dueTime!, @action: @action!);
//				}
//			}

//			private global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget Expectations { get; }
//		}

//		internal sealed class MethodExpectations
//		{
//			internal MethodExpectations(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget expectations) =>
//				this.Expectations = expectations;

//			internal new global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Adornments.AdornmentsForHandler0 ToString()
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				var handler = new global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler0();
//				if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(handler); }
//				else { this.Expectations.handlers0.Add(handler); }
//				return new(handler);
//			}

//			internal global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Adornments.AdornmentsForHandler1 Equals(global::Rocks.Argument<object?> @obj)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@obj);

//				var @handler = new global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler1
//				{
//					@obj = @obj,
//				};

//				if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
//				else { this.Expectations.handlers1.Add(@handler); }
//				return new(@handler);
//			}

//			internal new global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Adornments.AdornmentsForHandler2 GetHashCode()
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				var handler = new global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler2();
//				if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
//				else { this.Expectations.handlers2.Add(handler); }
//				return new(handler);
//			}

//			internal global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Adornments.AdornmentsForHandler6<TState> ScheduleAbsolute<TState>(global::Rocks.Argument<TState> @state, global::Rocks.Argument<global::System.DateTimeOffset> @dueTime, global::Rocks.Argument<global::System.Func<global::System.Reactive.Concurrency.IScheduler, TState, global::System.IDisposable>> @action)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@state);
//				global::System.ArgumentNullException.ThrowIfNull(@dueTime);
//				global::System.ArgumentNullException.ThrowIfNull(@action);

//				var @handler = new global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler6<TState>
//				{
//					@state = @state,
//					@dueTime = @dueTime,
//					@action = @action,
//				};

//				if (this.Expectations.handlers6 is null) { this.Expectations.handlers6 = new(@handler); }
//				else { this.Expectations.handlers6.Add(@handler); }
//				return new(@handler);
//			}

//			internal global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Adornments.AdornmentsForHandler8 GetService(global::Rocks.Argument<global::System.Type> @serviceType)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@serviceType);

//				var @handler = new global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler8
//				{
//					@serviceType = @serviceType,
//				};

//				if (this.Expectations.handlers8 is null) { this.Expectations.handlers8 = new(@handler); }
//				else { this.Expectations.handlers8.Add(@handler); }
//				return new(@handler);
//			}

//			internal global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Adornments.AdornmentsForHandler9 Add(global::Rocks.Argument<global::System.DateTimeOffset> @absolute, global::Rocks.Argument<global::System.TimeSpan> @relative)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@absolute);
//				global::System.ArgumentNullException.ThrowIfNull(@relative);

//				var @handler = new global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler9
//				{
//					@absolute = @absolute,
//					@relative = @relative,
//				};

//				if (this.Expectations.handlers9 is null) { this.Expectations.handlers9 = new(@handler); }
//				else { this.Expectations.handlers9.Add(@handler); }
//				return new(@handler);
//			}

//			internal global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Adornments.AdornmentsForHandler10 ToDateTimeOffset(global::Rocks.Argument<global::System.DateTimeOffset> @absolute)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@absolute);

//				var @handler = new global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler10
//				{
//					@absolute = @absolute,
//				};

//				if (this.Expectations.handlers10 is null) { this.Expectations.handlers10 = new(@handler); }
//				else { this.Expectations.handlers10.Add(@handler); }
//				return new(@handler);
//			}

//			internal global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Adornments.AdornmentsForHandler11 ToRelative(global::Rocks.Argument<global::System.TimeSpan> @timeSpan)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@timeSpan);

//				var @handler = new global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler11
//				{
//					@timeSpan = @timeSpan,
//				};

//				if (this.Expectations.handlers11 is null) { this.Expectations.handlers11 = new(@handler); }
//				else { this.Expectations.handlers11.Add(@handler); }
//				return new(@handler);
//			}

//			internal global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Adornments.AdornmentsForHandler12 GetNext()
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				var handler = new global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler12();
//				if (this.Expectations.handlers12 is null) { this.Expectations.handlers12 = new(handler); }
//				else { this.Expectations.handlers12.Add(handler); }
//				return new(handler);
//			}

//			internal global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Adornments.AdornmentsForHandler13<TState> ScheduleAbsolute<TState>(global::Rocks.Argument<TState> @state, global::Rocks.Argument<global::System.DateTimeOffset> @dueTime, global::Rocks.Argument<global::System.Func<global::System.Reactive.Concurrency.IScheduler, TState, global::System.IDisposable>> @action)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@state);
//				global::System.ArgumentNullException.ThrowIfNull(@dueTime);
//				global::System.ArgumentNullException.ThrowIfNull(@action);

//				var @handler = new global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler13<TState>
//				{
//					@state = @state,
//					@dueTime = @dueTime,
//					@action = @action,
//				};

//				if (this.Expectations.handlers13 is null) { this.Expectations.handlers13 = new(@handler); }
//				else { this.Expectations.handlers13.Add(@handler); }
//				return new(@handler);
//			}

//			private global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget Expectations { get; }
//		}

//		internal global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.MethodExpectations Methods { get; }

//		internal HistoricalSchedulerPartialTarget() =>
//			(this.Methods) = (new(this));

//		internal global::System.Reactive.Concurrency.HistoricalScheduler Instance()
//		{
//			if (!this.WasInstanceInvoked)
//			{
//				this.WasInstanceInvoked = true;
//				var @mock = new Mock(this);
//				this.MockType = @mock.GetType();
//				return @mock;
//			}
//			else
//			{
//				throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
//			}
//		}
//		internal global::System.Reactive.Concurrency.HistoricalScheduler Instance(global::System.DateTimeOffset @initialClock)
//		{
//			if (!this.WasInstanceInvoked)
//			{
//				this.WasInstanceInvoked = true;
//				var @mock = new Mock(this, @initialClock);
//				this.MockType = @mock.GetType();
//				return @mock;
//			}
//			else
//			{
//				throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
//			}
//		}
//		internal global::System.Reactive.Concurrency.HistoricalScheduler Instance(global::System.DateTimeOffset @initialClock, global::System.Collections.Generic.IComparer<global::System.DateTimeOffset> @comparer)
//		{
//			if (!this.WasInstanceInvoked)
//			{
//				this.WasInstanceInvoked = true;
//				var @mock = new Mock(this, @initialClock, @comparer);
//				this.MockType = @mock.GetType();
//				return @mock;
//			}
//			else
//			{
//				throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
//			}
//		}

//		internal static class Adornments
//		{
//			public interface IAdornmentsForHistoricalSchedulerPartialTarget<TAdornments>
//				: global::Rocks.IAdornments<TAdornments>
//				where TAdornments : IAdornmentsForHistoricalSchedulerPartialTarget<TAdornments>
//			{ }

//			public sealed class AdornmentsForHandler0
//				: global::Rocks.Adornments<AdornmentsForHandler0, global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler0, global::System.Func<string?>, string?>, IAdornmentsForHistoricalSchedulerPartialTarget<AdornmentsForHandler0>
//			{
//				public AdornmentsForHandler0(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler0 handler)
//					: base(handler) { }
//			}
//			public sealed class AdornmentsForHandler1
//				: global::Rocks.Adornments<AdornmentsForHandler1, global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler1, global::System.Func<object?, bool>, bool>, IAdornmentsForHistoricalSchedulerPartialTarget<AdornmentsForHandler1>
//			{
//				public AdornmentsForHandler1(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler1 handler)
//					: base(handler) { }
//			}
//			public sealed class AdornmentsForHandler2
//				: global::Rocks.Adornments<AdornmentsForHandler2, global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler2, global::System.Func<int>, int>, IAdornmentsForHistoricalSchedulerPartialTarget<AdornmentsForHandler2>
//			{
//				public AdornmentsForHandler2(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler2 handler)
//					: base(handler) { }
//			}
//			public sealed class AdornmentsForHandler6<TState>
//				: global::Rocks.Adornments<AdornmentsForHandler6<TState>, global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler6<TState>, global::System.Func<TState, global::System.DateTimeOffset, global::System.Func<global::System.Reactive.Concurrency.IScheduler, TState, global::System.IDisposable>, global::System.IDisposable>, global::System.IDisposable>, IAdornmentsForHistoricalSchedulerPartialTarget<AdornmentsForHandler6<TState>>
//			{
//				public AdornmentsForHandler6(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler6<TState> handler)
//					: base(handler) { }
//			}
//			public sealed class AdornmentsForHandler8
//				: global::Rocks.Adornments<AdornmentsForHandler8, global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler8, global::System.Func<global::System.Type, object?>, object?>, IAdornmentsForHistoricalSchedulerPartialTarget<AdornmentsForHandler8>
//			{
//				public AdornmentsForHandler8(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler8 handler)
//					: base(handler) { }
//			}
//			public sealed class AdornmentsForHandler9
//				: global::Rocks.Adornments<AdornmentsForHandler9, global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler9, global::System.Func<global::System.DateTimeOffset, global::System.TimeSpan, global::System.DateTimeOffset>, global::System.DateTimeOffset>, IAdornmentsForHistoricalSchedulerPartialTarget<AdornmentsForHandler9>
//			{
//				public AdornmentsForHandler9(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler9 handler)
//					: base(handler) { }
//			}
//			public sealed class AdornmentsForHandler10
//				: global::Rocks.Adornments<AdornmentsForHandler10, global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler10, global::System.Func<global::System.DateTimeOffset, global::System.DateTimeOffset>, global::System.DateTimeOffset>, IAdornmentsForHistoricalSchedulerPartialTarget<AdornmentsForHandler10>
//			{
//				public AdornmentsForHandler10(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler10 handler)
//					: base(handler) { }
//			}
//			public sealed class AdornmentsForHandler11
//				: global::Rocks.Adornments<AdornmentsForHandler11, global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler11, global::System.Func<global::System.TimeSpan, global::System.TimeSpan>, global::System.TimeSpan>, IAdornmentsForHistoricalSchedulerPartialTarget<AdornmentsForHandler11>
//			{
//				public AdornmentsForHandler11(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler11 handler)
//					: base(handler) { }
//			}
//			public sealed class AdornmentsForHandler12
//				: global::Rocks.Adornments<AdornmentsForHandler12, global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler12, global::System.Func<global::System.Reactive.Concurrency.IScheduledItem<global::System.DateTimeOffset>?>, global::System.Reactive.Concurrency.IScheduledItem<global::System.DateTimeOffset>?>, IAdornmentsForHistoricalSchedulerPartialTarget<AdornmentsForHandler12>
//			{
//				public AdornmentsForHandler12(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler12 handler)
//					: base(handler) { }
//			}
//			public sealed class AdornmentsForHandler13<TState>
//				: global::Rocks.Adornments<AdornmentsForHandler13<TState>, global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler13<TState>, global::System.Func<TState, global::System.DateTimeOffset, global::System.Func<global::System.Reactive.Concurrency.IScheduler, TState, global::System.IDisposable>, global::System.IDisposable>, global::System.IDisposable>, IAdornmentsForHistoricalSchedulerPartialTarget<AdornmentsForHandler13<TState>>
//			{
//				public AdornmentsForHandler13(global::System.Reactive.Concurrency.HistoricalSchedulerPartialTarget.Handler13<TState> handler)
//					: base(handler) { }
//			}
//		}
//	}
//}

//#pragma warning restore CS8618
//#pragma warning restore CS8633
//#pragma warning restore CS8714
//#pragma warning restore CS8775