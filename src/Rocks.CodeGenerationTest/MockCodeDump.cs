//// <auto-generated/>

//#nullable enable

//using Rocks.Extensions;
//using System.Collections.Generic;
//using System.Collections.Immutable;

//namespace BenchmarkDotNet.Toolchains.Roslyn
//{
//	internal static class CreateExpectationsOfGeneratorExtensions
//	{
//		internal static global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> Methods(this global::Rocks.Expectations.Expectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self) =>
//			new(@self);

//		internal static global::BenchmarkDotNet.Toolchains.Roslyn.Generator Instance(this global::Rocks.Expectations.Expectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self)
//		{
//			if (!@self.WasInstanceInvoked)
//			{
//				@self.WasInstanceInvoked = true;
//				var @mock = new RockGenerator(@self);
//				@self.MockType = @mock.GetType();
//				return @mock;
//			}
//			else
//			{
//				throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
//			}
//		}

//		private sealed class RockGenerator
//			: global::BenchmarkDotNet.Toolchains.Roslyn.Generator
//		{
//			private readonly global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<global::Rocks.HandlerInformation>> handlers;

//			public RockGenerator(global::Rocks.Expectations.Expectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @expectations)
//			{
//				this.handlers = @expectations.Handlers;
//			}

//			[global::Rocks.MemberIdentifier(0, "string? ToString()")]
//			public override string? ToString()
//			{
//				if (this.handlers.TryGetValue(0, out var @methodHandlers))
//				{
//					var @methodHandler = @methodHandlers[0];
//					@methodHandler.IncrementCallCount();
//					var @result = @methodHandler.Method is not null ?
//						((global::System.Func<string?>)@methodHandler.Method)() :
//						((global::Rocks.HandlerInformation<string?>)@methodHandler).ReturnValue;
//					return @result!;
//				}
//				else
//				{
//					return base.ToString();
//				}
//			}

//			[global::Rocks.MemberIdentifier(1, "bool Equals(object? @obj)")]
//			public override bool Equals(object? @obj)
//			{
//				if (this.handlers.TryGetValue(1, out var @methodHandlers))
//				{
//					foreach (var @methodHandler in @methodHandlers)
//					{
//						if (((global::Rocks.Argument<object?>)@methodHandler.Expectations[0]).IsValid(@obj!))
//						{
//							@methodHandler.IncrementCallCount();
//							var @result = @methodHandler.Method is not null ?
//								((global::System.Func<object?, bool>)@methodHandler.Method)(@obj!) :
//								((global::Rocks.HandlerInformation<bool>)@methodHandler).ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
//				}
//				else
//				{
//					return base.Equals(obj: @obj!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(2, "int GetHashCode()")]
//			public override int GetHashCode()
//			{
//				if (this.handlers.TryGetValue(2, out var @methodHandlers))
//				{
//					var @methodHandler = @methodHandlers[0];
//					@methodHandler.IncrementCallCount();
//					var @result = @methodHandler.Method is not null ?
//						((global::System.Func<int>)@methodHandler.Method)() :
//						((global::Rocks.HandlerInformation<int>)@methodHandler).ReturnValue;
//					return @result!;
//				}
//				else
//				{
//					return base.GetHashCode();
//				}
//			}

//			[global::Rocks.MemberIdentifier(4, "string GetBinariesDirectoryPath(string @buildArtifactsDirectoryPath, string @configuration)")]
//			protected override string GetBinariesDirectoryPath(string @buildArtifactsDirectoryPath, string @configuration)
//			{
//				if (this.handlers.TryGetValue(4, out var @methodHandlers))
//				{
//					foreach (var @methodHandler in @methodHandlers)
//					{
//						if (((global::Rocks.Argument<string>)@methodHandler.Expectations[0]).IsValid(@buildArtifactsDirectoryPath!) &&
//							((global::Rocks.Argument<string>)@methodHandler.Expectations[1]).IsValid(@configuration!))
//						{
//							@methodHandler.IncrementCallCount();
//							var @result = @methodHandler.Method is not null ?
//								((global::System.Func<string, string, string>)@methodHandler.Method)(@buildArtifactsDirectoryPath!, @configuration!) :
//								((global::Rocks.HandlerInformation<string>)@methodHandler).ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for string GetBinariesDirectoryPath(string @buildArtifactsDirectoryPath, string @configuration)");
//				}
//				else
//				{
//					return base.GetBinariesDirectoryPath(buildArtifactsDirectoryPath: @buildArtifactsDirectoryPath!, configuration: @configuration!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(5, "string GetExecutableExtension()")]
//			protected override string GetExecutableExtension()
//			{
//				if (this.handlers.TryGetValue(5, out var @methodHandlers))
//				{
//					var @methodHandler = @methodHandlers[0];
//					@methodHandler.IncrementCallCount();
//					var @result = @methodHandler.Method is not null ?
//						((global::System.Func<string>)@methodHandler.Method)() :
//						((global::Rocks.HandlerInformation<string>)@methodHandler).ReturnValue;
//					return @result!;
//				}
//				else
//				{
//					return base.GetExecutableExtension();
//				}
//			}

//			[global::Rocks.MemberIdentifier(6, "string GetProjectFilePath(string @buildArtifactsDirectoryPath)")]
//			protected override string GetProjectFilePath(string @buildArtifactsDirectoryPath)
//			{
//				if (this.handlers.TryGetValue(6, out var @methodHandlers))
//				{
//					foreach (var @methodHandler in @methodHandlers)
//					{
//						if (((global::Rocks.Argument<string>)@methodHandler.Expectations[0]).IsValid(@buildArtifactsDirectoryPath!))
//						{
//							@methodHandler.IncrementCallCount();
//							var @result = @methodHandler.Method is not null ?
//								((global::System.Func<string, string>)@methodHandler.Method)(@buildArtifactsDirectoryPath!) :
//								((global::Rocks.HandlerInformation<string>)@methodHandler).ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for string GetProjectFilePath(string @buildArtifactsDirectoryPath)");
//				}
//				else
//				{
//					return base.GetProjectFilePath(buildArtifactsDirectoryPath: @buildArtifactsDirectoryPath!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(8, "void CopyAllRequiredFiles(global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)")]
//			protected override void CopyAllRequiredFiles(global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)
//			{
//				if (this.handlers.TryGetValue(8, out var @methodHandlers))
//				{
//					var @foundMatch = false;

//					foreach (var @methodHandler in @methodHandlers)
//					{
//						if (((global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths>)@methodHandler.Expectations[0]).IsValid(@artifactsPaths!))
//						{
//							@foundMatch = true;

//							@methodHandler.IncrementCallCount();
//							if (@methodHandler.Method is not null)
//							{
//								((global::System.Action<global::BenchmarkDotNet.Toolchains.ArtifactsPaths>)@methodHandler.Method)(@artifactsPaths!);
//							}
//							break;
//						}
//					}

//					if (!@foundMatch)
//					{
//						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void CopyAllRequiredFiles(global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)");
//					}
//				}
//				else
//				{
//					base.CopyAllRequiredFiles(artifactsPaths: @artifactsPaths!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(9, "void GenerateNuGetConfig(global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)")]
//			protected override void GenerateNuGetConfig(global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)
//			{
//				if (this.handlers.TryGetValue(9, out var @methodHandlers))
//				{
//					var @foundMatch = false;

//					foreach (var @methodHandler in @methodHandlers)
//					{
//						if (((global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths>)@methodHandler.Expectations[0]).IsValid(@artifactsPaths!))
//						{
//							@foundMatch = true;

//							@methodHandler.IncrementCallCount();
//							if (@methodHandler.Method is not null)
//							{
//								((global::System.Action<global::BenchmarkDotNet.Toolchains.ArtifactsPaths>)@methodHandler.Method)(@artifactsPaths!);
//							}
//							break;
//						}
//					}

//					if (!@foundMatch)
//					{
//						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void GenerateNuGetConfig(global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)");
//					}
//				}
//				else
//				{
//					base.GenerateNuGetConfig(artifactsPaths: @artifactsPaths!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(10, "void GenerateProject(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths, global::BenchmarkDotNet.Loggers.ILogger @logger)")]
//			protected override void GenerateProject(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths, global::BenchmarkDotNet.Loggers.ILogger @logger)
//			{
//				if (this.handlers.TryGetValue(10, out var @methodHandlers))
//				{
//					var @foundMatch = false;

//					foreach (var @methodHandler in @methodHandlers)
//					{
//						if (((global::Rocks.Argument<global::BenchmarkDotNet.Running.BuildPartition>)@methodHandler.Expectations[0]).IsValid(@buildPartition!) &&
//							((global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths>)@methodHandler.Expectations[1]).IsValid(@artifactsPaths!) &&
//							((global::Rocks.Argument<global::BenchmarkDotNet.Loggers.ILogger>)@methodHandler.Expectations[2]).IsValid(@logger!))
//						{
//							@foundMatch = true;

//							@methodHandler.IncrementCallCount();
//							if (@methodHandler.Method is not null)
//							{
//								((global::System.Action<global::BenchmarkDotNet.Running.BuildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths, global::BenchmarkDotNet.Loggers.ILogger>)@methodHandler.Method)(@buildPartition!, @artifactsPaths!, @logger!);
//							}
//							break;
//						}
//					}

//					if (!@foundMatch)
//					{
//						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void GenerateProject(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths, global::BenchmarkDotNet.Loggers.ILogger @logger)");
//					}
//				}
//				else
//				{
//					base.GenerateProject(buildPartition: @buildPartition!, artifactsPaths: @artifactsPaths!, logger: @logger!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(12, "string GetPackagesDirectoryPath(string @buildArtifactsDirectoryPath)")]
//			protected override string GetPackagesDirectoryPath(string @buildArtifactsDirectoryPath)
//			{
//				if (this.handlers.TryGetValue(12, out var @methodHandlers))
//				{
//					foreach (var @methodHandler in @methodHandlers)
//					{
//						if (((global::Rocks.Argument<string>)@methodHandler.Expectations[0]).IsValid(@buildArtifactsDirectoryPath!))
//						{
//							@methodHandler.IncrementCallCount();
//							var @result = @methodHandler.Method is not null ?
//								((global::System.Func<string, string>)@methodHandler.Method)(@buildArtifactsDirectoryPath!) :
//								((global::Rocks.HandlerInformation<string>)@methodHandler).ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for string GetPackagesDirectoryPath(string @buildArtifactsDirectoryPath)");
//				}
//				else
//				{
//					return base.GetPackagesDirectoryPath(buildArtifactsDirectoryPath: @buildArtifactsDirectoryPath!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(13, "void GenerateAppConfig(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)")]
//			protected override void GenerateAppConfig(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)
//			{
//				if (this.handlers.TryGetValue(13, out var @methodHandlers))
//				{
//					var @foundMatch = false;

//					foreach (var @methodHandler in @methodHandlers)
//					{
//						if (((global::Rocks.Argument<global::BenchmarkDotNet.Running.BuildPartition>)@methodHandler.Expectations[0]).IsValid(@buildPartition!) &&
//							((global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths>)@methodHandler.Expectations[1]).IsValid(@artifactsPaths!))
//						{
//							@foundMatch = true;

//							@methodHandler.IncrementCallCount();
//							if (@methodHandler.Method is not null)
//							{
//								((global::System.Action<global::BenchmarkDotNet.Running.BuildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths>)@methodHandler.Method)(@buildPartition!, @artifactsPaths!);
//							}
//							break;
//						}
//					}

//					if (!@foundMatch)
//					{
//						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void GenerateAppConfig(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)");
//					}
//				}
//				else
//				{
//					base.GenerateAppConfig(buildPartition: @buildPartition!, artifactsPaths: @artifactsPaths!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(14, "void GenerateCode(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)")]
//			protected override void GenerateCode(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)
//			{
//				if (this.handlers.TryGetValue(14, out var @methodHandlers))
//				{
//					var @foundMatch = false;

//					foreach (var @methodHandler in @methodHandlers)
//					{
//						if (((global::Rocks.Argument<global::BenchmarkDotNet.Running.BuildPartition>)@methodHandler.Expectations[0]).IsValid(@buildPartition!) &&
//							((global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths>)@methodHandler.Expectations[1]).IsValid(@artifactsPaths!))
//						{
//							@foundMatch = true;

//							@methodHandler.IncrementCallCount();
//							if (@methodHandler.Method is not null)
//							{
//								((global::System.Action<global::BenchmarkDotNet.Running.BuildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths>)@methodHandler.Method)(@buildPartition!, @artifactsPaths!);
//							}
//							break;
//						}
//					}

//					if (!@foundMatch)
//					{
//						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void GenerateCode(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)");
//					}
//				}
//				else
//				{
//					base.GenerateCode(buildPartition: @buildPartition!, artifactsPaths: @artifactsPaths!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(15, "string GetExecutablePath(string @binariesDirectoryPath, string @programName)")]
//			protected override string GetExecutablePath(string @binariesDirectoryPath, string @programName)
//			{
//				if (this.handlers.TryGetValue(15, out var @methodHandlers))
//				{
//					foreach (var @methodHandler in @methodHandlers)
//					{
//						if (((global::Rocks.Argument<string>)@methodHandler.Expectations[0]).IsValid(@binariesDirectoryPath!) &&
//							((global::Rocks.Argument<string>)@methodHandler.Expectations[1]).IsValid(@programName!))
//						{
//							@methodHandler.IncrementCallCount();
//							var @result = @methodHandler.Method is not null ?
//								((global::System.Func<string, string, string>)@methodHandler.Method)(@binariesDirectoryPath!, @programName!) :
//								((global::Rocks.HandlerInformation<string>)@methodHandler).ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for string GetExecutablePath(string @binariesDirectoryPath, string @programName)");
//				}
//				else
//				{
//					return base.GetExecutablePath(binariesDirectoryPath: @binariesDirectoryPath!, programName: @programName!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(16, "string GetBuildArtifactsDirectoryPath(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, string @programName)")]
//			protected override string GetBuildArtifactsDirectoryPath(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, string @programName)
//			{
//				if (this.handlers.TryGetValue(16, out var @methodHandlers))
//				{
//					foreach (var @methodHandler in @methodHandlers)
//					{
//						if (((global::Rocks.Argument<global::BenchmarkDotNet.Running.BuildPartition>)@methodHandler.Expectations[0]).IsValid(@buildPartition!) &&
//							((global::Rocks.Argument<string>)@methodHandler.Expectations[1]).IsValid(@programName!))
//						{
//							@methodHandler.IncrementCallCount();
//							var @result = @methodHandler.Method is not null ?
//								((global::System.Func<global::BenchmarkDotNet.Running.BuildPartition, string, string>)@methodHandler.Method)(@buildPartition!, @programName!) :
//								((global::Rocks.HandlerInformation<string>)@methodHandler).ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for string GetBuildArtifactsDirectoryPath(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, string @programName)");
//				}
//				else
//				{
//					return base.GetBuildArtifactsDirectoryPath(assemblyLocation: @buildPartition!, programName: @programName!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(17, "string[] GetArtifactsToCleanup(global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)")]
//			protected override string[] GetArtifactsToCleanup(global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)
//			{
//				if (this.handlers.TryGetValue(17, out var @methodHandlers))
//				{
//					foreach (var @methodHandler in @methodHandlers)
//					{
//						if (((global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths>)@methodHandler.Expectations[0]).IsValid(@artifactsPaths!))
//						{
//							@methodHandler.IncrementCallCount();
//							var @result = @methodHandler.Method is not null ?
//								((global::System.Func<global::BenchmarkDotNet.Toolchains.ArtifactsPaths, string[]>)@methodHandler.Method)(@artifactsPaths!) :
//								((global::Rocks.HandlerInformation<string[]>)@methodHandler).ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for string[] GetArtifactsToCleanup(global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)");
//				}
//				else
//				{
//					return base.GetArtifactsToCleanup(artifactsPaths: @artifactsPaths!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(18, "void GenerateBuildScript(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)")]
//			protected override void GenerateBuildScript(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)
//			{
//				if (this.handlers.TryGetValue(18, out var @methodHandlers))
//				{
//					var @foundMatch = false;

//					foreach (var @methodHandler in @methodHandlers)
//					{
//						if (((global::Rocks.Argument<global::BenchmarkDotNet.Running.BuildPartition>)@methodHandler.Expectations[0]).IsValid(@buildPartition!) &&
//							((global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths>)@methodHandler.Expectations[1]).IsValid(@artifactsPaths!))
//						{
//							@foundMatch = true;

//							@methodHandler.IncrementCallCount();
//							if (@methodHandler.Method is not null)
//							{
//								((global::System.Action<global::BenchmarkDotNet.Running.BuildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths>)@methodHandler.Method)(@buildPartition!, @artifactsPaths!);
//							}
//							break;
//						}
//					}

//					if (!@foundMatch)
//					{
//						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void GenerateBuildScript(global::BenchmarkDotNet.Running.BuildPartition @buildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths @artifactsPaths)");
//					}
//				}
//				else
//				{
//					base.GenerateBuildScript(buildPartition: @buildPartition!, artifactsPaths: @artifactsPaths!);
//				}
//			}

//		}
//	}

//	internal static class MethodExpectationsOfGeneratorExtensions
//	{
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<string?>, string?> ToString(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self) =>
//			new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<string?>, string?>(@self.Add<string?>(0, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<object?, bool>, bool> Equals(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self, global::Rocks.Argument<object?> @obj)
//		{
//			global::System.ArgumentNullException.ThrowIfNull(@obj);
//			return new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<object?, bool>, bool>(@self.Add<bool>(1, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @obj }));
//		}
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<int>, int> GetHashCode(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self) =>
//			new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<int>, int>(@self.Add<int>(2, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<string, string, string>, string> GetBinariesDirectoryPath(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self, global::Rocks.Argument<string> @buildArtifactsDirectoryPath, global::Rocks.Argument<string> @configuration)
//		{
//			global::System.ArgumentNullException.ThrowIfNull(@buildArtifactsDirectoryPath);
//			global::System.ArgumentNullException.ThrowIfNull(@configuration);
//			return new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<string, string, string>, string>(@self.Add<string>(4, new global::System.Collections.Generic.List<global::Rocks.Argument>(2) { @buildArtifactsDirectoryPath, @configuration }));
//		}
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<string>, string> GetExecutableExtension(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self) =>
//			new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<string>, string>(@self.Add<string>(5, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<string, string>, string> GetProjectFilePath(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self, global::Rocks.Argument<string> @buildArtifactsDirectoryPath)
//		{
//			global::System.ArgumentNullException.ThrowIfNull(@buildArtifactsDirectoryPath);
//			return new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<string, string>, string>(@self.Add<string>(6, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @buildArtifactsDirectoryPath }));
//		}
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Action<global::BenchmarkDotNet.Toolchains.ArtifactsPaths>> CopyAllRequiredFiles(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self, global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths> @artifactsPaths)
//		{
//			global::System.ArgumentNullException.ThrowIfNull(@artifactsPaths);
//			return new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Action<global::BenchmarkDotNet.Toolchains.ArtifactsPaths>>(@self.Add(8, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @artifactsPaths }));
//		}
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Action<global::BenchmarkDotNet.Toolchains.ArtifactsPaths>> GenerateNuGetConfig(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self, global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths> @artifactsPaths)
//		{
//			global::System.ArgumentNullException.ThrowIfNull(@artifactsPaths);
//			return new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Action<global::BenchmarkDotNet.Toolchains.ArtifactsPaths>>(@self.Add(9, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @artifactsPaths }));
//		}
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Action<global::BenchmarkDotNet.Running.BuildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths, global::BenchmarkDotNet.Loggers.ILogger>> GenerateProject(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self, global::Rocks.Argument<global::BenchmarkDotNet.Running.BuildPartition> @buildPartition, global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths> @artifactsPaths, global::Rocks.Argument<global::BenchmarkDotNet.Loggers.ILogger> @logger)
//		{
//			global::System.ArgumentNullException.ThrowIfNull(@buildPartition);
//			global::System.ArgumentNullException.ThrowIfNull(@artifactsPaths);
//			global::System.ArgumentNullException.ThrowIfNull(@logger);
//			return new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Action<global::BenchmarkDotNet.Running.BuildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths, global::BenchmarkDotNet.Loggers.ILogger>>(@self.Add(10, new global::System.Collections.Generic.List<global::Rocks.Argument>(3) { @buildPartition, @artifactsPaths, @logger }));
//		}
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<string, string>, string> GetPackagesDirectoryPath(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self, global::Rocks.Argument<string> @buildArtifactsDirectoryPath)
//		{
//			global::System.ArgumentNullException.ThrowIfNull(@buildArtifactsDirectoryPath);
//			return new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<string, string>, string>(@self.Add<string>(12, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @buildArtifactsDirectoryPath }));
//		}
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Action<global::BenchmarkDotNet.Running.BuildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths>> GenerateAppConfig(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self, global::Rocks.Argument<global::BenchmarkDotNet.Running.BuildPartition> @buildPartition, global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths> @artifactsPaths)
//		{
//			global::System.ArgumentNullException.ThrowIfNull(@buildPartition);
//			global::System.ArgumentNullException.ThrowIfNull(@artifactsPaths);
//			return new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Action<global::BenchmarkDotNet.Running.BuildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths>>(@self.Add(13, new global::System.Collections.Generic.List<global::Rocks.Argument>(2) { @buildPartition, @artifactsPaths }));
//		}
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Action<global::BenchmarkDotNet.Running.BuildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths>> GenerateCode(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self, global::Rocks.Argument<global::BenchmarkDotNet.Running.BuildPartition> @buildPartition, global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths> @artifactsPaths)
//		{
//			global::System.ArgumentNullException.ThrowIfNull(@buildPartition);
//			global::System.ArgumentNullException.ThrowIfNull(@artifactsPaths);
//			return new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Action<global::BenchmarkDotNet.Running.BuildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths>>(@self.Add(14, new global::System.Collections.Generic.List<global::Rocks.Argument>(2) { @buildPartition, @artifactsPaths }));
//		}
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<string, string, string>, string> GetExecutablePath(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self, global::Rocks.Argument<string> @binariesDirectoryPath, global::Rocks.Argument<string> @programName)
//		{
//			global::System.ArgumentNullException.ThrowIfNull(@binariesDirectoryPath);
//			global::System.ArgumentNullException.ThrowIfNull(@programName);
//			return new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<string, string, string>, string>(@self.Add<string>(15, new global::System.Collections.Generic.List<global::Rocks.Argument>(2) { @binariesDirectoryPath, @programName }));
//		}
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<global::BenchmarkDotNet.Running.BuildPartition, string, string>, string> GetBuildArtifactsDirectoryPath(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self, global::Rocks.Argument<global::BenchmarkDotNet.Running.BuildPartition> @buildPartition, global::Rocks.Argument<string> @programName)
//		{
//			global::System.ArgumentNullException.ThrowIfNull(@buildPartition);
//			global::System.ArgumentNullException.ThrowIfNull(@programName);
//			return new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<global::BenchmarkDotNet.Running.BuildPartition, string, string>, string>(@self.Add<string>(16, new global::System.Collections.Generic.List<global::Rocks.Argument>(2) { @buildPartition, @programName }));
//		}
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<global::BenchmarkDotNet.Toolchains.ArtifactsPaths, string[]>, string[]> GetArtifactsToCleanup(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self, global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths> @artifactsPaths)
//		{
//			global::System.ArgumentNullException.ThrowIfNull(@artifactsPaths);
//			return new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Func<global::BenchmarkDotNet.Toolchains.ArtifactsPaths, string[]>, string[]>(@self.Add<string[]>(17, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @artifactsPaths }));
//		}
//		internal static global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Action<global::BenchmarkDotNet.Running.BuildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths>> GenerateBuildScript(this global::Rocks.Expectations.MethodExpectations<global::BenchmarkDotNet.Toolchains.Roslyn.Generator> @self, global::Rocks.Argument<global::BenchmarkDotNet.Running.BuildPartition> @buildPartition, global::Rocks.Argument<global::BenchmarkDotNet.Toolchains.ArtifactsPaths> @artifactsPaths)
//		{
//			global::System.ArgumentNullException.ThrowIfNull(@buildPartition);
//			global::System.ArgumentNullException.ThrowIfNull(@artifactsPaths);
//			return new global::Rocks.MethodAdornments<global::BenchmarkDotNet.Toolchains.Roslyn.Generator, global::System.Action<global::BenchmarkDotNet.Running.BuildPartition, global::BenchmarkDotNet.Toolchains.ArtifactsPaths>>(@self.Add(18, new global::System.Collections.Generic.List<global::Rocks.Argument>(2) { @buildPartition, @artifactsPaths }));
//		}
//	}
//}