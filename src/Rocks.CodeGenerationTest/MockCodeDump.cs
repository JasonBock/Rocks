//// <auto-generated/>

//#nullable enable

//using Microsoft.EntityFrameworkCore.Infrastructure;

//namespace Microsoft.EntityFrameworkCore.Metadata
//{
//	internal sealed class IMutableTriggerCreateExpectations
//		: global::Rocks.Expectations
//	{
//#pragma warning disable CS8618

//		internal sealed class Handler0
//			: global::Rocks.Handler<global::System.Func<global::Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions, int, string>, string>
//		{
//			public global::Rocks.Argument<global::Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions> @options { get; set; }
//			public global::Rocks.Argument<int> @indent { get; set; }
//		}

//		internal sealed class Handler1
//			: global::Rocks.Handler<global::System.Func<string, object?, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>
//		{
//			public global::Rocks.Argument<string> @name { get; set; }
//			public global::Rocks.Argument<object?> @value { get; set; }
//		}

//		internal sealed class Handler2
//			: global::Rocks.Handler<global::System.Action<string, object?>>
//		{
//			public global::Rocks.Argument<string> @name { get; set; }
//			public global::Rocks.Argument<object?> @value { get; set; }
//		}

//		internal sealed class Handler3
//			: global::Rocks.Handler<global::System.Func<string, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation?>, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation?>
//		{
//			public global::Rocks.Argument<string> @name { get; set; }
//		}

//		internal sealed class Handler4
//			: global::Rocks.Handler<global::System.Action<global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>>>
//		{
//			public global::Rocks.Argument<global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>> @annotations { get; set; }
//		}

//		internal sealed class Handler5
//			: global::Rocks.Handler<global::System.Action<string, object?>>
//		{
//			public global::Rocks.Argument<string> @name { get; set; }
//			public global::Rocks.Argument<object?> @value { get; set; }
//		}

//		internal sealed class Handler6
//			: global::Rocks.Handler<global::System.Func<string, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation?>, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation?>
//		{
//			public global::Rocks.Argument<string> @name { get; set; }
//		}

//		internal sealed class Handler7
//			: global::Rocks.Handler<global::System.Func<global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>>, global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>>
//		{ }

//		internal sealed class Handler8
//			: global::Rocks.Handler<global::System.Func<string, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>
//		{
//			public global::Rocks.Argument<string> @annotationName { get; set; }
//		}

//		internal sealed class Handler9
//			: global::Rocks.Handler<global::System.Func<int, string>, string>
//		{
//			public global::Rocks.Argument<int> @indent { get; set; }
//		}

//		internal sealed class Handler10
//			: global::Rocks.Handler<global::System.Func<global::Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType>, global::Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType>
//		{ }

//		internal sealed class Handler11
//			: global::Rocks.Handler<global::System.Func<string>, string>
//		{ }

//		internal sealed class Handler12
//			: global::Rocks.Handler<global::System.Func<global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType>, global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType>
//		{ }

//		internal sealed class Handler13
//			: global::Rocks.Handler<global::System.Func<string, object?>, object?>
//		{
//			public global::Rocks.Argument<string> @name { get; set; }
//		}

//		internal sealed class Handler14
//			: global::Rocks.Handler<global::System.Action<string, object?>>
//		{
//			public global::Rocks.Argument<string> @name { get; set; }
//			public global::Rocks.Argument<object?> @value { get; set; }
//		}

//		internal sealed class Handler15
//			: global::Rocks.Handler<global::System.Func<string, object?>, object?>
//		{
//			public global::Rocks.Argument<string> @name { get; set; }
//		}

//#pragma warning restore CS8618

//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler0>? @handlers0;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler1>? @handlers1;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler2>? @handlers2;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler3>? @handlers3;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler4>? @handlers4;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler5>? @handlers5;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler6>? @handlers6;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler7>? @handlers7;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler8>? @handlers8;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler9>? @handlers9;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler10>? @handlers10;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler11>? @handlers11;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler12>? @handlers12;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler13>? @handlers13;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler14>? @handlers14;
//		private global::System.Collections.Generic.List<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler15>? @handlers15;

//		public override void Verify()
//		{
//			if (this.WasInstanceInvoked)
//			{
//				var failures = new global::System.Collections.Generic.List<string>();

//				if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
//				if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
//				if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2, 2)); }
//				if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3, 3)); }
//				if (this.handlers4?.Count > 0) { failures.AddRange(this.Verify(this.handlers4, 4)); }
//				if (this.handlers5?.Count > 0) { failures.AddRange(this.Verify(this.handlers5, 5)); }
//				if (this.handlers6?.Count > 0) { failures.AddRange(this.Verify(this.handlers6, 6)); }
//				if (this.handlers7?.Count > 0) { failures.AddRange(this.Verify(this.handlers7, 7)); }
//				if (this.handlers8?.Count > 0) { failures.AddRange(this.Verify(this.handlers8, 8)); }
//				if (this.handlers9?.Count > 0) { failures.AddRange(this.Verify(this.handlers9, 9)); }
//				if (this.handlers10?.Count > 0) { failures.AddRange(this.Verify(this.handlers10, 10)); }
//				if (this.handlers11?.Count > 0) { failures.AddRange(this.Verify(this.handlers11, 11)); }
//				if (this.handlers12?.Count > 0) { failures.AddRange(this.Verify(this.handlers12, 12)); }
//				if (this.handlers13?.Count > 0) { failures.AddRange(this.Verify(this.handlers13, 13)); }
//				if (this.handlers14?.Count > 0) { failures.AddRange(this.Verify(this.handlers14, 14)); }
//				if (this.handlers15?.Count > 0) { failures.AddRange(this.Verify(this.handlers15, 15)); }

//				if (failures.Count > 0)
//				{
//					throw new global::Rocks.Exceptions.VerificationException(failures);
//				}
//			}
//		}

//		private sealed class Mock
//			: global::Microsoft.EntityFrameworkCore.Metadata.IMutableTrigger
//		{
//			private readonly global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger shimForIReadOnlyTrigger;
//			private readonly global::Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable shimForIMutableAnnotatable;
//			private readonly global::Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable shimForIReadOnlyAnnotatable;
//			public Mock(global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations @expectations)
//			{
//				(this.Expectations, this.shimForIReadOnlyTrigger, this.shimForIMutableAnnotatable, this.shimForIReadOnlyAnnotatable) = (@expectations, new ShimIReadOnlyTrigger(this), new ShimIMutableAnnotatable(this), new ShimIReadOnlyAnnotatable(this));
//			}

//			[global::Rocks.MemberIdentifier(0, "string ToDebugString(global::Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions @options, int @indent)")]
//			public string ToDebugString(global::Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions @options = (global::Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions)(0), int @indent = 0)
//			{
//				if (this.Expectations.handlers0?.Count > 0)
//				{
//					foreach (var @handler in this.Expectations.handlers0)
//					{
//						if (@handler.@options.IsValid(@options!) &&
//							@handler.@indent.IsValid(@indent!))
//						{
//							@handler.CallCount++;
//							var @result = @handler.Callback is not null ?
//								@handler.Callback(@options!, @indent!) : @handler.ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for string ToDebugString(global::Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions @options = (global::Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions)(0), int @indent = 0)");
//				}
//				else
//				{
//					return this.shimForIReadOnlyTrigger.ToDebugString(options: @options!, indent: @indent!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(1, "global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation AddAnnotation(string @name, object? @value)")]
//			public global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation AddAnnotation(string @name, object? @value)
//			{
//				if (this.Expectations.handlers1?.Count > 0)
//				{
//					foreach (var @handler in this.Expectations.handlers1)
//					{
//						if (@handler.@name.IsValid(@name!) &&
//							@handler.@value.IsValid(@value!))
//						{
//							@handler.CallCount++;
//							var @result = @handler.Callback is not null ?
//								@handler.Callback(@name!, @value!) : @handler.ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation AddAnnotation(string @name, object? @value)");
//				}

//				throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation AddAnnotation(string @name, object? @value)");
//			}

//			[global::Rocks.MemberIdentifier(2, "void SetAnnotation(string @name, object? @value)")]
//			public void SetAnnotation(string @name, object? @value)
//			{
//				if (this.Expectations.handlers2?.Count > 0)
//				{
//					var @foundMatch = false;

//					foreach (var @handler in this.Expectations.handlers2)
//					{
//						if (@handler.@name.IsValid(@name!) &&
//							@handler.@value.IsValid(@value!))
//						{
//							@foundMatch = true;
//							@handler.CallCount++;
//							@handler.Callback?.Invoke(@name!, @value!);
//							break;
//						}
//					}

//					if (!@foundMatch)
//					{
//						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void SetAnnotation(string @name, object? @value)");
//					}
//				}
//				else
//				{
//					throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void SetAnnotation(string @name, object? @value)");
//				}
//			}

//			[global::Rocks.MemberIdentifier(3, "global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation? RemoveAnnotation(string @name)")]
//			public global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation? RemoveAnnotation(string @name)
//			{
//				if (this.Expectations.handlers3?.Count > 0)
//				{
//					foreach (var @handler in this.Expectations.handlers3)
//					{
//						if (@handler.@name.IsValid(@name!))
//						{
//							@handler.CallCount++;
//							var @result = @handler.Callback is not null ?
//								@handler.Callback(@name!) : @handler.ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation? RemoveAnnotation(string @name)");
//				}

//				throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation? RemoveAnnotation(string @name)");
//			}

//			[global::Rocks.MemberIdentifier(4, "void AddAnnotations(global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation> @annotations)")]
//			public void AddAnnotations(global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation> @annotations)
//			{
//				if (this.Expectations.handlers4?.Count > 0)
//				{
//					var @foundMatch = false;

//					foreach (var @handler in this.Expectations.handlers4)
//					{
//						if (@handler.@annotations.IsValid(@annotations!))
//						{
//							@foundMatch = true;
//							@handler.CallCount++;
//							@handler.Callback?.Invoke(@annotations!);
//							break;
//						}
//					}

//					if (!@foundMatch)
//					{
//						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void AddAnnotations(global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation> @annotations)");
//					}
//				}
//				else
//				{
//					this.shimForIMutableAnnotatable.AddAnnotations(annotations: @annotations!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(5, "void SetOrRemoveAnnotation(string @name, object? @value)")]
//			public void SetOrRemoveAnnotation(string @name, object? @value)
//			{
//				if (this.Expectations.handlers5?.Count > 0)
//				{
//					var @foundMatch = false;

//					foreach (var @handler in this.Expectations.handlers5)
//					{
//						if (@handler.@name.IsValid(@name!) &&
//							@handler.@value.IsValid(@value!))
//						{
//							@foundMatch = true;
//							@handler.CallCount++;
//							@handler.Callback?.Invoke(@name!, @value!);
//							break;
//						}
//					}

//					if (!@foundMatch)
//					{
//						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void SetOrRemoveAnnotation(string @name, object? @value)");
//					}
//				}
//				else
//				{
//					throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void SetOrRemoveAnnotation(string @name, object? @value)");
//				}
//			}

//			[global::Rocks.MemberIdentifier(6, "global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation? FindAnnotation(string @name)")]
//			public global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation? FindAnnotation(string @name)
//			{
//				if (this.Expectations.handlers6?.Count > 0)
//				{
//					foreach (var @handler in this.Expectations.handlers6)
//					{
//						if (@handler.@name.IsValid(@name!))
//						{
//							@handler.CallCount++;
//							var @result = @handler.Callback is not null ?
//								@handler.Callback(@name!) : @handler.ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation? FindAnnotation(string @name)");
//				}

//				throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation? FindAnnotation(string @name)");
//			}

//			[global::Rocks.MemberIdentifier(7, "global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation> GetAnnotations()")]
//			public global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation> GetAnnotations()
//			{
//				if (this.Expectations.handlers7?.Count > 0)
//				{
//					var @handler = this.Expectations.handlers7[0];
//					@handler.CallCount++;
//					var @result = @handler.Callback is not null ?
//						@handler.Callback() : @handler.ReturnValue;
//					return @result!;
//				}

//				throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation> GetAnnotations()");
//			}

//			[global::Rocks.MemberIdentifier(8, "global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation GetAnnotation(string @annotationName)")]
//			public global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation GetAnnotation(string @annotationName)
//			{
//				if (this.Expectations.handlers8?.Count > 0)
//				{
//					foreach (var @handler in this.Expectations.handlers8)
//					{
//						if (@handler.@annotationName.IsValid(@annotationName!))
//						{
//							@handler.CallCount++;
//							var @result = @handler.Callback is not null ?
//								@handler.Callback(@annotationName!) : @handler.ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation GetAnnotation(string @annotationName)");
//				}
//				else
//				{
//					return this.shimForIReadOnlyAnnotatable.GetAnnotation(annotationName: @annotationName!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(9, "string AnnotationsToDebugString(int @indent)")]
//			public string AnnotationsToDebugString(int @indent = 0)
//			{
//				if (this.Expectations.handlers9?.Count > 0)
//				{
//					foreach (var @handler in this.Expectations.handlers9)
//					{
//						if (@handler.@indent.IsValid(@indent!))
//						{
//							@handler.CallCount++;
//							var @result = @handler.Callback is not null ?
//								@handler.Callback(@indent!) : @handler.ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for string AnnotationsToDebugString(int @indent = 0)");
//				}
//				else
//				{
//					return this.shimForIReadOnlyAnnotatable.AnnotationsToDebugString(indent: @indent!);
//				}
//			}

//			[global::Rocks.MemberIdentifier(10, "get_EntityType()")]
//			public global::Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType EntityType
//			{
//				get
//				{
//					if (this.Expectations.handlers10?.Count > 0)
//					{
//						var @handler = this.Expectations.handlers10[0];
//						@handler.CallCount++;
//						var @result = @handler.Callback is not null ?
//							@handler.Callback() : @handler.ReturnValue;
//						return @result!;
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for get_EntityType())");
//				}
//			}
//			[global::Rocks.MemberIdentifier(11, "get_ModelName()")]
//			public string ModelName
//			{
//				get
//				{
//					if (this.Expectations.handlers11?.Count > 0)
//					{
//						var @handler = this.Expectations.handlers11[0];
//						@handler.CallCount++;
//						var @result = @handler.Callback is not null ?
//							@handler.Callback() : @handler.ReturnValue;
//						return @result!;
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for get_ModelName())");
//				}
//			}
//			[global::Rocks.MemberIdentifier(12, "global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger.get_EntityType()")]
//			global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger.EntityType
//			{
//				get
//				{
//					if (this.Expectations.handlers12?.Count > 0)
//					{
//						var @handler = this.Expectations.handlers12[0];
//						@handler.CallCount++;
//						var @result = @handler.Callback is not null ?
//							@handler.Callback() : @handler.ReturnValue;
//						return @result!;
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger.get_EntityType())");
//				}
//			}

//			[global::Rocks.MemberIdentifier(13, "global::Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.this[string @name]")]
//			[global::Rocks.MemberIdentifier(14, "global::Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.this[string @name]")]
//			object? global::Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.this[string @name]
//			{
//				get
//				{
//					if (this.Expectations.handlers13?.Count > 0)
//					{
//						foreach (var @handler in this.Expectations.handlers13)
//						{
//							if (@handler.@name.IsValid(@name!))
//							{
//								@handler.CallCount++;
//								var @result = @handler.Callback is not null ?
//									@handler.Callback(@name!) : @handler.ReturnValue;
//								return @result!;
//							}
//						}

//						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[string @name]");
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[string @name])");
//				}
//				set
//				{
//					if (this.Expectations.handlers14?.Count > 0)
//					{
//						foreach (var @handler in this.Expectations.handlers14)
//						{
//							if (@handler.@name.IsValid(@name!) &&
//								@handler.@value.IsValid(@value!))
//							{
//								@handler.CallCount++;
//								@handler.Callback?.Invoke(@name!, @value!);
//								return;
//							}
//						}

//						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[string @name]");
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[string @name])");
//				}
//			}
//			[global::Rocks.MemberIdentifier(15, "global::Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable.this[string @name]")]
//			object? global::Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable.this[string @name]
//			{
//				get
//				{
//					if (this.Expectations.handlers15?.Count > 0)
//					{
//						foreach (var @handler in this.Expectations.handlers15)
//						{
//							if (@handler.@name.IsValid(@name!))
//							{
//								@handler.CallCount++;
//								var @result = @handler.Callback is not null ?
//									@handler.Callback(@name!) : @handler.ReturnValue;
//								return @result!;
//							}
//						}

//						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[string @name]");
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[string @name])");
//				}
//			}


//			private sealed class ShimIReadOnlyTrigger
//				: global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger
//			{
//				private readonly Mock mock;

//				public ShimIReadOnlyTrigger(Mock @mock) =>
//					this.mock = @mock;

//				public global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation? FindAnnotation(string @name) =>
//					((global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger)this.mock).FindAnnotation(@name)!;

//				public global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation> GetAnnotations() =>
//					((global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger)this.mock).GetAnnotations()!;

//				public string ModelName
//				{
//					get => ((global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger)this.mock).ModelName!;
//				}

//				public global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType EntityType
//				{
//					get => ((global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger)this.mock).EntityType!;
//				}

//				public object? this[string @name]
//				{
//					get => ((global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger)this.mock)[@name]!;
//				}
//			}

//			private sealed class ShimIMutableAnnotatable
//				: global::Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable
//			{
//				private readonly Mock mock;

//				public ShimIMutableAnnotatable(Mock @mock) =>
//					this.mock = @mock;

//				public global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation AddAnnotation(string @name, object? @value) =>
//					((global::Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable)this.mock).AddAnnotation(@name, @value)!;

//				public void SetAnnotation(string @name, object? @value) =>
//					((global::Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable)this.mock).SetAnnotation(@name, @value);

//				public global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation? RemoveAnnotation(string @name) =>
//					((global::Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable)this.mock).RemoveAnnotation(@name)!;

//				public void SetOrRemoveAnnotation(string @name, object? @value) =>
//					((global::Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable)this.mock).SetOrRemoveAnnotation(@name, @value);

//				public global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation? FindAnnotation(string @name) =>
//					((global::Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable)this.mock).FindAnnotation(@name)!;

//				public global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation> GetAnnotations() =>
//					((global::Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable)this.mock).GetAnnotations()!;

//				public object? this[string @name]
//				{
//					get => ((global::Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable)this.mock)[@name]!;
//					set => ((global::Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable)this.mock)[@name] = value!;
//				}
//			}

//			private sealed class ShimIReadOnlyAnnotatable
//				: global::Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable
//			{
//				private readonly Mock mock;

//				public ShimIReadOnlyAnnotatable(Mock @mock) =>
//					this.mock = @mock;

//				public global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation? FindAnnotation(string @name) =>
//					((global::Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable)this.mock).FindAnnotation(@name)!;

//				public global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation> GetAnnotations() =>
//					((global::Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable)this.mock).GetAnnotations()!;

//				public object? this[string @name]
//				{
//					get => ((global::Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable)this.mock)[@name]!;
//				}
//			}
//			private global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations Expectations { get; }
//		}

//		internal sealed class MethodExpectations
//		{
//			internal MethodExpectations(global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations expectations) =>
//				this.Expectations = expectations;

//			internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler0, global::System.Func<global::Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions, int, string>, string> ToDebugString(global::Rocks.Argument<global::Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions> @options, global::Rocks.Argument<int> @indent)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@options);
//				global::System.ArgumentNullException.ThrowIfNull(@indent);

//				var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler0
//				{
//					@options = @options.Transform((global::Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions)(0)),
//					@indent = @indent.Transform(0),
//				};

//				if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(); }
//				this.Expectations.handlers0.Add(handler);
//				return new(handler);
//			}
//			internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler0, global::System.Func<global::Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions, int, string>, string> ToDebugString(global::Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions @options = (global::Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions)(0), int @indent = 0) =>
//				this.ToDebugString(global::Rocks.Arg.Is(@options), global::Rocks.Arg.Is(@indent));

//			internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler1, global::System.Func<string, object?, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation> AddAnnotation(global::Rocks.Argument<string> @name, global::Rocks.Argument<object?> @value)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@name);
//				global::System.ArgumentNullException.ThrowIfNull(@value);

//				var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler1
//				{
//					@name = @name,
//					@value = @value,
//				};

//				if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(); }
//				this.Expectations.handlers1.Add(handler);
//				return new(handler);
//			}

//			internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler2, global::System.Action<string, object?>> SetAnnotation(global::Rocks.Argument<string> @name, global::Rocks.Argument<object?> @value)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@name);
//				global::System.ArgumentNullException.ThrowIfNull(@value);

//				var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler2
//				{
//					@name = @name,
//					@value = @value,
//				};

//				if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(); }
//				this.Expectations.handlers2.Add(handler);
//				return new(handler);
//			}

//			internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler3, global::System.Func<string, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation?>, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation?> RemoveAnnotation(global::Rocks.Argument<string> @name)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@name);

//				var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler3
//				{
//					@name = @name,
//				};

//				if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(); }
//				this.Expectations.handlers3.Add(handler);
//				return new(handler);
//			}

//			internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler4, global::System.Action<global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>>> AddAnnotations(global::Rocks.Argument<global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>> @annotations)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@annotations);

//				var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler4
//				{
//					@annotations = @annotations,
//				};

//				if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(); }
//				this.Expectations.handlers4.Add(handler);
//				return new(handler);
//			}

//			internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler5, global::System.Action<string, object?>> SetOrRemoveAnnotation(global::Rocks.Argument<string> @name, global::Rocks.Argument<object?> @value)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@name);
//				global::System.ArgumentNullException.ThrowIfNull(@value);

//				var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler5
//				{
//					@name = @name,
//					@value = @value,
//				};

//				if (this.Expectations.handlers5 is null) { this.Expectations.handlers5 = new(); }
//				this.Expectations.handlers5.Add(handler);
//				return new(handler);
//			}

//			internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler6, global::System.Func<string, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation?>, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation?> FindAnnotation(global::Rocks.Argument<string> @name)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@name);

//				var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler6
//				{
//					@name = @name,
//				};

//				if (this.Expectations.handlers6 is null) { this.Expectations.handlers6 = new(); }
//				this.Expectations.handlers6.Add(handler);
//				return new(handler);
//			}

//			internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler7, global::System.Func<global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>>, global::System.Collections.Generic.IEnumerable<global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>> GetAnnotations()
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				if (this.Expectations.handlers7 is null) { this.Expectations.handlers7 = new(); }
//				var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler7();
//				this.Expectations.handlers7.Add(handler);
//				return new(handler);
//			}

//			internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler8, global::System.Func<string, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation>, global::Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation> GetAnnotation(global::Rocks.Argument<string> @annotationName)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@annotationName);

//				var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler8
//				{
//					@annotationName = @annotationName,
//				};

//				if (this.Expectations.handlers8 is null) { this.Expectations.handlers8 = new(); }
//				this.Expectations.handlers8.Add(handler);
//				return new(handler);
//			}

//			internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler9, global::System.Func<int, string>, string> AnnotationsToDebugString(global::Rocks.Argument<int> @indent)
//			{
//				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//				global::System.ArgumentNullException.ThrowIfNull(@indent);

//				var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler9
//				{
//					@indent = @indent.Transform(0),
//				};

//				if (this.Expectations.handlers9 is null) { this.Expectations.handlers9 = new(); }
//				this.Expectations.handlers9.Add(handler);
//				return new(handler);
//			}
//			internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler9, global::System.Func<int, string>, string> AnnotationsToDebugString(int @indent = 0) =>
//				this.AnnotationsToDebugString(global::Rocks.Arg.Is(@indent));

//			private global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations Expectations { get; }
//		}

//		internal sealed class PropertyExpectations
//		{
//			internal sealed class PropertyGetterExpectations
//			{
//				internal PropertyGetterExpectations(global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations expectations) =>
//					this.Expectations = expectations;

//				internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler10, global::System.Func<global::Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType>, global::Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType> EntityType()
//				{
//					global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//					if (this.Expectations.handlers10 is null) { this.Expectations.handlers10 = new(); }
//					var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler10();
//					this.Expectations.handlers10.Add(handler);
//					return new(handler);
//				}
//				internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler11, global::System.Func<string>, string> ModelName()
//				{
//					global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//					if (this.Expectations.handlers11 is null) { this.Expectations.handlers11 = new(); }
//					var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler11();
//					this.Expectations.handlers11.Add(handler);
//					return new(handler);
//				}
//				private global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations Expectations { get; }
//			}


//			internal PropertyExpectations(global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations expectations) =>
//				(this.Getters) = (new(expectations));

//			internal global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
//		}
//		internal sealed class IndexerExpectations
//		{

//			internal IndexerExpectations(global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations expectations) =>
//				() = ();

//		}
//		internal sealed class ExplicitPropertyExpectationsForIReadOnlyTrigger
//		{
//			internal sealed class ExplicitPropertyGetterExpectationsForIReadOnlyTrigger
//			{
//				internal ExplicitPropertyGetterExpectationsForIReadOnlyTrigger(global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations expectations) =>
//					this.Expectations = expectations;

//				internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler12, global::System.Func<global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType>, global::Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType> EntityType()
//				{
//					global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//					if (this.Expectations.handlers12 is null) { this.Expectations.handlers12 = new(); }
//					var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler12();
//					this.Expectations.handlers12.Add(handler);
//					return new(handler);
//				}
//				private global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations Expectations { get; }
//			}

//			internal ExplicitPropertyExpectationsForIReadOnlyTrigger(global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations expectations) =>
//				(this.Getters) = (new(expectations));

//			internal global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.ExplicitPropertyExpectationsForIReadOnlyTrigger.ExplicitPropertyGetterExpectationsForIReadOnlyTrigger Getters { get; }
//		}
//		internal sealed class ExplicitIndexerExpectationsForIMutableAnnotatable
//		{
//			internal sealed class ExplicitIndexerGetterExpectationsForIMutableAnnotatable
//			{
//				internal ExplicitIndexerGetterExpectationsForIMutableAnnotatable(global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations expectations) =>
//					this.Expectations = expectations;

//				internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler13, global::System.Func<string, object?>, object?> This(global::Rocks.Argument<string> @name)
//				{
//					global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//					global::System.ArgumentNullException.ThrowIfNull(@name);

//					var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler13
//					{
//						@name = @name,
//					};

//					if (this.Expectations.handlers13 is null) { this.Expectations.handlers13 = new(); }
//					this.Expectations.handlers13.Add(handler);
//					return new(handler);
//				}
//				private global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations Expectations { get; }
//			}
//			internal sealed class ExplicitIndexerSetterExpectationsForIMutableAnnotatable
//			{
//				internal ExplicitIndexerSetterExpectationsForIMutableAnnotatable(global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations expectations) =>
//					this.Expectations = expectations;

//				internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler14, global::System.Action<string, object?>> This(global::Rocks.Argument<object?> @value, global::Rocks.Argument<string> @name)
//				{
//					global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//					global::System.ArgumentNullException.ThrowIfNull(@name);
//					global::System.ArgumentNullException.ThrowIfNull(@value);

//					var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler14
//					{
//						@name = @name,
//						@value = @value,
//					};

//					if (this.Expectations.handlers14 is null) { this.Expectations.handlers14 = new(); }
//					this.Expectations.handlers14.Add(handler);
//					return new(handler);
//				}
//				private global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations Expectations { get; }
//			}

//			internal ExplicitIndexerExpectationsForIMutableAnnotatable(global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations expectations) =>
//				(this.Getters, this.Setters) = (new(expectations), new(expectations));

//			internal global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.ExplicitIndexerExpectationsForIMutableAnnotatable.ExplicitIndexerGetterExpectationsForIMutableAnnotatable Getters { get; }
//			internal global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.ExplicitIndexerExpectationsForIMutableAnnotatable.ExplicitIndexerSetterExpectationsForIMutableAnnotatable Setters { get; }
//		}
//		internal sealed class ExplicitIndexerExpectationsForIReadOnlyAnnotatable
//		{
//			internal sealed class ExplicitIndexerGetterExpectationsForIReadOnlyAnnotatable
//			{
//				internal ExplicitIndexerGetterExpectationsForIReadOnlyAnnotatable(global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations expectations) =>
//					this.Expectations = expectations;

//				internal global::Rocks.Adornments<global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler15, global::System.Func<string, object?>, object?> This(global::Rocks.Argument<string> @name)
//				{
//					global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
//					global::System.ArgumentNullException.ThrowIfNull(@name);

//					var handler = new global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.Handler15
//					{
//						@name = @name,
//					};

//					if (this.Expectations.handlers15 is null) { this.Expectations.handlers15 = new(); }
//					this.Expectations.handlers15.Add(handler);
//					return new(handler);
//				}
//				private global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations Expectations { get; }
//			}

//			internal ExplicitIndexerExpectationsForIReadOnlyAnnotatable(global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations expectations) =>
//				(this.Getters) = (new(expectations));

//			internal global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.ExplicitIndexerExpectationsForIReadOnlyAnnotatable.ExplicitIndexerGetterExpectationsForIReadOnlyAnnotatable Getters { get; }
//		}

//		internal global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.MethodExpectations Methods { get; }
//		internal global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.PropertyExpectations Properties { get; }
//		internal global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.IndexerExpectations Indexers { get; }
//		internal global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.ExplicitPropertyExpectationsForIReadOnlyTrigger ExplicitPropertiesForIReadOnlyTrigger { get; }
//		internal global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.ExplicitIndexerExpectationsForIMutableAnnotatable ExplicitIndexersForIMutableAnnotatable { get; }
//		internal global::Microsoft.EntityFrameworkCore.Metadata.IMutableTriggerCreateExpectations.ExplicitIndexerExpectationsForIReadOnlyAnnotatable ExplicitIndexersForIReadOnlyAnnotatable { get; }

//		internal IMutableTriggerCreateExpectations() =>
//			(this.Methods, this.Properties, this.Indexers, this.ExplicitPropertiesForIReadOnlyTrigger, this.ExplicitIndexersForIMutableAnnotatable, this.ExplicitIndexersForIReadOnlyAnnotatable) = (new(this), new(this), new(this), new(this), new(this), new(this));

//		internal global::Microsoft.EntityFrameworkCore.Metadata.IMutableTrigger Instance()
//		{
//			if (!this.WasInstanceInvoked)
//			{
//				this.WasInstanceInvoked = true;
//				var @mock = new Mock(this);
//				this.MockType = @mock.GetType();
//				return @mock;
//			}
//			else
//			{
//				throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
//			}
//		}
//	}
//}