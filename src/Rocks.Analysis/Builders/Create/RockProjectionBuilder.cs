using Microsoft.CodeAnalysis.Text;
using Rocks.Analysis.Extensions;
using Rocks.Analysis.Models;
using System.CodeDom.Compiler;
using System.Text;

namespace Rocks.Analysis.Builders.Create;

internal sealed class RockProjectionBuilder
{
	internal RockProjectionBuilder(ITypeReferenceModel projection)
	{
		this.ProjectedType = projection;
		(this.Name, this.Text) = this.Build();
	}

	private (string, SourceText) Build()
	{
		using var writer = new StringWriter();
		using var indentWriter = new IndentedTextWriter(writer, "\t");

		indentWriter.WriteLines(
			"""
			// <auto-generated/>

			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775

			using System;
			using System.ComponentModel;
			
			#nullable enable

			namespace Rocks.Projections;
			
			""");

		ProjectionBuilder.Build(indentWriter, this.ProjectedType);

		indentWriter.WriteLines(
			"""

			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""");

		var text = SourceText.From(writer.ToString(), Encoding.UTF8);
		var name = this.ProjectedType.PointedAtCount > 0 ?
			this.ProjectedType.PointerNames! :
			this.ProjectedType.FullyQualifiedName.GenerateFileName();
		return ($"{name}_Projection.g.cs", text);
	}

	public string Name { get; private set; }
	public SourceText Text { get; private set; }
	private ITypeReferenceModel ProjectedType { get; }
}
