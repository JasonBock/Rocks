using NUnit.Framework;

namespace Rocks.Analysis.Tests.Generators;

public static class ConstructorGeneratorTests
{
	[Test]
	public static async Task GenerateWhenConstructorHasSetsRequiredMembersAsync()
	{
		var code =
			"""
			using Rocks;
			using System.Diagnostics.CodeAnalysis;

			[assembly: Rock(typeof(RequiredConstructor), BuildType.Create | BuildType.Make)]

			#nullable enable

			public class RequiredConstructor
			{
				[SetsRequiredMembers]
				public RequiredConstructor() { }

				public virtual object GetValue() => new();
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class RequiredConstructorCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::RequiredConstructorCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::RequiredConstructorCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::RequiredConstructorCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Func<object>, object>
				{ }
				private global::Rocks.Handlers<global::RequiredConstructorCreateExpectations.Handler3>? @handlers3;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::RequiredConstructor
				{
					[global::System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
					public Mock(global::RequiredConstructorCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(0)}
									obj: {@obj.FormatValue()}
								""");
						}
						else
						{
							return base.Equals(@obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3)]
					public override object GetValue()
					{
						if (this.Expectations.handlers3 is not null)
						{
							var @handler = this.Expectations.handlers3.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetValue();
						}
					}
					
					private global::RequiredConstructorCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::RequiredConstructorCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::RequiredConstructorCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::RequiredConstructorCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::RequiredConstructorCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::RequiredConstructorCreateExpectations.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::RequiredConstructorCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::RequiredConstructorCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal global::RequiredConstructorCreateExpectations.Adornments.AdornmentsForHandler3 GetValue()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::RequiredConstructorCreateExpectations.Handler3();
						if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
						else { this.Expectations.handlers3.Add(handler); }
						return new(handler);
					}
					
					private global::RequiredConstructorCreateExpectations Expectations { get; }
				}
				
				internal global::RequiredConstructorCreateExpectations.MethodExpectations Methods { get; }
				
				public RequiredConstructorCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::RequiredConstructor Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForRequiredConstructor<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForRequiredConstructor<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::RequiredConstructorCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForRequiredConstructor<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::RequiredConstructorCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::RequiredConstructorCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForRequiredConstructor<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::RequiredConstructorCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::RequiredConstructorCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForRequiredConstructor<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::RequiredConstructorCreateExpectations.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3
						: global::Rocks.Adornments<AdornmentsForHandler3, global::RequiredConstructorCreateExpectations.Handler3, global::System.Func<object>, object>, IAdornmentsForRequiredConstructor<AdornmentsForHandler3>
					{
						public AdornmentsForHandler3(global::RequiredConstructorCreateExpectations.Handler3 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";
		
		var makeGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class RequiredConstructorMakeExpectations
			{
				internal global::RequiredConstructor Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::RequiredConstructor
				{
					[global::System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override object GetValue()
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			"""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("RequiredConstructor_Rock_Create.g.cs", createGeneratedCode),
				("RequiredConstructor_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWhenNoAccessibleConstructorsExistAsync()
	{
		var code =
			"""
			using Rocks;

			[assembly: Rock(typeof(Constructable), BuildType.Create | BuildType.Make)]

			#nullable enable

			public class Constructable
			{
				private Constructable() { }

				public virtual object GetValue() => new();			
			}
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[],
			[]);
	}

	[Test]
	public static async Task GenerateWhenOnlyConstructorsIsObsoleteAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(Constructable), BuildType.Create | BuildType.Make)]

			#nullable enable

			public class Constructable
			{
				[Obsolete("Old", true)]
				public Constructable() { }

				public virtual object GetValue() => new();			
			}
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[],
			[]);
	}

	[Test]
	public static async Task GenerateUsingTypeParametersInConstructorsAsync()
	{
		var code =
			"""
			using Rocks;

			[assembly: Rock(typeof(AnyOf<,>), BuildType.Create | BuildType.Make)]

			#nullable enable

			public class AnyOf<T1, T2>
			{
				public AnyOf(T1 value) { }

				public AnyOf(T2 value) { }

				public virtual object GetValue() => new();			
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class AnyOfCreateExpectations<T1, T2>
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::AnyOfCreateExpectations<T1, T2>.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::AnyOfCreateExpectations<T1, T2>.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::AnyOfCreateExpectations<T1, T2>.Handler2>? @handlers2;
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Func<object>, object>
				{ }
				private global::Rocks.Handlers<global::AnyOfCreateExpectations<T1, T2>.Handler3>? @handlers3;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::AnyOf<T1, T2>
				{
					public Mock(global::AnyOfCreateExpectations<T1, T2> @expectations, T1 @value)
						: base(@value)
					{
						this.Expectations = @expectations;
					}
					public Mock(global::AnyOfCreateExpectations<T1, T2> @expectations, T2 @value)
						: base(@value)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(0)}
									obj: {@obj.FormatValue()}
								""");
						}
						else
						{
							return base.Equals(@obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3)]
					public override object GetValue()
					{
						if (this.Expectations.handlers3 is not null)
						{
							var @handler = this.Expectations.handlers3.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetValue();
						}
					}
					
					private global::AnyOfCreateExpectations<T1, T2> Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::AnyOfCreateExpectations<T1, T2> expectations) =>
						this.Expectations = expectations;
					
					internal global::AnyOfCreateExpectations<T1, T2>.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::AnyOfCreateExpectations<T1, T2>.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::AnyOfCreateExpectations<T1, T2>.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::AnyOfCreateExpectations<T1, T2>.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::AnyOfCreateExpectations<T1, T2>.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::AnyOfCreateExpectations<T1, T2>.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal global::AnyOfCreateExpectations<T1, T2>.Adornments.AdornmentsForHandler3 GetValue()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::AnyOfCreateExpectations<T1, T2>.Handler3();
						if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
						else { this.Expectations.handlers3.Add(handler); }
						return new(handler);
					}
					
					private global::AnyOfCreateExpectations<T1, T2> Expectations { get; }
				}
				
				internal global::AnyOfCreateExpectations<T1, T2>.MethodExpectations Methods { get; }
				
				public AnyOfCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::AnyOf<T1, T2> Instance(T1 @value)
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this, @value);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				internal global::AnyOf<T1, T2> Instance(T2 @value)
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this, @value);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForAnyOf<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForAnyOf<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::AnyOfCreateExpectations<T1, T2>.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForAnyOf<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::AnyOfCreateExpectations<T1, T2>.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::AnyOfCreateExpectations<T1, T2>.Handler1, global::System.Func<int>, int>, IAdornmentsForAnyOf<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::AnyOfCreateExpectations<T1, T2>.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::AnyOfCreateExpectations<T1, T2>.Handler2, global::System.Func<string?>, string?>, IAdornmentsForAnyOf<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::AnyOfCreateExpectations<T1, T2>.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3
						: global::Rocks.Adornments<AdornmentsForHandler3, global::AnyOfCreateExpectations<T1, T2>.Handler3, global::System.Func<object>, object>, IAdornmentsForAnyOf<AdornmentsForHandler3>
					{
						public AdornmentsForHandler3(global::AnyOfCreateExpectations<T1, T2>.Handler3 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class AnyOfMakeExpectations<T1, T2>
			{
				internal global::AnyOf<T1, T2> Instance(T1 @value)
				{
					return new Mock(@value);
				}
				internal global::AnyOf<T1, T2> Instance(T2 @value)
				{
					return new Mock(@value);
				}
				
				private sealed class Mock
					: global::AnyOf<T1, T2>
				{
					public Mock(T1 @value)
						: base(@value)
					{
					}
					public Mock(T2 @value)
						: base(@value)
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override object GetValue()
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("AnyOfT1, T2_Rock_Create.g.cs", createGeneratedCode),
				("AnyOfT1, T2_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}
}