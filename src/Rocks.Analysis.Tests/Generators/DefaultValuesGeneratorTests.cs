using NUnit.Framework;

namespace Rocks.Analysis.Tests.Generators;

public static class DefaultValuesGeneratorTests
{
	[Test]
	public static async Task GenerateWhenExplicitImplementationHasDefaultValuesAsync()
	{
		var code =
			"""
			using Rocks.Runtime;
			using System;
			using System.Threading.Tasks;

			[assembly: Rock(typeof(MockTests.IRequest<>), BuildType.Create | BuildType.Make)]

			namespace MockTests
			{
				public struct SomeStruct { }

				public interface IRequest<T>
					where T : class
				{
					Task<T> Send(object values, SomeStruct someStruct = default);
					Task Send(T message, SomeStruct someStruct = default);
				}	
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IRequestCreateExpectations<T>
					: global::Rocks.Runtime.Expectations
					where T : class
				{
					internal sealed class Handler0
						: global::Rocks.Runtime.Handler<global::System.Func<object, global::MockTests.SomeStruct, global::System.Threading.Tasks.Task<T>>, global::System.Threading.Tasks.Task<T>>
					{
						public global::Rocks.Runtime.Argument<object> @values { get; set; }
						public global::Rocks.Runtime.Argument<global::MockTests.SomeStruct> @someStruct { get; set; }
					}
					private global::Rocks.Runtime.Handlers<global::MockTests.IRequestCreateExpectations<T>.Handler0>? @handlers0;
					internal sealed class Handler1
						: global::Rocks.Runtime.Handler<global::System.Func<T, global::MockTests.SomeStruct, global::System.Threading.Tasks.Task>, global::System.Threading.Tasks.Task>
					{
						public global::Rocks.Runtime.Argument<T> @message { get; set; }
						public global::Rocks.Runtime.Argument<global::MockTests.SomeStruct> @someStruct { get; set; }
					}
					private global::Rocks.Runtime.Handlers<global::MockTests.IRequestCreateExpectations<T>.Handler1>? @handlers1;
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
							if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.IRequest<T>
					{
						public Mock(global::MockTests.IRequestCreateExpectations<T> @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.Runtime.MemberIdentifier(0)]
						public global::System.Threading.Tasks.Task<T> Send(object @values, global::MockTests.SomeStruct @someStruct = default)
						{
							if (this.Expectations.handlers0 is not null)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@values.IsValid(@values!) &&
										@handler.@someStruct.IsValid(@someStruct!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@values!, @someStruct!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										values: {@values.FormatValue()}
										someStruct: {@someStruct.FormatValue()}
									""");
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									values: {@values.FormatValue()}
									someStruct: {@someStruct.FormatValue()}
								""");
						}
						
						[global::Rocks.Runtime.MemberIdentifier(1)]
						public global::System.Threading.Tasks.Task Send(T @message, global::MockTests.SomeStruct @someStruct = default)
						{
							if (this.Expectations.handlers1 is not null)
							{
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.@message.IsValid(@message!) &&
										@handler.@someStruct.IsValid(@someStruct!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@message!, @someStruct!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(1)}
										message: {@message.FormatValue()}
										someStruct: {@someStruct.FormatValue()}
									""");
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(1)}
									message: {@message.FormatValue()}
									someStruct: {@someStruct.FormatValue()}
								""");
						}
						
						private global::MockTests.IRequestCreateExpectations<T> Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.IRequestCreateExpectations<T> expectations) =>
							this.Expectations = expectations;
						
						internal global::MockTests.IRequestCreateExpectations<T>.Adornments.AdornmentsForHandler0 Send(global::Rocks.Runtime.Argument<object> @values, global::Rocks.Runtime.Argument<global::MockTests.SomeStruct> @someStruct)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@values);
							global::System.ArgumentNullException.ThrowIfNull(@someStruct);
							
							var @handler = new global::MockTests.IRequestCreateExpectations<T>.Handler0
							{
								@values = @values,
								@someStruct = @someStruct.Transform(default),
							};
							
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						internal global::MockTests.IRequestCreateExpectations<T>.Adornments.AdornmentsForHandler0 Send(global::Rocks.Runtime.Argument<object> @values, global::MockTests.SomeStruct @someStruct = default) =>
							this.Send(@values, global::Rocks.Runtime.Arg.Is(@someStruct));
						
						internal global::MockTests.IRequestCreateExpectations<T>.Adornments.AdornmentsForHandler1 Send(global::Rocks.Runtime.Argument<T> @message, global::Rocks.Runtime.Argument<global::MockTests.SomeStruct> @someStruct)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@message);
							global::System.ArgumentNullException.ThrowIfNull(@someStruct);
							
							var @handler = new global::MockTests.IRequestCreateExpectations<T>.Handler1
							{
								@message = @message,
								@someStruct = @someStruct.Transform(default),
							};
							
							if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
							else { this.Expectations.handlers1.Add(@handler); }
							return new(@handler);
						}
						internal global::MockTests.IRequestCreateExpectations<T>.Adornments.AdornmentsForHandler1 Send(global::Rocks.Runtime.Argument<T> @message, global::MockTests.SomeStruct @someStruct = default) =>
							this.Send(@message, global::Rocks.Runtime.Arg.Is(@someStruct));
						
						private global::MockTests.IRequestCreateExpectations<T> Expectations { get; }
					}
					
					internal global::MockTests.IRequestCreateExpectations<T>.MethodExpectations Methods { get; }
					
					internal IRequestCreateExpectations() =>
						(this.Methods) = (new(this));
					
					internal global::MockTests.IRequest<T> Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForIRequest<TAdornments>
							: global::Rocks.Runtime.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForIRequest<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::MockTests.IRequestCreateExpectations<T>.Handler0, global::System.Func<object, global::MockTests.SomeStruct, global::System.Threading.Tasks.Task<T>>, global::System.Threading.Tasks.Task<T>>, IAdornmentsForIRequest<AdornmentsForHandler0>
						{
							public AdornmentsForHandler0(global::MockTests.IRequestCreateExpectations<T>.Handler0 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler1
							: global::Rocks.Runtime.Adornments<AdornmentsForHandler1, global::MockTests.IRequestCreateExpectations<T>.Handler1, global::System.Func<T, global::MockTests.SomeStruct, global::System.Threading.Tasks.Task>, global::System.Threading.Tasks.Task>, IAdornmentsForIRequest<AdornmentsForHandler1>
						{
							public AdornmentsForHandler1(global::MockTests.IRequestCreateExpectations<T>.Handler1 handler)
								: base(handler) { }
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IRequestMakeExpectations<T>
					where T : class
				{
					internal global::MockTests.IRequest<T> Instance()
					{
						return new Mock();
					}
					
					private sealed class Mock
						: global::MockTests.IRequest<T>
					{
						public Mock()
						{
						}
						
						public global::System.Threading.Tasks.Task<T> Send(object @values, global::MockTests.SomeStruct @someStruct = default)
						{
							return global::System.Threading.Tasks.Task.FromResult(default(T)!);
						}
						public global::System.Threading.Tasks.Task Send(T @message, global::MockTests.SomeStruct @someStruct = default)
						{
							return global::System.Threading.Tasks.Task.CompletedTask;
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MockTests.IRequestT_Rock_Create.g.cs", createGeneratedCode),
				("MockTests.IRequestT_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWhenGenericParameterHasOptionalDefaultValueAsync()
	{
		var code =
			"""
			using Rocks.Runtime;
			using System;
			
			[assembly: Rock(typeof(IGenericDefault), BuildType.Create | BuildType.Make)]

			public interface IGenericDefault
			{
				void Setup<T>(T initialValue = default(T));
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IGenericDefaultCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0<T>
					: global::Rocks.Runtime.Handler<global::System.Action<T>>
				{
					public global::Rocks.Runtime.Argument<T> @initialValue { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::Rocks.Runtime.Handler>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IGenericDefault
				{
					public Mock(global::IGenericDefaultCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0)]
					public void Setup<T>(T @initialValue = default!)
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @genericHandler in this.Expectations.handlers0)
							{
								if (@genericHandler is global::IGenericDefaultCreateExpectations.Handler0<T> @handler)
								{
									if (@handler.@initialValue.IsValid(@initialValue!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(@initialValue!);
										break;
									}
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										initialValue: {@initialValue.FormatValue()}
									""");
							}
						}
						else
						{
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									initialValue: {@initialValue.FormatValue()}
								""");
						}
					}
					
					private global::IGenericDefaultCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IGenericDefaultCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::IGenericDefaultCreateExpectations.Adornments.AdornmentsForHandler0<T> Setup<T>(global::Rocks.Runtime.Argument<T> @initialValue)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@initialValue);
						
						var @handler = new global::IGenericDefaultCreateExpectations.Handler0<T>
						{
							@initialValue = @initialValue.Transform(default!),
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					internal global::IGenericDefaultCreateExpectations.Adornments.AdornmentsForHandler0<T> Setup<T>(T @initialValue = default!) =>
						this.Setup<T>(global::Rocks.Runtime.Arg.Is(@initialValue));
					
					private global::IGenericDefaultCreateExpectations Expectations { get; }
				}
				
				internal global::IGenericDefaultCreateExpectations.MethodExpectations Methods { get; }
				
				internal IGenericDefaultCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IGenericDefault Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIGenericDefault<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIGenericDefault<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0<T>
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0<T>, global::IGenericDefaultCreateExpectations.Handler0<T>, global::System.Action<T>>, IAdornmentsForIGenericDefault<AdornmentsForHandler0<T>>
					{
						public AdornmentsForHandler0(global::IGenericDefaultCreateExpectations.Handler0<T> handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IGenericDefaultMakeExpectations
			{
				internal global::IGenericDefault Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IGenericDefault
				{
					public Mock()
					{
					}
					
					public void Setup<T>(T @initialValue = default!)
					{
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IGenericDefault_Rock_Create.g.cs", createGeneratedCode),
				("IGenericDefault_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithPositiveInfinityAsync()
	{
		var code =
			"""
			using Rocks.Runtime;
			using System;

			[assembly: Rock(typeof(IUseInfinity), BuildType.Create | BuildType.Make)]

			public interface IUseInfinity
			{
				void Use(double value = double.PositiveInfinity);
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IUseInfinityCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Runtime.Handler<global::System.Action<double>>
				{
					public global::Rocks.Runtime.Argument<double> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::IUseInfinityCreateExpectations.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IUseInfinity
				{
					public Mock(global::IUseInfinityCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0)]
					public void Use(double @value = double.PositiveInfinity)
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@value.IsValid(@value!))
								{
									@foundMatch = true;
									@handler.CallCount++;
									@handler.Callback?.Invoke(@value!);
									break;
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										value: {@value.FormatValue()}
									""");
							}
						}
						else
						{
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									value: {@value.FormatValue()}
								""");
						}
					}
					
					private global::IUseInfinityCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IUseInfinityCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::IUseInfinityCreateExpectations.Adornments.AdornmentsForHandler0 Use(global::Rocks.Runtime.Argument<double> @value)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@value);
						
						var @handler = new global::IUseInfinityCreateExpectations.Handler0
						{
							@value = @value.Transform(double.PositiveInfinity),
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					internal global::IUseInfinityCreateExpectations.Adornments.AdornmentsForHandler0 Use(double @value = double.PositiveInfinity) =>
						this.Use(global::Rocks.Runtime.Arg.Is(@value));
					
					private global::IUseInfinityCreateExpectations Expectations { get; }
				}
				
				internal global::IUseInfinityCreateExpectations.MethodExpectations Methods { get; }
				
				internal IUseInfinityCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IUseInfinity Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIUseInfinity<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIUseInfinity<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::IUseInfinityCreateExpectations.Handler0, global::System.Action<double>>, IAdornmentsForIUseInfinity<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::IUseInfinityCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IUseInfinityMakeExpectations
			{
				internal global::IUseInfinity Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IUseInfinity
				{
					public Mock()
					{
					}
					
					public void Use(double @value = double.PositiveInfinity)
					{
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IUseInfinity_Rock_Create.g.cs", createGeneratedCode),
				("IUseInfinity_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}
}