using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis;
using Mono.Cecil;
using Mono.Cecil.Cil;
using NUnit.Framework;
using NUnit.Framework.Internal;

namespace Rocks.Analysis.Tests.Generators;

public static class NonPublicMembersGeneratorTests
{
	[Test]
	public static async Task GenerateWithInaccesibleTypesUsedOnConstraintsAsync()
	{
		var code =
			"""
			using Rocks;
			
			[assembly: Rock(typeof(ArgumentMapper), BuildType.Create | BuildType.Make)]

			public abstract class ArgumentMapper
			{
				protected interface ISource { }

				protected abstract void NotUsingSource<T>()
					where T : struct, ISource;
			}
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[],
			[]);
	}

	[Test]
	public static async Task GenerateWithProtectedInternalPropertyAndMixedVisibilityAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: Rock(typeof(VisibilityIssues), BuildType.Create | BuildType.Make)]

			public abstract class VisibilityIssues
			{
				protected internal virtual bool OwnsHandle { get; protected set; }
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class VisibilityIssuesCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::VisibilityIssuesCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::VisibilityIssuesCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::VisibilityIssuesCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Func<bool>, bool>
				{ }
				private global::Rocks.Handlers<global::VisibilityIssuesCreateExpectations.Handler3>? @handlers3;
				internal sealed class Handler4
					: global::Rocks.Handler<global::System.Action<bool>>
				{
					public global::Rocks.Argument<bool> @value { get; set; }
				}
				private global::Rocks.Handlers<global::VisibilityIssuesCreateExpectations.Handler4>? @handlers4;
				
				public override void Verify()
				{
					if (!this.WasInstanceInvoked)
					{
						throw new global::Rocks.Exceptions.VerificationException([$"An instance of global::VisibilityIssuesCreateExpectations was never made."]);
					}
					else if (!this.WasExceptionThrown)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::VisibilityIssues
				{
					public Mock(global::VisibilityIssuesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							this.Expectations.WasExceptionThrown = true;
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(0)}
									obj: {@obj.FormatValue()}
								""");
						}
						else
						{
							return base.Equals(@obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, global::Rocks.PropertyAccessor.Get)]
					[global::Rocks.MemberIdentifier(4, global::Rocks.PropertyAccessor.Set)]
					protected internal override bool OwnsHandle
					{
						get
						{
							if (this.Expectations.handlers3 is not null)
							{
								var @handler = this.Expectations.handlers3.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.OwnsHandle;
							}
						}
						protected set
						{
							if (this.Expectations.handlers4 is not null)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers4)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											this.Expectations.WasExceptionThrown = true;
											throw new global::Rocks.Exceptions.ExpectationException(
												$"""
												No handlers match for {this.GetType().GetMemberDescription(4)}
													value: {@value.FormatValue()}
												""");
										}
										
										break;
									}
								}
							}
							else
							{
								base.OwnsHandle = value!;
							}
						}
					}
					
					private global::VisibilityIssuesCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::VisibilityIssuesCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::VisibilityIssuesCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::VisibilityIssuesCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::VisibilityIssuesCreateExpectations.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::VisibilityIssuesCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::VisibilityIssuesCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					private global::VisibilityIssuesCreateExpectations Expectations { get; }
				}
				
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertyGetterExpectations
					{
						internal PropertyGetterExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::VisibilityIssuesCreateExpectations.Adornments.AdornmentsForHandler3 OwnsHandle()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::VisibilityIssuesCreateExpectations.Handler3();
							if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
							else { this.Expectations.handlers3.Add(handler); }
							return new(handler);
						}
						private global::VisibilityIssuesCreateExpectations Expectations { get; }
					}
					
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::VisibilityIssuesCreateExpectations.Adornments.AdornmentsForHandler4 OwnsHandle(global::Rocks.Argument<bool> @value)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::VisibilityIssuesCreateExpectations.Handler4
							{
								value = @value,
							};
						
							if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(handler); }
							else { this.Expectations.handlers4.Add(handler); }
							return new(handler);
						}
						private global::VisibilityIssuesCreateExpectations Expectations { get; }
					}
					
					internal PropertyExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::VisibilityIssuesCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
					internal global::VisibilityIssuesCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				
				internal global::VisibilityIssuesCreateExpectations.MethodExpectations Methods { get; }
				internal global::VisibilityIssuesCreateExpectations.PropertyExpectations Properties { get; }
				
				public VisibilityIssuesCreateExpectations() =>
					(this.Methods, this.Properties) = (new(this), new(this));
				
				internal global::VisibilityIssues Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForVisibilityIssues<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForVisibilityIssues<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::VisibilityIssuesCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForVisibilityIssues<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::VisibilityIssuesCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::VisibilityIssuesCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForVisibilityIssues<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::VisibilityIssuesCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::VisibilityIssuesCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForVisibilityIssues<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::VisibilityIssuesCreateExpectations.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3
						: global::Rocks.Adornments<AdornmentsForHandler3, global::VisibilityIssuesCreateExpectations.Handler3, global::System.Func<bool>, bool>, IAdornmentsForVisibilityIssues<AdornmentsForHandler3>
					{
						public AdornmentsForHandler3(global::VisibilityIssuesCreateExpectations.Handler3 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler4
						: global::Rocks.Adornments<AdornmentsForHandler4, global::VisibilityIssuesCreateExpectations.Handler4, global::System.Action<bool>>, IAdornmentsForVisibilityIssues<AdornmentsForHandler4>
					{
						public AdornmentsForHandler4(global::VisibilityIssuesCreateExpectations.Handler4 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class VisibilityIssuesMakeExpectations
			{
				internal global::VisibilityIssues Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::VisibilityIssues
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					protected internal override bool OwnsHandle
					{
						get => default!;
						protected set { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("VisibilityIssues_Rock_Create.g.cs", createGeneratedCode),
				("VisibilityIssues_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithInternalAbstractMemberInDifferentAssemblyWithUnreferenceableNameAsync()
	{
		// This is the code that is generated in IL
		/*
		public abstract class InternalAbstractInvalidMember
		{
			public abstract void Valid();
			internal abstract void 4gbnwbnbspeclmzqvzf8egt7ef2ytrtdMCa();
		}
		*/

		using var assembly = AssemblyDefinition.CreateAssembly(
			new AssemblyNameDefinition("Invalid", Version.Parse("1.0.0.0")),
			"Invalid", ModuleKind.Dll);

		var type = new TypeDefinition("", "InternalAbstractInvalidMember",
			TypeAttributes.AnsiClass | TypeAttributes.BeforeFieldInit | TypeAttributes.Public | TypeAttributes.Abstract,
			assembly.MainModule.TypeSystem.Object);
		assembly.MainModule.Types.Add(type);

		var constructor = new MethodDefinition(".ctor",
			MethodAttributes.Family | MethodAttributes.HideBySig | MethodAttributes.RTSpecialName | MethodAttributes.SpecialName,
			assembly.MainModule.TypeSystem.Void);
		type.Methods.Add(constructor);
		var constructorILProcessor = constructor.Body.GetILProcessor();
		constructorILProcessor.Emit(OpCodes.Ldarg_0);
		constructorILProcessor.Emit(OpCodes.Call,
			assembly.MainModule.ImportReference(new MethodReference(".ctor", type.Module.TypeSystem.Void, type) { HasThis = true }));
		constructorILProcessor.Emit(OpCodes.Ret);

		var validMethod = new MethodDefinition("Valid",
			MethodAttributes.Public | MethodAttributes.HideBySig | MethodAttributes.Virtual | MethodAttributes.Abstract | MethodAttributes.NewSlot,
			assembly.MainModule.TypeSystem.Void);
		type.Methods.Add(validMethod);

		var invalidMethod = new MethodDefinition("4gbnwbnbspeclmzqvzf8egt7ef2ytrtdMCa",
			MethodAttributes.Assembly | MethodAttributes.HideBySig | MethodAttributes.Virtual | MethodAttributes.Abstract | MethodAttributes.NewSlot,
			assembly.MainModule.TypeSystem.Void);
		type.Methods.Add(invalidMethod);

		using var stream = new MemoryStream();
		assembly.Write(stream);
		stream.Position = 0;

		var reference = MetadataReference.CreateFromStream(stream);

		var code =
			"""
			using Rocks;

			[assembly: Rock(typeof(InternalAbstractInvalidMember), BuildType.Create | BuildType.Make)]
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[],
			[],
			additionalReferences: [reference]);
	}

	[Test]
	public static async Task GenerateWithInternalAbstractMemberInDifferentAssemblyAsync()
	{
		var source =
			"""
			public abstract class InternalAbstractMember
			{
				internal abstract void CannotSee(string a);
			}
			""";
		var sourceReferences = Shared.References.Value
			.Cast<MetadataReference>()
			.ToList();
		var sourceSyntaxTree = CSharpSyntaxTree.ParseText(source);
		var sourceCompilation = CSharpCompilation.Create("internal", [sourceSyntaxTree],
			sourceReferences,
			new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
		var sourceReference = sourceCompilation.ToMetadataReference()!;
		sourceReferences.Add(sourceReference);

		var code =
			"""
			using Rocks;

			[assembly: Rock(typeof(InternalAbstractMember), BuildType.Create | BuildType.Make)]
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[],
			[],
			additionalReferences: sourceReferences);
	}

	[Test]
	public static async Task GenerateWithProtectedInternalPropertyAndMixedVisibilityInDifferentAssemblyAsync()
	{
		var source =
			"""
			public abstract class VisibilityIssues
			{
				protected internal virtual bool OwnsHandle { get; protected set; }
			}
			""";
		var sourceReferences = Shared.References.Value
			.Cast<MetadataReference>()
			.ToList();
		var sourceSyntaxTree = CSharpSyntaxTree.ParseText(source);
		var sourceCompilation = CSharpCompilation.Create("internal", [sourceSyntaxTree],
			sourceReferences,
			new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
		var sourceReference = sourceCompilation.ToMetadataReference()!;
		sourceReferences.Add(sourceReference);

		var code =
			"""
			using Rocks;

			[assembly: Rock(typeof(VisibilityIssues), BuildType.Create | BuildType.Make)]
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class VisibilityIssuesCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::VisibilityIssuesCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::VisibilityIssuesCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::VisibilityIssuesCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Func<bool>, bool>
				{ }
				private global::Rocks.Handlers<global::VisibilityIssuesCreateExpectations.Handler3>? @handlers3;
				internal sealed class Handler4
					: global::Rocks.Handler<global::System.Action<bool>>
				{
					public global::Rocks.Argument<bool> @value { get; set; }
				}
				private global::Rocks.Handlers<global::VisibilityIssuesCreateExpectations.Handler4>? @handlers4;
				
				public override void Verify()
				{
					if (!this.WasInstanceInvoked)
					{
						throw new global::Rocks.Exceptions.VerificationException([$"An instance of global::VisibilityIssuesCreateExpectations was never made."]);
					}
					else if (!this.WasExceptionThrown)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::VisibilityIssues
				{
					public Mock(global::VisibilityIssuesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override string? ToString()
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @handler = this.Expectations.handlers0.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers1 is not null)
						{
							foreach (var @handler in this.Expectations.handlers1)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							this.Expectations.WasExceptionThrown = true;
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(1)}
									obj: {@obj.FormatValue()}
								""");
						}
						else
						{
							return base.Equals(@obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, global::Rocks.PropertyAccessor.Get)]
					[global::Rocks.MemberIdentifier(4, global::Rocks.PropertyAccessor.Set)]
					protected override bool OwnsHandle
					{
						get
						{
							if (this.Expectations.handlers3 is not null)
							{
								var @handler = this.Expectations.handlers3.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.OwnsHandle;
							}
						}
						set
						{
							if (this.Expectations.handlers4 is not null)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers4)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											this.Expectations.WasExceptionThrown = true;
											throw new global::Rocks.Exceptions.ExpectationException(
												$"""
												No handlers match for {this.GetType().GetMemberDescription(4)}
													value: {@value.FormatValue()}
												""");
										}
										
										break;
									}
								}
							}
							else
							{
								base.OwnsHandle = value!;
							}
						}
					}
					
					private global::VisibilityIssuesCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal new global::VisibilityIssuesCreateExpectations.Adornments.AdornmentsForHandler0 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::VisibilityIssuesCreateExpectations.Handler0();
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(handler); }
						else { this.Expectations.handlers0.Add(handler); }
						return new(handler);
					}
					
					internal global::VisibilityIssuesCreateExpectations.Adornments.AdornmentsForHandler1 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::VisibilityIssuesCreateExpectations.Handler1
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
						else { this.Expectations.handlers1.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::VisibilityIssuesCreateExpectations.Adornments.AdornmentsForHandler2 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::VisibilityIssuesCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					private global::VisibilityIssuesCreateExpectations Expectations { get; }
				}
				
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertyGetterExpectations
					{
						internal PropertyGetterExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::VisibilityIssuesCreateExpectations.Adornments.AdornmentsForHandler3 OwnsHandle()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::VisibilityIssuesCreateExpectations.Handler3();
							if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
							else { this.Expectations.handlers3.Add(handler); }
							return new(handler);
						}
						private global::VisibilityIssuesCreateExpectations Expectations { get; }
					}
					
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::VisibilityIssuesCreateExpectations.Adornments.AdornmentsForHandler4 OwnsHandle(global::Rocks.Argument<bool> @value)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::VisibilityIssuesCreateExpectations.Handler4
							{
								value = @value,
							};
						
							if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(handler); }
							else { this.Expectations.handlers4.Add(handler); }
							return new(handler);
						}
						private global::VisibilityIssuesCreateExpectations Expectations { get; }
					}
					
					internal PropertyExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::VisibilityIssuesCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
					internal global::VisibilityIssuesCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				
				internal global::VisibilityIssuesCreateExpectations.MethodExpectations Methods { get; }
				internal global::VisibilityIssuesCreateExpectations.PropertyExpectations Properties { get; }
				
				public VisibilityIssuesCreateExpectations() =>
					(this.Methods, this.Properties) = (new(this), new(this));
				
				internal global::VisibilityIssues Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForVisibilityIssues<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForVisibilityIssues<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::VisibilityIssuesCreateExpectations.Handler0, global::System.Func<string?>, string?>, IAdornmentsForVisibilityIssues<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::VisibilityIssuesCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::VisibilityIssuesCreateExpectations.Handler1, global::System.Func<object?, bool>, bool>, IAdornmentsForVisibilityIssues<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::VisibilityIssuesCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::VisibilityIssuesCreateExpectations.Handler2, global::System.Func<int>, int>, IAdornmentsForVisibilityIssues<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::VisibilityIssuesCreateExpectations.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3
						: global::Rocks.Adornments<AdornmentsForHandler3, global::VisibilityIssuesCreateExpectations.Handler3, global::System.Func<bool>, bool>, IAdornmentsForVisibilityIssues<AdornmentsForHandler3>
					{
						public AdornmentsForHandler3(global::VisibilityIssuesCreateExpectations.Handler3 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler4
						: global::Rocks.Adornments<AdornmentsForHandler4, global::VisibilityIssuesCreateExpectations.Handler4, global::System.Action<bool>>, IAdornmentsForVisibilityIssues<AdornmentsForHandler4>
					{
						public AdornmentsForHandler4(global::VisibilityIssuesCreateExpectations.Handler4 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class VisibilityIssuesMakeExpectations
			{
				internal global::VisibilityIssues Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::VisibilityIssues
				{
					public Mock()
					{
					}
					
					public override string? ToString()
					{
						return default!;
					}
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					protected override bool OwnsHandle
					{
						get => default!;
						set { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("VisibilityIssues_Rock_Create.g.cs", createGeneratedCode),
				("VisibilityIssues_Rock_Make.g.cs", makeGeneratedCode)
			],
			[],
			additionalReferences: sourceReferences);
	}

	[Test]
	public static async Task GenerateWithInternalVirtualMembersAsync()
	{
		var sourceCode =
			"""
			using System;

			public class HasInternalVirtual
			{
				public HasInternalVirtual(string key) { }
				internal HasInternalVirtual(int key) { }
			
				public virtual void PublicVirtualMethod() { }
				internal virtual void InternalVirtualMethod() { }

				public virtual string PublicVirtualProperty { get; }
				internal virtual string InternalVirtualProperty { get; }

				public virtual string this[string key] { get => "a"; }
				internal virtual string this[int key] { get => "a"; }

				public virtual event EventHandler PublicVirtualEvent;
				internal virtual event EventHandler PublicVirtualEvent;
			}			
			""";

		var sourceSyntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
		var sourceReferences = Shared.References.Value
			.Cast<MetadataReference>()
			.ToList();
		var sourceCompilation = CSharpCompilation.Create("SourceAssembly", [sourceSyntaxTree],
			sourceReferences, new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
		var sourceReference = sourceCompilation.ToMetadataReference()!;

		sourceReferences.Add(sourceReference);

		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(HasInternalVirtual), BuildType.Create | BuildType.Make)]
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class HasInternalVirtualCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::HasInternalVirtualCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::HasInternalVirtualCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::HasInternalVirtualCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Action>
				{ }
				private global::Rocks.Handlers<global::HasInternalVirtualCreateExpectations.Handler3>? @handlers3;
				internal sealed class Handler4
					: global::Rocks.Handler<global::System.Func<string>, string>
				{ }
				private global::Rocks.Handlers<global::HasInternalVirtualCreateExpectations.Handler4>? @handlers4;
				internal sealed class Handler5
					: global::Rocks.Handler<global::System.Func<string, string>, string>
				{
					public global::Rocks.Argument<string> @key { get; set; }
				}
				private global::Rocks.Handlers<global::HasInternalVirtualCreateExpectations.Handler5>? @handlers5;
				
				public override void Verify()
				{
					if (!this.WasInstanceInvoked)
					{
						throw new global::Rocks.Exceptions.VerificationException([$"An instance of global::HasInternalVirtualCreateExpectations was never made."]);
					}
					else if (!this.WasExceptionThrown)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
						if (this.handlers5 is not null) { failures.AddRange(this.Verify(this.handlers5, 5)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::HasInternalVirtual, global::Rocks.IRaiseEvents
				{
					public Mock(global::HasInternalVirtualCreateExpectations @expectations, string @key)
						: base(@key)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override string? ToString()
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @handler = this.Expectations.handlers0.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							@handler.RaiseEvents(this);
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers1 is not null)
						{
							foreach (var @handler in this.Expectations.handlers1)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									@handler.RaiseEvents(this);
									return @result!;
								}
							}
							
							this.Expectations.WasExceptionThrown = true;
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(1)}
									obj: {@obj.FormatValue()}
								""");
						}
						else
						{
							return base.Equals(@obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							@handler.RaiseEvents(this);
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(3)]
					public override void PublicVirtualMethod()
					{
						if (this.Expectations.handlers3 is not null)
						{
							var @handler = this.Expectations.handlers3.First;
							@handler.CallCount++;
							@handler.Callback?.Invoke();
							@handler.RaiseEvents(this);
						}
						else
						{
							base.PublicVirtualMethod();
						}
					}
					
					[global::Rocks.MemberIdentifier(4, global::Rocks.PropertyAccessor.Get)]
					public override string PublicVirtualProperty
					{
						get
						{
							if (this.Expectations.handlers4 is not null)
							{
								var @handler = this.Expectations.handlers4.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								@handler.RaiseEvents(this);
								return @result!;
							}
							else
							{
								return base.PublicVirtualProperty;
							}
						}
					}
					
					[global::Rocks.MemberIdentifier(5, global::Rocks.PropertyAccessor.Get)]
					public override string this[string @key]
					{
						get
						{
							if (this.Expectations.handlers5 is not null)
							{
								foreach (var @handler in this.Expectations.handlers5)
								{
									if (@handler.@key.IsValid(@key!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@key!) : @handler.ReturnValue;
										@handler.RaiseEvents(this);
										return @result!;
									}
								}
								
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(5)}
										key: {@key.FormatValue()}
									""");
							}
							else
							{
								return base[@key: @key!];
							}
						}
					}
					
					#pragma warning disable CS0067
					public override event global::System.EventHandler? PublicVirtualEvent;
					#pragma warning restore CS0067
					
					void global::Rocks.IRaiseEvents.Raise(string @fieldName, object @args)
					{
						var @thisType = this.GetType();
						var @eventDelegate = (global::System.MulticastDelegate)thisType.GetField(@fieldName, 
							global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.NonPublic)!.GetValue(this)!;
						
						if (@eventDelegate is not null)
						{
							foreach (var @handler in @eventDelegate.GetInvocationList())
							{
								@handler.Method.Invoke(@handler.Target, new object[]{this, @args});
							}
						}
					}
					
					private global::HasInternalVirtualCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::HasInternalVirtualCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal new global::HasInternalVirtualCreateExpectations.Adornments.AdornmentsForHandler0 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::HasInternalVirtualCreateExpectations.Handler0();
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(handler); }
						else { this.Expectations.handlers0.Add(handler); }
						return new(handler);
					}
					
					internal global::HasInternalVirtualCreateExpectations.Adornments.AdornmentsForHandler1 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::HasInternalVirtualCreateExpectations.Handler1
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
						else { this.Expectations.handlers1.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::HasInternalVirtualCreateExpectations.Adornments.AdornmentsForHandler2 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::HasInternalVirtualCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal global::HasInternalVirtualCreateExpectations.Adornments.AdornmentsForHandler3 PublicVirtualMethod()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::HasInternalVirtualCreateExpectations.Handler3();
						if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
						else { this.Expectations.handlers3.Add(handler); }
						return new(handler);
					}
					
					private global::HasInternalVirtualCreateExpectations Expectations { get; }
				}
				
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertyGetterExpectations
					{
						internal PropertyGetterExpectations(global::HasInternalVirtualCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::HasInternalVirtualCreateExpectations.Adornments.AdornmentsForHandler4 PublicVirtualProperty()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::HasInternalVirtualCreateExpectations.Handler4();
							if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(handler); }
							else { this.Expectations.handlers4.Add(handler); }
							return new(handler);
						}
						private global::HasInternalVirtualCreateExpectations Expectations { get; }
					}
					
					
					internal PropertyExpectations(global::HasInternalVirtualCreateExpectations expectations) =>
						(this.Getters) = (new(expectations));
					
					internal global::HasInternalVirtualCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
				}
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerGetterExpectations
					{
						internal IndexerGetterExpectations(global::HasInternalVirtualCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::HasInternalVirtualCreateExpectations.Adornments.AdornmentsForHandler5 This(global::Rocks.Argument<string> @key)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@key);
							
							var @handler = new global::HasInternalVirtualCreateExpectations.Handler5
							{
								@key = @key,
							};
							
							if (this.Expectations.handlers5 is null) { this.Expectations.handlers5 = new(@handler); }
							else { this.Expectations.handlers5.Add(@handler); }
							return new(@handler);
						}
						private global::HasInternalVirtualCreateExpectations Expectations { get; }
					}
					
					
					internal IndexerExpectations(global::HasInternalVirtualCreateExpectations expectations) =>
						(this.Getters) = (new(expectations));
					
					internal global::HasInternalVirtualCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
				}
				
				internal global::HasInternalVirtualCreateExpectations.MethodExpectations Methods { get; }
				internal global::HasInternalVirtualCreateExpectations.PropertyExpectations Properties { get; }
				internal global::HasInternalVirtualCreateExpectations.IndexerExpectations Indexers { get; }
				
				public HasInternalVirtualCreateExpectations() =>
					(this.Methods, this.Properties, this.Indexers) = (new(this), new(this), new(this));
				
				internal global::HasInternalVirtual Instance(string @key)
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this, @key);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForHasInternalVirtual<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForHasInternalVirtual<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::HasInternalVirtualCreateExpectations.Handler0, global::System.Func<string?>, string?>, IAdornmentsForHasInternalVirtual<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::HasInternalVirtualCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::HasInternalVirtualCreateExpectations.Handler1, global::System.Func<object?, bool>, bool>, IAdornmentsForHasInternalVirtual<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::HasInternalVirtualCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::HasInternalVirtualCreateExpectations.Handler2, global::System.Func<int>, int>, IAdornmentsForHasInternalVirtual<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::HasInternalVirtualCreateExpectations.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3
						: global::Rocks.Adornments<AdornmentsForHandler3, global::HasInternalVirtualCreateExpectations.Handler3, global::System.Action>, IAdornmentsForHasInternalVirtual<AdornmentsForHandler3>
					{
						public AdornmentsForHandler3(global::HasInternalVirtualCreateExpectations.Handler3 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler4
						: global::Rocks.Adornments<AdornmentsForHandler4, global::HasInternalVirtualCreateExpectations.Handler4, global::System.Func<string>, string>, IAdornmentsForHasInternalVirtual<AdornmentsForHandler4>
					{
						public AdornmentsForHandler4(global::HasInternalVirtualCreateExpectations.Handler4 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler5
						: global::Rocks.Adornments<AdornmentsForHandler5, global::HasInternalVirtualCreateExpectations.Handler5, global::System.Func<string, string>, string>, IAdornmentsForHasInternalVirtual<AdornmentsForHandler5>
					{
						public AdornmentsForHandler5(global::HasInternalVirtualCreateExpectations.Handler5 handler)
							: base(handler) { }
					}
				}
			}
			
			internal static class HasInternalVirtualAdornmentsEventExtensions
			{
				internal static TAdornments RaisePublicVirtualEvent<TAdornments>(this TAdornments self, global::System.EventArgs args) where TAdornments : global::HasInternalVirtualCreateExpectations.Adornments.IAdornmentsForHasInternalVirtual<TAdornments> => 
					self.AddRaiseEvent(new("PublicVirtualEvent", args));
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class HasInternalVirtualMakeExpectations
			{
				internal global::HasInternalVirtual Instance(string @key)
				{
					return new Mock(@key);
				}
				
				private sealed class Mock
					: global::HasInternalVirtual
				{
					public Mock(string @key)
						: base(@key)
					{
					}
					
					public override string? ToString()
					{
						return default!;
					}
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override void PublicVirtualMethod()
					{
					}
					public override string PublicVirtualProperty
					{
						get => default!;
					}
					public override string this[string @key]
					{
						get => default!;
					}
					
					#pragma warning disable CS0067
					public override event global::System.EventHandler? PublicVirtualEvent;
					#pragma warning restore CS0067
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("HasInternalVirtual_Rock_Create.g.cs", createGeneratedCode),
				("HasInternalVirtual_Rock_Make.g.cs", makeGeneratedCode)
			],
			[],
			additionalReferences: sourceReferences);
	}

	[Test]
	public static async Task GenerateWithProtectedVirtualMembersAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(MockTests.Test), BuildType.Create | BuildType.Make)]

			namespace MockTests
			{
				public class Test
				{
					protected virtual void ProtectedMethod() { }
					protected virtual string ProtectedProperty { get; set; }
					protected virtual event EventHandler ProtectedEvent;
				}
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class TestCreateExpectations
					: global::Rocks.Expectations
				{
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
					{
						public global::Rocks.Argument<object?> @obj { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler0>? @handlers0;
					internal sealed class Handler1
						: global::Rocks.Handler<global::System.Func<int>, int>
					{ }
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler1>? @handlers1;
					internal sealed class Handler2
						: global::Rocks.Handler<global::System.Func<string?>, string?>
					{ }
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler2>? @handlers2;
					internal sealed class Handler3
						: global::Rocks.Handler<global::System.Action>
					{ }
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler3>? @handlers3;
					internal sealed class Handler4
						: global::Rocks.Handler<global::System.Func<string>, string>
					{ }
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler4>? @handlers4;
					internal sealed class Handler5
						: global::Rocks.Handler<global::System.Action<string>>
					{
						public global::Rocks.Argument<string> @value { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler5>? @handlers5;
					
					public override void Verify()
					{
						if (!this.WasInstanceInvoked)
						{
							throw new global::Rocks.Exceptions.VerificationException([$"An instance of global::MockTests.TestCreateExpectations was never made."]);
						}
						else if (!this.WasExceptionThrown)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
							if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
							if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
							if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
							if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
							if (this.handlers5 is not null) { failures.AddRange(this.Verify(this.handlers5, 5)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.Test, global::Rocks.IRaiseEvents
					{
						public Mock(global::MockTests.TestCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0)]
						public override bool Equals(object? @obj)
						{
							if (this.Expectations.handlers0 is not null)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@obj.IsValid(@obj!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@obj!) : @handler.ReturnValue;
										@handler.RaiseEvents(this);
										return @result!;
									}
								}
								
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										obj: {@obj.FormatValue()}
									""");
							}
							else
							{
								return base.Equals(@obj: @obj!);
							}
						}
						
						[global::Rocks.MemberIdentifier(1)]
						public override int GetHashCode()
						{
							if (this.Expectations.handlers1 is not null)
							{
								var @handler = this.Expectations.handlers1.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								@handler.RaiseEvents(this);
								return @result!;
							}
							else
							{
								return base.GetHashCode();
							}
						}
						
						[global::Rocks.MemberIdentifier(2)]
						public override string? ToString()
						{
							if (this.Expectations.handlers2 is not null)
							{
								var @handler = this.Expectations.handlers2.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								@handler.RaiseEvents(this);
								return @result!;
							}
							else
							{
								return base.ToString();
							}
						}
						
						[global::Rocks.MemberIdentifier(3)]
						protected override void ProtectedMethod()
						{
							if (this.Expectations.handlers3 is not null)
							{
								var @handler = this.Expectations.handlers3.First;
								@handler.CallCount++;
								@handler.Callback?.Invoke();
								@handler.RaiseEvents(this);
							}
							else
							{
								base.ProtectedMethod();
							}
						}
						
						[global::Rocks.MemberIdentifier(4, global::Rocks.PropertyAccessor.Get)]
						[global::Rocks.MemberIdentifier(5, global::Rocks.PropertyAccessor.Set)]
						protected override string ProtectedProperty
						{
							get
							{
								if (this.Expectations.handlers4 is not null)
								{
									var @handler = this.Expectations.handlers4.First;
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback() : @handler.ReturnValue;
									@handler.RaiseEvents(this);
									return @result!;
								}
								else
								{
									return base.ProtectedProperty;
								}
							}
							set
							{
								if (this.Expectations.handlers5 is not null)
								{
									var @foundMatch = false;
									foreach (var @handler in this.Expectations.handlers5)
									{
										if (@handler.value.IsValid(value!))
										{
											@handler.CallCount++;
											@foundMatch = true;
											@handler.Callback?.Invoke(value!);
											
											if (!@foundMatch)
											{
												this.Expectations.WasExceptionThrown = true;
												throw new global::Rocks.Exceptions.ExpectationException(
													$"""
													No handlers match for {this.GetType().GetMemberDescription(5)}
														value: {@value.FormatValue()}
													""");
											}
											
											@handler.RaiseEvents(this);
											break;
										}
									}
								}
								else
								{
									base.ProtectedProperty = value!;
								}
							}
						}
						
						#pragma warning disable CS0067
						protected override event global::System.EventHandler? ProtectedEvent;
						#pragma warning restore CS0067
						
						void global::Rocks.IRaiseEvents.Raise(string @fieldName, object @args)
						{
							var @thisType = this.GetType();
							var @eventDelegate = (global::System.MulticastDelegate)thisType.GetField(@fieldName, 
								global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.NonPublic)!.GetValue(this)!;
							
							if (@eventDelegate is not null)
							{
								foreach (var @handler in @eventDelegate.GetInvocationList())
								{
									@handler.Method.Invoke(@handler.Target, new object[]{this, @args});
								}
							}
						}
						
						private global::MockTests.TestCreateExpectations Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.TestCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@obj);
							
							var @handler = new global::MockTests.TestCreateExpectations.Handler0
							{
								@obj = @obj,
							};
							
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						
						internal new global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MockTests.TestCreateExpectations.Handler1();
							if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
							else { this.Expectations.handlers1.Add(handler); }
							return new(handler);
						}
						
						internal new global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MockTests.TestCreateExpectations.Handler2();
							if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
							else { this.Expectations.handlers2.Add(handler); }
							return new(handler);
						}
						
						internal global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler3 ProtectedMethod()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MockTests.TestCreateExpectations.Handler3();
							if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
							else { this.Expectations.handlers3.Add(handler); }
							return new(handler);
						}
						
						private global::MockTests.TestCreateExpectations Expectations { get; }
					}
					
					internal sealed class PropertyExpectations
					{
						internal sealed class PropertyGetterExpectations
						{
							internal PropertyGetterExpectations(global::MockTests.TestCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler4 ProtectedProperty()
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								var handler = new global::MockTests.TestCreateExpectations.Handler4();
								if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(handler); }
								else { this.Expectations.handlers4.Add(handler); }
								return new(handler);
							}
							private global::MockTests.TestCreateExpectations Expectations { get; }
						}
						
						internal sealed class PropertySetterExpectations
						{
							internal PropertySetterExpectations(global::MockTests.TestCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler5 ProtectedProperty(global::Rocks.Argument<string> @value)
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								global::System.ArgumentNullException.ThrowIfNull(@value);
							
								var handler = new global::MockTests.TestCreateExpectations.Handler5
								{
									value = @value,
								};
							
								if (this.Expectations.handlers5 is null) { this.Expectations.handlers5 = new(handler); }
								else { this.Expectations.handlers5.Add(handler); }
								return new(handler);
							}
							private global::MockTests.TestCreateExpectations Expectations { get; }
						}
						
						internal PropertyExpectations(global::MockTests.TestCreateExpectations expectations) =>
							(this.Getters, this.Setters) = (new(expectations), new(expectations));
						
						internal global::MockTests.TestCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
						internal global::MockTests.TestCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
					}
					
					internal global::MockTests.TestCreateExpectations.MethodExpectations Methods { get; }
					internal global::MockTests.TestCreateExpectations.PropertyExpectations Properties { get; }
					
					public TestCreateExpectations() =>
						(this.Methods, this.Properties) = (new(this), new(this));
					
					internal global::MockTests.Test Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForTest<TAdornments>
							: global::Rocks.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForTest<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::Rocks.Adornments<AdornmentsForHandler0, global::MockTests.TestCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForTest<AdornmentsForHandler0>
						{
							public AdornmentsForHandler0(global::MockTests.TestCreateExpectations.Handler0 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler1
							: global::Rocks.Adornments<AdornmentsForHandler1, global::MockTests.TestCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForTest<AdornmentsForHandler1>
						{
							public AdornmentsForHandler1(global::MockTests.TestCreateExpectations.Handler1 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler2
							: global::Rocks.Adornments<AdornmentsForHandler2, global::MockTests.TestCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForTest<AdornmentsForHandler2>
						{
							public AdornmentsForHandler2(global::MockTests.TestCreateExpectations.Handler2 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler3
							: global::Rocks.Adornments<AdornmentsForHandler3, global::MockTests.TestCreateExpectations.Handler3, global::System.Action>, IAdornmentsForTest<AdornmentsForHandler3>
						{
							public AdornmentsForHandler3(global::MockTests.TestCreateExpectations.Handler3 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler4
							: global::Rocks.Adornments<AdornmentsForHandler4, global::MockTests.TestCreateExpectations.Handler4, global::System.Func<string>, string>, IAdornmentsForTest<AdornmentsForHandler4>
						{
							public AdornmentsForHandler4(global::MockTests.TestCreateExpectations.Handler4 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler5
							: global::Rocks.Adornments<AdornmentsForHandler5, global::MockTests.TestCreateExpectations.Handler5, global::System.Action<string>>, IAdornmentsForTest<AdornmentsForHandler5>
						{
							public AdornmentsForHandler5(global::MockTests.TestCreateExpectations.Handler5 handler)
								: base(handler) { }
						}
					}
				}
				
				internal static class TestAdornmentsEventExtensions
				{
					internal static TAdornments RaiseProtectedEvent<TAdornments>(this TAdornments self, global::System.EventArgs args) where TAdornments : global::MockTests.TestCreateExpectations.Adornments.IAdornmentsForTest<TAdornments> => 
						self.AddRaiseEvent(new("ProtectedEvent", args));
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class TestMakeExpectations
				{
					internal global::MockTests.Test Instance()
					{
						return new Mock();
					}
					
					private sealed class Mock
						: global::MockTests.Test
					{
						public Mock()
						{
						}
						
						public override bool Equals(object? @obj)
						{
							return default!;
						}
						public override int GetHashCode()
						{
							return default!;
						}
						public override string? ToString()
						{
							return default!;
						}
						protected override void ProtectedMethod()
						{
						}
						protected override string ProtectedProperty
						{
							get => default!;
							set { }
						}
						
						#pragma warning disable CS0067
						protected override event global::System.EventHandler? ProtectedEvent;
						#pragma warning restore CS0067
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MockTests.Test_Rock_Create.g.cs", createGeneratedCode),
				("MockTests.Test_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithNonPublicAbstractMembersAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(MockTests.Test), BuildType.Create | BuildType.Make)]

			namespace MockTests
			{
				public abstract class Test
				{
					protected abstract void ProtectedMethod();
					protected abstract string ProtectedProperty { get; set; }
					protected abstract event EventHandler ProtectedEvent;
				}
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class TestCreateExpectations
					: global::Rocks.Expectations
				{
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
					{
						public global::Rocks.Argument<object?> @obj { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler0>? @handlers0;
					internal sealed class Handler1
						: global::Rocks.Handler<global::System.Func<int>, int>
					{ }
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler1>? @handlers1;
					internal sealed class Handler2
						: global::Rocks.Handler<global::System.Func<string?>, string?>
					{ }
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler2>? @handlers2;
					internal sealed class Handler3
						: global::Rocks.Handler<global::System.Action>
					{ }
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler3>? @handlers3;
					internal sealed class Handler4
						: global::Rocks.Handler<global::System.Func<string>, string>
					{ }
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler4>? @handlers4;
					internal sealed class Handler5
						: global::Rocks.Handler<global::System.Action<string>>
					{
						public global::Rocks.Argument<string> @value { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler5>? @handlers5;
					
					public override void Verify()
					{
						if (!this.WasInstanceInvoked)
						{
							throw new global::Rocks.Exceptions.VerificationException([$"An instance of global::MockTests.TestCreateExpectations was never made."]);
						}
						else if (!this.WasExceptionThrown)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
							if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
							if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
							if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
							if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
							if (this.handlers5 is not null) { failures.AddRange(this.Verify(this.handlers5, 5)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.Test, global::Rocks.IRaiseEvents
					{
						public Mock(global::MockTests.TestCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0)]
						public override bool Equals(object? @obj)
						{
							if (this.Expectations.handlers0 is not null)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@obj.IsValid(@obj!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@obj!) : @handler.ReturnValue;
										@handler.RaiseEvents(this);
										return @result!;
									}
								}
								
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										obj: {@obj.FormatValue()}
									""");
							}
							else
							{
								return base.Equals(@obj: @obj!);
							}
						}
						
						[global::Rocks.MemberIdentifier(1)]
						public override int GetHashCode()
						{
							if (this.Expectations.handlers1 is not null)
							{
								var @handler = this.Expectations.handlers1.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								@handler.RaiseEvents(this);
								return @result!;
							}
							else
							{
								return base.GetHashCode();
							}
						}
						
						[global::Rocks.MemberIdentifier(2)]
						public override string? ToString()
						{
							if (this.Expectations.handlers2 is not null)
							{
								var @handler = this.Expectations.handlers2.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								@handler.RaiseEvents(this);
								return @result!;
							}
							else
							{
								return base.ToString();
							}
						}
						
						[global::Rocks.MemberIdentifier(3)]
						protected override void ProtectedMethod()
						{
							if (this.Expectations.handlers3 is not null)
							{
								var @handler = this.Expectations.handlers3.First;
								@handler.CallCount++;
								@handler.Callback?.Invoke();
								@handler.RaiseEvents(this);
							}
							else
							{
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers were found for {this.GetType().GetMemberDescription(3)}
									""");
							}
						}
						
						[global::Rocks.MemberIdentifier(4, global::Rocks.PropertyAccessor.Get)]
						[global::Rocks.MemberIdentifier(5, global::Rocks.PropertyAccessor.Set)]
						protected override string ProtectedProperty
						{
							get
							{
								if (this.Expectations.handlers4 is not null)
								{
									var @handler = this.Expectations.handlers4.First;
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback() : @handler.ReturnValue;
									@handler.RaiseEvents(this);
									return @result!;
								}
								
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(4)}
									""");
							}
							set
							{
								if (this.Expectations.handlers5 is not null)
								{
									var @foundMatch = false;
									foreach (var @handler in this.Expectations.handlers5)
									{
										if (@handler.value.IsValid(value!))
										{
											@handler.CallCount++;
											@foundMatch = true;
											@handler.Callback?.Invoke(value!);
											
											if (!@foundMatch)
											{
												this.Expectations.WasExceptionThrown = true;
												throw new global::Rocks.Exceptions.ExpectationException(
													$"""
													No handlers match for {this.GetType().GetMemberDescription(5)}
														value: {@value.FormatValue()}
													""");
											}
											
											@handler.RaiseEvents(this);
											break;
										}
									}
								}
								else
								{
									this.Expectations.WasExceptionThrown = true;
									throw new global::Rocks.Exceptions.ExpectationException(
										$"""
										No handlers were found for {this.GetType().GetMemberDescription(5)}
											value: {@value.FormatValue()}
										""");
								}
							}
						}
						
						#pragma warning disable CS0067
						protected override event global::System.EventHandler? ProtectedEvent;
						#pragma warning restore CS0067
						
						void global::Rocks.IRaiseEvents.Raise(string @fieldName, object @args)
						{
							var @thisType = this.GetType();
							var @eventDelegate = (global::System.MulticastDelegate)thisType.GetField(@fieldName, 
								global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.NonPublic)!.GetValue(this)!;
							
							if (@eventDelegate is not null)
							{
								foreach (var @handler in @eventDelegate.GetInvocationList())
								{
									@handler.Method.Invoke(@handler.Target, new object[]{this, @args});
								}
							}
						}
						
						private global::MockTests.TestCreateExpectations Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.TestCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@obj);
							
							var @handler = new global::MockTests.TestCreateExpectations.Handler0
							{
								@obj = @obj,
							};
							
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						
						internal new global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MockTests.TestCreateExpectations.Handler1();
							if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
							else { this.Expectations.handlers1.Add(handler); }
							return new(handler);
						}
						
						internal new global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MockTests.TestCreateExpectations.Handler2();
							if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
							else { this.Expectations.handlers2.Add(handler); }
							return new(handler);
						}
						
						internal global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler3 ProtectedMethod()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MockTests.TestCreateExpectations.Handler3();
							if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
							else { this.Expectations.handlers3.Add(handler); }
							return new(handler);
						}
						
						private global::MockTests.TestCreateExpectations Expectations { get; }
					}
					
					internal sealed class PropertyExpectations
					{
						internal sealed class PropertyGetterExpectations
						{
							internal PropertyGetterExpectations(global::MockTests.TestCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler4 ProtectedProperty()
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								var handler = new global::MockTests.TestCreateExpectations.Handler4();
								if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(handler); }
								else { this.Expectations.handlers4.Add(handler); }
								return new(handler);
							}
							private global::MockTests.TestCreateExpectations Expectations { get; }
						}
						
						internal sealed class PropertySetterExpectations
						{
							internal PropertySetterExpectations(global::MockTests.TestCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler5 ProtectedProperty(global::Rocks.Argument<string> @value)
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								global::System.ArgumentNullException.ThrowIfNull(@value);
							
								var handler = new global::MockTests.TestCreateExpectations.Handler5
								{
									value = @value,
								};
							
								if (this.Expectations.handlers5 is null) { this.Expectations.handlers5 = new(handler); }
								else { this.Expectations.handlers5.Add(handler); }
								return new(handler);
							}
							private global::MockTests.TestCreateExpectations Expectations { get; }
						}
						
						internal PropertyExpectations(global::MockTests.TestCreateExpectations expectations) =>
							(this.Getters, this.Setters) = (new(expectations), new(expectations));
						
						internal global::MockTests.TestCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
						internal global::MockTests.TestCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
					}
					
					internal global::MockTests.TestCreateExpectations.MethodExpectations Methods { get; }
					internal global::MockTests.TestCreateExpectations.PropertyExpectations Properties { get; }
					
					public TestCreateExpectations() =>
						(this.Methods, this.Properties) = (new(this), new(this));
					
					internal global::MockTests.Test Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForTest<TAdornments>
							: global::Rocks.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForTest<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::Rocks.Adornments<AdornmentsForHandler0, global::MockTests.TestCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForTest<AdornmentsForHandler0>
						{
							public AdornmentsForHandler0(global::MockTests.TestCreateExpectations.Handler0 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler1
							: global::Rocks.Adornments<AdornmentsForHandler1, global::MockTests.TestCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForTest<AdornmentsForHandler1>
						{
							public AdornmentsForHandler1(global::MockTests.TestCreateExpectations.Handler1 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler2
							: global::Rocks.Adornments<AdornmentsForHandler2, global::MockTests.TestCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForTest<AdornmentsForHandler2>
						{
							public AdornmentsForHandler2(global::MockTests.TestCreateExpectations.Handler2 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler3
							: global::Rocks.Adornments<AdornmentsForHandler3, global::MockTests.TestCreateExpectations.Handler3, global::System.Action>, IAdornmentsForTest<AdornmentsForHandler3>
						{
							public AdornmentsForHandler3(global::MockTests.TestCreateExpectations.Handler3 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler4
							: global::Rocks.Adornments<AdornmentsForHandler4, global::MockTests.TestCreateExpectations.Handler4, global::System.Func<string>, string>, IAdornmentsForTest<AdornmentsForHandler4>
						{
							public AdornmentsForHandler4(global::MockTests.TestCreateExpectations.Handler4 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler5
							: global::Rocks.Adornments<AdornmentsForHandler5, global::MockTests.TestCreateExpectations.Handler5, global::System.Action<string>>, IAdornmentsForTest<AdornmentsForHandler5>
						{
							public AdornmentsForHandler5(global::MockTests.TestCreateExpectations.Handler5 handler)
								: base(handler) { }
						}
					}
				}
				
				internal static class TestAdornmentsEventExtensions
				{
					internal static TAdornments RaiseProtectedEvent<TAdornments>(this TAdornments self, global::System.EventArgs args) where TAdornments : global::MockTests.TestCreateExpectations.Adornments.IAdornmentsForTest<TAdornments> => 
						self.AddRaiseEvent(new("ProtectedEvent", args));
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class TestMakeExpectations
				{
					internal global::MockTests.Test Instance()
					{
						return new Mock();
					}
					
					private sealed class Mock
						: global::MockTests.Test
					{
						public Mock()
						{
						}
						
						public override bool Equals(object? @obj)
						{
							return default!;
						}
						public override int GetHashCode()
						{
							return default!;
						}
						public override string? ToString()
						{
							return default!;
						}
						protected override void ProtectedMethod()
						{
						}
						protected override string ProtectedProperty
						{
							get => default!;
							set { }
						}
						
						#pragma warning disable CS0067
						protected override event global::System.EventHandler? ProtectedEvent;
						#pragma warning restore CS0067
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MockTests.Test_Rock_Create.g.cs", createGeneratedCode),
				("MockTests.Test_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithNonPublicVirtualMenbersAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(MockTests.Test), BuildType.Create | BuildType.Make)]

			namespace MockTests
			{
				public abstract class Test
				{
					protected abstract void ProtectedMethod();
					protected abstract string ProtectedProperty { get; set; }
					protected abstract event EventHandler ProtectedEvent;
				}
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class TestCreateExpectations
					: global::Rocks.Expectations
				{
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
					{
						public global::Rocks.Argument<object?> @obj { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler0>? @handlers0;
					internal sealed class Handler1
						: global::Rocks.Handler<global::System.Func<int>, int>
					{ }
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler1>? @handlers1;
					internal sealed class Handler2
						: global::Rocks.Handler<global::System.Func<string?>, string?>
					{ }
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler2>? @handlers2;
					internal sealed class Handler3
						: global::Rocks.Handler<global::System.Action>
					{ }
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler3>? @handlers3;
					internal sealed class Handler4
						: global::Rocks.Handler<global::System.Func<string>, string>
					{ }
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler4>? @handlers4;
					internal sealed class Handler5
						: global::Rocks.Handler<global::System.Action<string>>
					{
						public global::Rocks.Argument<string> @value { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.TestCreateExpectations.Handler5>? @handlers5;
					
					public override void Verify()
					{
						if (!this.WasInstanceInvoked)
						{
							throw new global::Rocks.Exceptions.VerificationException([$"An instance of global::MockTests.TestCreateExpectations was never made."]);
						}
						else if (!this.WasExceptionThrown)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
							if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
							if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
							if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
							if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
							if (this.handlers5 is not null) { failures.AddRange(this.Verify(this.handlers5, 5)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.Test, global::Rocks.IRaiseEvents
					{
						public Mock(global::MockTests.TestCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0)]
						public override bool Equals(object? @obj)
						{
							if (this.Expectations.handlers0 is not null)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@obj.IsValid(@obj!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@obj!) : @handler.ReturnValue;
										@handler.RaiseEvents(this);
										return @result!;
									}
								}
								
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										obj: {@obj.FormatValue()}
									""");
							}
							else
							{
								return base.Equals(@obj: @obj!);
							}
						}
						
						[global::Rocks.MemberIdentifier(1)]
						public override int GetHashCode()
						{
							if (this.Expectations.handlers1 is not null)
							{
								var @handler = this.Expectations.handlers1.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								@handler.RaiseEvents(this);
								return @result!;
							}
							else
							{
								return base.GetHashCode();
							}
						}
						
						[global::Rocks.MemberIdentifier(2)]
						public override string? ToString()
						{
							if (this.Expectations.handlers2 is not null)
							{
								var @handler = this.Expectations.handlers2.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								@handler.RaiseEvents(this);
								return @result!;
							}
							else
							{
								return base.ToString();
							}
						}
						
						[global::Rocks.MemberIdentifier(3)]
						protected override void ProtectedMethod()
						{
							if (this.Expectations.handlers3 is not null)
							{
								var @handler = this.Expectations.handlers3.First;
								@handler.CallCount++;
								@handler.Callback?.Invoke();
								@handler.RaiseEvents(this);
							}
							else
							{
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers were found for {this.GetType().GetMemberDescription(3)}
									""");
							}
						}
						
						[global::Rocks.MemberIdentifier(4, global::Rocks.PropertyAccessor.Get)]
						[global::Rocks.MemberIdentifier(5, global::Rocks.PropertyAccessor.Set)]
						protected override string ProtectedProperty
						{
							get
							{
								if (this.Expectations.handlers4 is not null)
								{
									var @handler = this.Expectations.handlers4.First;
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback() : @handler.ReturnValue;
									@handler.RaiseEvents(this);
									return @result!;
								}
								
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(4)}
									""");
							}
							set
							{
								if (this.Expectations.handlers5 is not null)
								{
									var @foundMatch = false;
									foreach (var @handler in this.Expectations.handlers5)
									{
										if (@handler.value.IsValid(value!))
										{
											@handler.CallCount++;
											@foundMatch = true;
											@handler.Callback?.Invoke(value!);
											
											if (!@foundMatch)
											{
												this.Expectations.WasExceptionThrown = true;
												throw new global::Rocks.Exceptions.ExpectationException(
													$"""
													No handlers match for {this.GetType().GetMemberDescription(5)}
														value: {@value.FormatValue()}
													""");
											}
											
											@handler.RaiseEvents(this);
											break;
										}
									}
								}
								else
								{
									this.Expectations.WasExceptionThrown = true;
									throw new global::Rocks.Exceptions.ExpectationException(
										$"""
										No handlers were found for {this.GetType().GetMemberDescription(5)}
											value: {@value.FormatValue()}
										""");
								}
							}
						}
						
						#pragma warning disable CS0067
						protected override event global::System.EventHandler? ProtectedEvent;
						#pragma warning restore CS0067
						
						void global::Rocks.IRaiseEvents.Raise(string @fieldName, object @args)
						{
							var @thisType = this.GetType();
							var @eventDelegate = (global::System.MulticastDelegate)thisType.GetField(@fieldName, 
								global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.NonPublic)!.GetValue(this)!;
							
							if (@eventDelegate is not null)
							{
								foreach (var @handler in @eventDelegate.GetInvocationList())
								{
									@handler.Method.Invoke(@handler.Target, new object[]{this, @args});
								}
							}
						}
						
						private global::MockTests.TestCreateExpectations Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.TestCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@obj);
							
							var @handler = new global::MockTests.TestCreateExpectations.Handler0
							{
								@obj = @obj,
							};
							
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						
						internal new global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MockTests.TestCreateExpectations.Handler1();
							if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
							else { this.Expectations.handlers1.Add(handler); }
							return new(handler);
						}
						
						internal new global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MockTests.TestCreateExpectations.Handler2();
							if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
							else { this.Expectations.handlers2.Add(handler); }
							return new(handler);
						}
						
						internal global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler3 ProtectedMethod()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MockTests.TestCreateExpectations.Handler3();
							if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
							else { this.Expectations.handlers3.Add(handler); }
							return new(handler);
						}
						
						private global::MockTests.TestCreateExpectations Expectations { get; }
					}
					
					internal sealed class PropertyExpectations
					{
						internal sealed class PropertyGetterExpectations
						{
							internal PropertyGetterExpectations(global::MockTests.TestCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler4 ProtectedProperty()
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								var handler = new global::MockTests.TestCreateExpectations.Handler4();
								if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(handler); }
								else { this.Expectations.handlers4.Add(handler); }
								return new(handler);
							}
							private global::MockTests.TestCreateExpectations Expectations { get; }
						}
						
						internal sealed class PropertySetterExpectations
						{
							internal PropertySetterExpectations(global::MockTests.TestCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::MockTests.TestCreateExpectations.Adornments.AdornmentsForHandler5 ProtectedProperty(global::Rocks.Argument<string> @value)
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								global::System.ArgumentNullException.ThrowIfNull(@value);
							
								var handler = new global::MockTests.TestCreateExpectations.Handler5
								{
									value = @value,
								};
							
								if (this.Expectations.handlers5 is null) { this.Expectations.handlers5 = new(handler); }
								else { this.Expectations.handlers5.Add(handler); }
								return new(handler);
							}
							private global::MockTests.TestCreateExpectations Expectations { get; }
						}
						
						internal PropertyExpectations(global::MockTests.TestCreateExpectations expectations) =>
							(this.Getters, this.Setters) = (new(expectations), new(expectations));
						
						internal global::MockTests.TestCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
						internal global::MockTests.TestCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
					}
					
					internal global::MockTests.TestCreateExpectations.MethodExpectations Methods { get; }
					internal global::MockTests.TestCreateExpectations.PropertyExpectations Properties { get; }
					
					public TestCreateExpectations() =>
						(this.Methods, this.Properties) = (new(this), new(this));
					
					internal global::MockTests.Test Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForTest<TAdornments>
							: global::Rocks.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForTest<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::Rocks.Adornments<AdornmentsForHandler0, global::MockTests.TestCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForTest<AdornmentsForHandler0>
						{
							public AdornmentsForHandler0(global::MockTests.TestCreateExpectations.Handler0 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler1
							: global::Rocks.Adornments<AdornmentsForHandler1, global::MockTests.TestCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForTest<AdornmentsForHandler1>
						{
							public AdornmentsForHandler1(global::MockTests.TestCreateExpectations.Handler1 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler2
							: global::Rocks.Adornments<AdornmentsForHandler2, global::MockTests.TestCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForTest<AdornmentsForHandler2>
						{
							public AdornmentsForHandler2(global::MockTests.TestCreateExpectations.Handler2 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler3
							: global::Rocks.Adornments<AdornmentsForHandler3, global::MockTests.TestCreateExpectations.Handler3, global::System.Action>, IAdornmentsForTest<AdornmentsForHandler3>
						{
							public AdornmentsForHandler3(global::MockTests.TestCreateExpectations.Handler3 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler4
							: global::Rocks.Adornments<AdornmentsForHandler4, global::MockTests.TestCreateExpectations.Handler4, global::System.Func<string>, string>, IAdornmentsForTest<AdornmentsForHandler4>
						{
							public AdornmentsForHandler4(global::MockTests.TestCreateExpectations.Handler4 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler5
							: global::Rocks.Adornments<AdornmentsForHandler5, global::MockTests.TestCreateExpectations.Handler5, global::System.Action<string>>, IAdornmentsForTest<AdornmentsForHandler5>
						{
							public AdornmentsForHandler5(global::MockTests.TestCreateExpectations.Handler5 handler)
								: base(handler) { }
						}
					}
				}
				
				internal static class TestAdornmentsEventExtensions
				{
					internal static TAdornments RaiseProtectedEvent<TAdornments>(this TAdornments self, global::System.EventArgs args) where TAdornments : global::MockTests.TestCreateExpectations.Adornments.IAdornmentsForTest<TAdornments> => 
						self.AddRaiseEvent(new("ProtectedEvent", args));
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class TestMakeExpectations
				{
					internal global::MockTests.Test Instance()
					{
						return new Mock();
					}
					
					private sealed class Mock
						: global::MockTests.Test
					{
						public Mock()
						{
						}
						
						public override bool Equals(object? @obj)
						{
							return default!;
						}
						public override int GetHashCode()
						{
							return default!;
						}
						public override string? ToString()
						{
							return default!;
						}
						protected override void ProtectedMethod()
						{
						}
						protected override string ProtectedProperty
						{
							get => default!;
							set { }
						}
						
						#pragma warning disable CS0067
						protected override event global::System.EventHandler? ProtectedEvent;
						#pragma warning restore CS0067
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MockTests.Test_Rock_Create.g.cs", createGeneratedCode),
				("MockTests.Test_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}
}