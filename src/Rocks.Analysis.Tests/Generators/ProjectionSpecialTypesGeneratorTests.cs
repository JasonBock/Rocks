using NUnit.Framework;

namespace Rocks.Analysis.Tests.Generators;

public static class ProjectionSpecialTypesGeneratorTests
{
	[Test]
	public static async Task GenerateWithArgIteratorAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(ISpecialTypes), BuildType.Create | BuildType.Make)]

			public interface ISpecialTypes
			{
				void Use(ArgIterator value);
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ISpecialTypesCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<Handler0.CallbackForHandler>
				{
					internal delegate void CallbackForHandler(global::System.ArgIterator @value);
					public global::Rocks.Projections.ArgIteratorArgument @value { get; set; }
				}
				private global::Rocks.Handlers<global::ISpecialTypesCreateExpectations.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked && !this.WasExceptionThrown)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock(global::ISpecialTypesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public void Use(global::System.ArgIterator @value)
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@value.IsValid(@value!))
								{
									@foundMatch = true;
									@handler.CallCount++;
									@handler.Callback?.Invoke(@value!);
									break;
								}
							}
							
							if (!@foundMatch)
							{
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										value: <Not formattable>
									""");
							}
						}
						else
						{
							this.Expectations.WasExceptionThrown = true;
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									value: <Not formattable>
								""");
						}
					}
					
					private global::ISpecialTypesCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::ISpecialTypesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::ISpecialTypesCreateExpectations.Adornments.AdornmentsForHandler0 Use(global::Rocks.Projections.ArgIteratorArgument @value)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@value);
						
						var @handler = new global::ISpecialTypesCreateExpectations.Handler0
						{
							@value = @value,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::ISpecialTypesCreateExpectations Expectations { get; }
				}
				
				internal global::ISpecialTypesCreateExpectations.MethodExpectations Methods { get; }
				
				public ISpecialTypesCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::ISpecialTypes Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForISpecialTypes<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForISpecialTypes<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::ISpecialTypesCreateExpectations.Handler0, global::ISpecialTypesCreateExpectations.Handler0.CallbackForHandler>, IAdornmentsForISpecialTypes<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::ISpecialTypesCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ISpecialTypesMakeExpectations
			{
				internal global::ISpecialTypes Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock()
					{
					}
					
					public void Use(global::System.ArgIterator @value)
					{
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		var projectionGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			using System;
			using System.ComponentModel;
			
			#nullable enable
			
			namespace Rocks.Projections;
			
			internal delegate bool ArgIteratorArgumentEvaluation(global::System.ArgIterator @value);
			
			internal sealed class ArgIteratorArgument
				: Argument
			{
				private readonly ArgIteratorArgumentEvaluation? evaluation;
				private readonly ValidationState validation;
			
				internal ArgIteratorArgument() => this.validation = ValidationState.None;
			
				internal ArgIteratorArgument(ArgIteratorArgumentEvaluation @evaluation)
				{
					this.evaluation = @evaluation;
					this.validation = ValidationState.Evaluation;
				}
			
				public bool IsValid(global::System.ArgIterator @value) =>
					this.validation switch
					{
						ValidationState.None => true,
						ValidationState.Evaluation => this.evaluation!(@value),
						ValidationState.DefaultValue => throw new NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
						_ => throw new InvalidEnumArgumentException($"Invalid value for validation: {this.validation}")
					};
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("ISpecialTypes_Rock_Create.g.cs", createGeneratedCode),
				("ISpecialTypes_Rock_Make.g.cs", makeGeneratedCode),
				("System.ArgIterator_Projection.g.cs", projectionGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithRuntimeArgumentHandleAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(ISpecialTypes), BuildType.Create | BuildType.Make)]

			public interface ISpecialTypes
			{
				void Use(RuntimeArgumentHandle value);
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ISpecialTypesCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<Handler0.CallbackForHandler>
				{
					internal delegate void CallbackForHandler(global::System.RuntimeArgumentHandle @value);
					public global::Rocks.Projections.RuntimeArgumentHandleArgument @value { get; set; }
				}
				private global::Rocks.Handlers<global::ISpecialTypesCreateExpectations.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked && !this.WasExceptionThrown)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock(global::ISpecialTypesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public void Use(global::System.RuntimeArgumentHandle @value)
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@value.IsValid(@value!))
								{
									@foundMatch = true;
									@handler.CallCount++;
									@handler.Callback?.Invoke(@value!);
									break;
								}
							}
							
							if (!@foundMatch)
							{
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										value: <Not formattable>
									""");
							}
						}
						else
						{
							this.Expectations.WasExceptionThrown = true;
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									value: <Not formattable>
								""");
						}
					}
					
					private global::ISpecialTypesCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::ISpecialTypesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::ISpecialTypesCreateExpectations.Adornments.AdornmentsForHandler0 Use(global::Rocks.Projections.RuntimeArgumentHandleArgument @value)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@value);
						
						var @handler = new global::ISpecialTypesCreateExpectations.Handler0
						{
							@value = @value,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::ISpecialTypesCreateExpectations Expectations { get; }
				}
				
				internal global::ISpecialTypesCreateExpectations.MethodExpectations Methods { get; }
				
				public ISpecialTypesCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::ISpecialTypes Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForISpecialTypes<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForISpecialTypes<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::ISpecialTypesCreateExpectations.Handler0, global::ISpecialTypesCreateExpectations.Handler0.CallbackForHandler>, IAdornmentsForISpecialTypes<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::ISpecialTypesCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ISpecialTypesMakeExpectations
			{
				internal global::ISpecialTypes Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock()
					{
					}
					
					public void Use(global::System.RuntimeArgumentHandle @value)
					{
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		var projectionGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			using System;
			using System.ComponentModel;
			
			#nullable enable
			
			namespace Rocks.Projections;
			
			internal delegate bool RuntimeArgumentHandleArgumentEvaluation(global::System.RuntimeArgumentHandle @value);
			
			internal sealed class RuntimeArgumentHandleArgument
				: Argument
			{
				private readonly RuntimeArgumentHandleArgumentEvaluation? evaluation;
				private readonly ValidationState validation;
			
				internal RuntimeArgumentHandleArgument() => this.validation = ValidationState.None;
			
				internal RuntimeArgumentHandleArgument(RuntimeArgumentHandleArgumentEvaluation @evaluation)
				{
					this.evaluation = @evaluation;
					this.validation = ValidationState.Evaluation;
				}
			
				public bool IsValid(global::System.RuntimeArgumentHandle @value) =>
					this.validation switch
					{
						ValidationState.None => true,
						ValidationState.Evaluation => this.evaluation!(@value),
						ValidationState.DefaultValue => throw new NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
						_ => throw new InvalidEnumArgumentException($"Invalid value for validation: {this.validation}")
					};
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("ISpecialTypes_Rock_Create.g.cs", createGeneratedCode),
				("ISpecialTypes_Rock_Make.g.cs", makeGeneratedCode),
				("System.RuntimeArgumentHandle_Projection.g.cs", projectionGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithTypedReferenceAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(ISpecialTypes), BuildType.Create | BuildType.Make)]

			public interface ISpecialTypes
			{
				void Use(TypedReference value);
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ISpecialTypesCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<Handler0.CallbackForHandler>
				{
					internal delegate void CallbackForHandler(global::System.TypedReference @value);
					public global::Rocks.Projections.TypedReferenceArgument @value { get; set; }
				}
				private global::Rocks.Handlers<global::ISpecialTypesCreateExpectations.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked && !this.WasExceptionThrown)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock(global::ISpecialTypesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public void Use(global::System.TypedReference @value)
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@value.IsValid(@value!))
								{
									@foundMatch = true;
									@handler.CallCount++;
									@handler.Callback?.Invoke(@value!);
									break;
								}
							}
							
							if (!@foundMatch)
							{
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										value: <Not formattable>
									""");
							}
						}
						else
						{
							this.Expectations.WasExceptionThrown = true;
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									value: <Not formattable>
								""");
						}
					}
					
					private global::ISpecialTypesCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::ISpecialTypesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::ISpecialTypesCreateExpectations.Adornments.AdornmentsForHandler0 Use(global::Rocks.Projections.TypedReferenceArgument @value)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@value);
						
						var @handler = new global::ISpecialTypesCreateExpectations.Handler0
						{
							@value = @value,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::ISpecialTypesCreateExpectations Expectations { get; }
				}
				
				internal global::ISpecialTypesCreateExpectations.MethodExpectations Methods { get; }
				
				public ISpecialTypesCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::ISpecialTypes Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForISpecialTypes<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForISpecialTypes<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::ISpecialTypesCreateExpectations.Handler0, global::ISpecialTypesCreateExpectations.Handler0.CallbackForHandler>, IAdornmentsForISpecialTypes<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::ISpecialTypesCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ISpecialTypesMakeExpectations
			{
				internal global::ISpecialTypes Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock()
					{
					}
					
					public void Use(global::System.TypedReference @value)
					{
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		var projectionGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			using System;
			using System.ComponentModel;
			
			#nullable enable
			
			namespace Rocks.Projections;
			
			internal delegate bool TypedReferenceArgumentEvaluation(global::System.TypedReference @value);
			
			internal sealed class TypedReferenceArgument
				: Argument
			{
				private readonly TypedReferenceArgumentEvaluation? evaluation;
				private readonly ValidationState validation;
			
				internal TypedReferenceArgument() => this.validation = ValidationState.None;
			
				internal TypedReferenceArgument(TypedReferenceArgumentEvaluation @evaluation)
				{
					this.evaluation = @evaluation;
					this.validation = ValidationState.Evaluation;
				}
			
				public bool IsValid(global::System.TypedReference @value) =>
					this.validation switch
					{
						ValidationState.None => true,
						ValidationState.Evaluation => this.evaluation!(@value),
						ValidationState.DefaultValue => throw new NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
						_ => throw new InvalidEnumArgumentException($"Invalid value for validation: {this.validation}")
					};
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("ISpecialTypes_Rock_Create.g.cs", createGeneratedCode),
				("ISpecialTypes_Rock_Make.g.cs", makeGeneratedCode),
				("System.TypedReference_Projection.g.cs", projectionGeneratedCode)
			],
			[]);
	}
}