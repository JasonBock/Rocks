using NUnit.Framework;

namespace Rocks.Analysis.Tests.Generators;

public static class RefStructGeneratorTests
{
	[Test]
	public static async Task GenerateWithNonGenericRefStructAsync()
	{
		var code =
			"""
			using Rocks.Runtime;
			using System;

			[assembly: Rock(typeof(IAmNonGeneric), BuildType.Create | BuildType.Make)]

			public ref struct MyRefStruct { }
			
			public interface IAmNonGeneric
			{
				void Work(MyRefStruct data);
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IAmNonGenericCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Runtime.Handler<global::System.Action<global::MyRefStruct>>
				{
					public global::Rocks.Runtime.RefStructArgument<global::MyRefStruct> @data { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::IAmNonGenericCreateExpectations.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IAmNonGeneric
				{
					public Mock(global::IAmNonGenericCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0)]
					public void Work(global::MyRefStruct @data)
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@data.IsValid(@data!))
								{
									@foundMatch = true;
									@handler.CallCount++;
									@handler.Callback?.Invoke(@data!);
									break;
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										data: <Not formattable>
									""");
							}
						}
						else
						{
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									data: <Not formattable>
								""");
						}
					}
					
					private global::IAmNonGenericCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IAmNonGenericCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::IAmNonGenericCreateExpectations.Adornments.AdornmentsForHandler0 Work(global::Rocks.Runtime.RefStructArgument<global::MyRefStruct> @data)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::IAmNonGenericCreateExpectations.Handler0
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::IAmNonGenericCreateExpectations Expectations { get; }
				}
				
				internal global::IAmNonGenericCreateExpectations.MethodExpectations Methods { get; }
				
				internal IAmNonGenericCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IAmNonGeneric Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIAmNonGeneric<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIAmNonGeneric<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::IAmNonGenericCreateExpectations.Handler0, global::System.Action<global::MyRefStruct>>, IAdornmentsForIAmNonGeneric<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::IAmNonGenericCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IAmNonGenericMakeExpectations
			{
				internal global::IAmNonGeneric Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IAmNonGeneric
				{
					public Mock()
					{
					}
					
					public void Work(global::MyRefStruct @data)
					{
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IAmNonGeneric_Rock_Create.g.cs", createGeneratedCode),
				("IAmNonGeneric_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWhenDuplicateRefStructsTypesExistAsync()
	{
		var code =
			"""
			using Rocks.Runtime;
			using System;

			[assembly: Rock(typeof(IDuplicates), BuildType.Create | BuildType.Make)]
			
			public interface IDuplicates
			{
				void WorkA<TA>(Span<TA> data);
				void WorkB<TB>(Span<TB> data);
				void WorkInt(Span<int> data);
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IDuplicatesCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0<TA>
					: global::Rocks.Runtime.Handler<global::System.Action<global::System.Span<TA>>>
				{
					public global::Rocks.Runtime.RefStructArgument<global::System.Span<TA>> @data { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::Rocks.Runtime.Handler>? @handlers0;
				internal sealed class Handler1<TB>
					: global::Rocks.Runtime.Handler<global::System.Action<global::System.Span<TB>>>
				{
					public global::Rocks.Runtime.RefStructArgument<global::System.Span<TB>> @data { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::Rocks.Runtime.Handler>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Runtime.Handler<global::System.Action<global::System.Span<int>>>
				{
					public global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @data { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::IDuplicatesCreateExpectations.Handler2>? @handlers2;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IDuplicates
				{
					public Mock(global::IDuplicatesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0)]
					public void WorkA<TA>(global::System.Span<TA> @data)
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @genericHandler in this.Expectations.handlers0)
							{
								if (@genericHandler is global::IDuplicatesCreateExpectations.Handler0<TA> @handler)
								{
									if (@handler.@data.IsValid(@data!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(@data!);
										break;
									}
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										data: <Not formattable>
									""");
							}
						}
						else
						{
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									data: <Not formattable>
								""");
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(1)]
					public void WorkB<TB>(global::System.Span<TB> @data)
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @genericHandler in this.Expectations.handlers1)
							{
								if (@genericHandler is global::IDuplicatesCreateExpectations.Handler1<TB> @handler)
								{
									if (@handler.@data.IsValid(@data!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(@data!);
										break;
									}
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(1)}
										data: <Not formattable>
									""");
							}
						}
						else
						{
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(1)}
									data: <Not formattable>
								""");
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(2)]
					public void WorkInt(global::System.Span<int> @data)
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @handler in this.Expectations.handlers2)
							{
								if (@handler.@data.IsValid(@data!))
								{
									@foundMatch = true;
									@handler.CallCount++;
									@handler.Callback?.Invoke(@data!);
									break;
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(2)}
										data: <Not formattable>
									""");
							}
						}
						else
						{
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(2)}
									data: <Not formattable>
								""");
						}
					}
					
					private global::IDuplicatesCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IDuplicatesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::IDuplicatesCreateExpectations.Adornments.AdornmentsForHandler0<TA> WorkA<TA>(global::Rocks.Runtime.RefStructArgument<global::System.Span<TA>> @data)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::IDuplicatesCreateExpectations.Handler0<TA>
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal global::IDuplicatesCreateExpectations.Adornments.AdornmentsForHandler1<TB> WorkB<TB>(global::Rocks.Runtime.RefStructArgument<global::System.Span<TB>> @data)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::IDuplicatesCreateExpectations.Handler1<TB>
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
						else { this.Expectations.handlers1.Add(@handler); }
						return new(@handler);
					}
					
					internal global::IDuplicatesCreateExpectations.Adornments.AdornmentsForHandler2 WorkInt(global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @data)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::IDuplicatesCreateExpectations.Handler2
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(@handler); }
						else { this.Expectations.handlers2.Add(@handler); }
						return new(@handler);
					}
					
					private global::IDuplicatesCreateExpectations Expectations { get; }
				}
				
				internal global::IDuplicatesCreateExpectations.MethodExpectations Methods { get; }
				
				internal IDuplicatesCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IDuplicates Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIDuplicates<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIDuplicates<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0<TA>
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0<TA>, global::IDuplicatesCreateExpectations.Handler0<TA>, global::System.Action<global::System.Span<TA>>>, IAdornmentsForIDuplicates<AdornmentsForHandler0<TA>>
					{
						public AdornmentsForHandler0(global::IDuplicatesCreateExpectations.Handler0<TA> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1<TB>
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler1<TB>, global::IDuplicatesCreateExpectations.Handler1<TB>, global::System.Action<global::System.Span<TB>>>, IAdornmentsForIDuplicates<AdornmentsForHandler1<TB>>
					{
						public AdornmentsForHandler1(global::IDuplicatesCreateExpectations.Handler1<TB> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler2, global::IDuplicatesCreateExpectations.Handler2, global::System.Action<global::System.Span<int>>>, IAdornmentsForIDuplicates<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::IDuplicatesCreateExpectations.Handler2 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IDuplicatesMakeExpectations
			{
				internal global::IDuplicates Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IDuplicates
				{
					public Mock()
					{
					}
					
					public void WorkA<TA>(global::System.Span<TA> @data)
					{
					}
					public void WorkB<TB>(global::System.Span<TB> @data)
					{
					}
					public void WorkInt(global::System.Span<int> @data)
					{
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IDuplicates_Rock_Create.g.cs", createGeneratedCode),
				("IDuplicates_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWhenParameterIsScopedAsync()
	{
		var code =
			"""
			using Rocks.Runtime;
			using System;

			[assembly: Rock(typeof(ScopedParameter), BuildType.Create | BuildType.Make)]
			
			public abstract class ScopedParameter
			{
				public abstract Span<int> DoWorkWithSpanAndReturn(scoped Span<int> data);
				public abstract void DoWorkWithSpan(scoped Span<int> data);
				public abstract int DoWorkWithInt(scoped ref int data);
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ScopedParameterCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Runtime.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Runtime.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::ScopedParameterCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Runtime.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Runtime.Handlers<global::ScopedParameterCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Runtime.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Runtime.Handlers<global::ScopedParameterCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3
					: global::Rocks.Runtime.Handler<Handler3.CallbackForHandler, global::System.Func<global::System.Span<int>>>
				{
					internal delegate global::System.Span<int> CallbackForHandler(scoped global::System.Span<int> @data);
					public global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @data { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::ScopedParameterCreateExpectations.Handler3>? @handlers3;
				internal sealed class Handler4
					: global::Rocks.Runtime.Handler<Handler4.CallbackForHandler>
				{
					internal delegate void CallbackForHandler(scoped global::System.Span<int> @data);
					public global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @data { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::ScopedParameterCreateExpectations.Handler4>? @handlers4;
				internal sealed class Handler5
					: global::Rocks.Runtime.Handler<Handler5.CallbackForHandler, int>
				{
					internal delegate int CallbackForHandler(scoped ref int @data);
					public global::Rocks.Runtime.Argument<int> @data { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::ScopedParameterCreateExpectations.Handler5>? @handlers5;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
						if (this.handlers5 is not null) { failures.AddRange(this.Verify(this.handlers5, 5)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::ScopedParameter
				{
					public Mock(global::ScopedParameterCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(0)}
									obj: {@obj.FormatValue()}
								""");
						}
						else
						{
							return base.Equals(@obj: @obj!);
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(3)]
					public override global::System.Span<int> DoWorkWithSpanAndReturn(scoped global::System.Span<int> @data)
					{
						if (this.Expectations.handlers3 is not null)
						{
							foreach (var @handler in this.Expectations.handlers3)
							{
								if (@handler.@data.IsValid(@data!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@data!) : @handler.ReturnValue!();
									return @result!;
								}
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(3)}
									data: <Not formattable>
								""");
						}
						
						throw new global::Rocks.Runtime.Exceptions.ExpectationException(
							$"""
							No handlers were found for {this.GetType().GetMemberDescription(3)}
								data: <Not formattable>
							""");
					}
					
					[global::Rocks.Runtime.MemberIdentifier(4)]
					public override void DoWorkWithSpan(scoped global::System.Span<int> @data)
					{
						if (this.Expectations.handlers4 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @handler in this.Expectations.handlers4)
							{
								if (@handler.@data.IsValid(@data!))
								{
									@foundMatch = true;
									@handler.CallCount++;
									@handler.Callback?.Invoke(@data!);
									break;
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(4)}
										data: <Not formattable>
									""");
							}
						}
						else
						{
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(4)}
									data: <Not formattable>
								""");
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(5)]
					public override int DoWorkWithInt(scoped ref int @data)
					{
						if (this.Expectations.handlers5 is not null)
						{
							foreach (var @handler in this.Expectations.handlers5)
							{
								if (@handler.@data.IsValid(@data!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(ref @data!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(5)}
									data: {@data.FormatValue()}
								""");
						}
						
						throw new global::Rocks.Runtime.Exceptions.ExpectationException(
							$"""
							No handlers were found for {this.GetType().GetMemberDescription(5)}
								data: {@data.FormatValue()}
							""");
					}
					
					private global::ScopedParameterCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::ScopedParameterCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::ScopedParameterCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Runtime.Argument<object?> @obj)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::ScopedParameterCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::ScopedParameterCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::ScopedParameterCreateExpectations.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::ScopedParameterCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::ScopedParameterCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal global::ScopedParameterCreateExpectations.Adornments.AdornmentsForHandler3 DoWorkWithSpanAndReturn(global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @data)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::ScopedParameterCreateExpectations.Handler3
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(@handler); }
						else { this.Expectations.handlers3.Add(@handler); }
						return new(@handler);
					}
					
					internal global::ScopedParameterCreateExpectations.Adornments.AdornmentsForHandler4 DoWorkWithSpan(global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @data)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::ScopedParameterCreateExpectations.Handler4
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(@handler); }
						else { this.Expectations.handlers4.Add(@handler); }
						return new(@handler);
					}
					
					internal global::ScopedParameterCreateExpectations.Adornments.AdornmentsForHandler5 DoWorkWithInt(global::Rocks.Runtime.Argument<int> @data)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::ScopedParameterCreateExpectations.Handler5
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers5 is null) { this.Expectations.handlers5 = new(@handler); }
						else { this.Expectations.handlers5.Add(@handler); }
						return new(@handler);
					}
					
					private global::ScopedParameterCreateExpectations Expectations { get; }
				}
				
				internal global::ScopedParameterCreateExpectations.MethodExpectations Methods { get; }
				
				internal ScopedParameterCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::ScopedParameter Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForScopedParameter<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForScopedParameter<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::ScopedParameterCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForScopedParameter<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::ScopedParameterCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler1, global::ScopedParameterCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForScopedParameter<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::ScopedParameterCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler2, global::ScopedParameterCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForScopedParameter<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::ScopedParameterCreateExpectations.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler3, global::ScopedParameterCreateExpectations.Handler3, global::ScopedParameterCreateExpectations.Handler3.CallbackForHandler, global::System.Func<global::System.Span<int>>>, IAdornmentsForScopedParameter<AdornmentsForHandler3>
					{
						public AdornmentsForHandler3(global::ScopedParameterCreateExpectations.Handler3 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler4
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler4, global::ScopedParameterCreateExpectations.Handler4, global::ScopedParameterCreateExpectations.Handler4.CallbackForHandler>, IAdornmentsForScopedParameter<AdornmentsForHandler4>
					{
						public AdornmentsForHandler4(global::ScopedParameterCreateExpectations.Handler4 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler5
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler5, global::ScopedParameterCreateExpectations.Handler5, global::ScopedParameterCreateExpectations.Handler5.CallbackForHandler, int>, IAdornmentsForScopedParameter<AdornmentsForHandler5>
					{
						public AdornmentsForHandler5(global::ScopedParameterCreateExpectations.Handler5 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ScopedParameterMakeExpectations
			{
				internal global::ScopedParameter Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::ScopedParameter
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override global::System.Span<int> DoWorkWithSpanAndReturn(scoped global::System.Span<int> @data)
					{
						return default!;
					}
					public override void DoWorkWithSpan(scoped global::System.Span<int> @data)
					{
					}
					public override int DoWorkWithInt(scoped ref int @data)
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("ScopedParameter_Rock_Create.g.cs", createGeneratedCode),
				("ScopedParameter_Rock_Make.g.cs", makeGeneratedCode)       
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithOpenGenericsAsync()
	{
		var code =
			"""
			using Rocks.Runtime;
			using System;

			[assembly: Rock(typeof(IUseSpanWithOpenGeneric), BuildType.Create | BuildType.Make)]

			public interface IUseSpanWithOpenGeneric
			{
				 void From<TSourcePixel>(
					  ReadOnlySpan<TSourcePixel> sourcePixels)
					  where TSourcePixel : unmanaged;
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IUseSpanWithOpenGenericCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0<TSourcePixel>
					: global::Rocks.Runtime.Handler<global::System.Action<global::System.ReadOnlySpan<TSourcePixel>>>
					where TSourcePixel : unmanaged
				{
					public global::Rocks.Runtime.RefStructArgument<global::System.ReadOnlySpan<TSourcePixel>> @sourcePixels { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::Rocks.Runtime.Handler>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IUseSpanWithOpenGeneric
				{
					public Mock(global::IUseSpanWithOpenGenericCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0)]
					public void From<TSourcePixel>(global::System.ReadOnlySpan<TSourcePixel> @sourcePixels)
						where TSourcePixel : unmanaged
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @genericHandler in this.Expectations.handlers0)
							{
								if (@genericHandler is global::IUseSpanWithOpenGenericCreateExpectations.Handler0<TSourcePixel> @handler)
								{
									if (@handler.@sourcePixels.IsValid(@sourcePixels!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(@sourcePixels!);
										break;
									}
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										sourcePixels: <Not formattable>
									""");
							}
						}
						else
						{
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									sourcePixels: <Not formattable>
								""");
						}
					}
					
					private global::IUseSpanWithOpenGenericCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IUseSpanWithOpenGenericCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::IUseSpanWithOpenGenericCreateExpectations.Adornments.AdornmentsForHandler0<TSourcePixel> From<TSourcePixel>(global::Rocks.Runtime.RefStructArgument<global::System.ReadOnlySpan<TSourcePixel>> @sourcePixels) where TSourcePixel : unmanaged
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@sourcePixels);
						
						var @handler = new global::IUseSpanWithOpenGenericCreateExpectations.Handler0<TSourcePixel>
						{
							@sourcePixels = @sourcePixels,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::IUseSpanWithOpenGenericCreateExpectations Expectations { get; }
				}
				
				internal global::IUseSpanWithOpenGenericCreateExpectations.MethodExpectations Methods { get; }
				
				internal IUseSpanWithOpenGenericCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IUseSpanWithOpenGeneric Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIUseSpanWithOpenGeneric<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIUseSpanWithOpenGeneric<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0<TSourcePixel>
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0<TSourcePixel>, global::IUseSpanWithOpenGenericCreateExpectations.Handler0<TSourcePixel>, global::System.Action<global::System.ReadOnlySpan<TSourcePixel>>>, IAdornmentsForIUseSpanWithOpenGeneric<AdornmentsForHandler0<TSourcePixel>> where TSourcePixel : unmanaged
					{
						public AdornmentsForHandler0(global::IUseSpanWithOpenGenericCreateExpectations.Handler0<TSourcePixel> handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IUseSpanWithOpenGenericMakeExpectations
			{
				internal global::IUseSpanWithOpenGeneric Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IUseSpanWithOpenGeneric
				{
					public Mock()
					{
					}
					
					public void From<TSourcePixel>(global::System.ReadOnlySpan<TSourcePixel> @sourcePixels)
						where TSourcePixel : unmanaged
					{
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IUseSpanWithOpenGeneric_Rock_Create.g.cs", createGeneratedCode),
				("IUseSpanWithOpenGeneric_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithParameterAsync()
	{
		var code =
			"""
			using Rocks.Runtime;
			using System;

			[assembly: Rock(typeof(IHaveRefStruct), BuildType.Create | BuildType.Make)]

			public interface IHaveRefStruct
			{
				void RefStructParameter(Span<int> values);
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IHaveRefStructCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Runtime.Handler<global::System.Action<global::System.Span<int>>>
				{
					public global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @values { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::IHaveRefStructCreateExpectations.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock(global::IHaveRefStructCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0)]
					public void RefStructParameter(global::System.Span<int> @values)
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@values.IsValid(@values!))
								{
									@foundMatch = true;
									@handler.CallCount++;
									@handler.Callback?.Invoke(@values!);
									break;
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										values: <Not formattable>
									""");
							}
						}
						else
						{
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									values: <Not formattable>
								""");
						}
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IHaveRefStructCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::IHaveRefStructCreateExpectations.Adornments.AdornmentsForHandler0 RefStructParameter(global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @values)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@values);
						
						var @handler = new global::IHaveRefStructCreateExpectations.Handler0
						{
							@values = @values,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				
				internal global::IHaveRefStructCreateExpectations.MethodExpectations Methods { get; }
				
				internal IHaveRefStructCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IHaveRefStruct Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIHaveRefStruct<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIHaveRefStruct<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::IHaveRefStructCreateExpectations.Handler0, global::System.Action<global::System.Span<int>>>, IAdornmentsForIHaveRefStruct<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::IHaveRefStructCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IHaveRefStructMakeExpectations
			{
				internal global::IHaveRefStruct Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock()
					{
					}
					
					public void RefStructParameter(global::System.Span<int> @values)
					{
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IHaveRefStruct_Rock_Create.g.cs", createGeneratedCode),
				("IHaveRefStruct_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithResultAsync()
	{
		var code =
			"""
			using Rocks.Runtime;
			using System;

			[assembly: Rock(typeof(IHaveRefStruct), BuildType.Create | BuildType.Make)]

			public interface IHaveRefStruct
			{
				Span<int> RefStructReturn();
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IHaveRefStructCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Runtime.Handler<global::System.Func<global::System.Span<int>>, global::System.Func<global::System.Span<int>>>
				{ }
				private global::Rocks.Runtime.Handlers<global::IHaveRefStructCreateExpectations.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock(global::IHaveRefStructCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0)]
					public global::System.Span<int> RefStructReturn()
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @handler = this.Expectations.handlers0.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue!();
							return @result!;
						}
						
						throw new global::Rocks.Runtime.Exceptions.ExpectationException(
							$"""
							No handlers were found for {this.GetType().GetMemberDescription(0)}
							""");
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IHaveRefStructCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::IHaveRefStructCreateExpectations.Adornments.AdornmentsForHandler0 RefStructReturn()
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::IHaveRefStructCreateExpectations.Handler0();
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(handler); }
						else { this.Expectations.handlers0.Add(handler); }
						return new(handler);
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				
				internal global::IHaveRefStructCreateExpectations.MethodExpectations Methods { get; }
				
				internal IHaveRefStructCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IHaveRefStruct Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIHaveRefStruct<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIHaveRefStruct<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::IHaveRefStructCreateExpectations.Handler0, global::System.Func<global::System.Span<int>>, global::System.Func<global::System.Span<int>>>, IAdornmentsForIHaveRefStruct<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::IHaveRefStructCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IHaveRefStructMakeExpectations
			{
				internal global::IHaveRefStruct Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock()
					{
					}
					
					public global::System.Span<int> RefStructReturn()
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IHaveRefStruct_Rock_Create.g.cs", createGeneratedCode),
				("IHaveRefStruct_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithPropertyAsync()
	{
		var code =
			"""
			using Rocks.Runtime;
			using System;

			[assembly: Rock(typeof(IHaveRefStruct), BuildType.Create | BuildType.Make)]

			public interface IHaveRefStruct
			{
				Span<int> Data { get; set; }
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IHaveRefStructCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Runtime.Handler<global::System.Func<global::System.Span<int>>, global::System.Func<global::System.Span<int>>>
				{ }
				private global::Rocks.Runtime.Handlers<global::IHaveRefStructCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Runtime.Handler<global::System.Action<global::System.Span<int>>>
				{
					public global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::IHaveRefStructCreateExpectations.Handler1>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock(global::IHaveRefStructCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0, global::Rocks.Runtime.PropertyAccessor.Get)]
					[global::Rocks.Runtime.MemberIdentifier(1, global::Rocks.Runtime.PropertyAccessor.Set)]
					public global::System.Span<int> Data
					{
						get
						{
							if (this.Expectations.handlers0 is not null)
							{
								var @handler = this.Expectations.handlers0.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue!();
								return @result!;
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(0)}
								""");
						}
						set
						{
							if (this.Expectations.handlers1 is not null)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Runtime.Exceptions.ExpectationException(
												$"""
												No handlers match for {this.GetType().GetMemberDescription(1)}
													value: <Not formattable>
												""");
										}
										
										break;
									}
								}
							}
							else
							{
								throw new global::Rocks.Runtime.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers were found for {this.GetType().GetMemberDescription(1)}
										value: <Not formattable>
									""");
							}
						}
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertyGetterExpectations
					{
						internal PropertyGetterExpectations(global::IHaveRefStructCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::IHaveRefStructCreateExpectations.Adornments.AdornmentsForHandler0 Data()
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::IHaveRefStructCreateExpectations.Handler0();
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(handler); }
							else { this.Expectations.handlers0.Add(handler); }
							return new(handler);
						}
						private global::IHaveRefStructCreateExpectations Expectations { get; }
					}
					
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::IHaveRefStructCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::IHaveRefStructCreateExpectations.Adornments.AdornmentsForHandler1 Data(global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @value)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::IHaveRefStructCreateExpectations.Handler1
							{
								value = @value,
							};
						
							if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
							else { this.Expectations.handlers1.Add(handler); }
							return new(handler);
						}
						private global::IHaveRefStructCreateExpectations Expectations { get; }
					}
					
					internal PropertyExpectations(global::IHaveRefStructCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::IHaveRefStructCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
					internal global::IHaveRefStructCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				
				internal global::IHaveRefStructCreateExpectations.PropertyExpectations Properties { get; }
				
				internal IHaveRefStructCreateExpectations() =>
					(this.Properties) = (new(this));
				
				internal global::IHaveRefStruct Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIHaveRefStruct<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIHaveRefStruct<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::IHaveRefStructCreateExpectations.Handler0, global::System.Func<global::System.Span<int>>, global::System.Func<global::System.Span<int>>>, IAdornmentsForIHaveRefStruct<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::IHaveRefStructCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler1, global::IHaveRefStructCreateExpectations.Handler1, global::System.Action<global::System.Span<int>>>, IAdornmentsForIHaveRefStruct<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::IHaveRefStructCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IHaveRefStructMakeExpectations
			{
				internal global::IHaveRefStruct Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock()
					{
					}
					
					public global::System.Span<int> Data
					{
						get => default!;
						set { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IHaveRefStruct_Rock_Create.g.cs", createGeneratedCode),
				("IHaveRefStruct_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithIndexerArgumentAsync()
	{
		var code =
			"""
			using Rocks.Runtime;
			using System;

			[assembly: Rock(typeof(IHaveRefStruct), BuildType.Create | BuildType.Make)]

			public interface IHaveRefStruct
			{
				string this[Span<int> index] { get; set; }
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IHaveRefStructCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Runtime.Handler<global::System.Func<global::System.Span<int>, string>, string>
				{
					public global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @index { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::IHaveRefStructCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Runtime.Handler<global::System.Action<global::System.Span<int>, string>>
				{
					public global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @index { get; set; }
					public global::Rocks.Runtime.Argument<string> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::IHaveRefStructCreateExpectations.Handler1>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock(global::IHaveRefStructCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0, global::Rocks.Runtime.PropertyAccessor.Get)]
					[global::Rocks.Runtime.MemberIdentifier(1, global::Rocks.Runtime.PropertyAccessor.Set)]
					public string this[global::System.Span<int> @index]
					{
						get
						{
							if (this.Expectations.handlers0 is not null)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@index.IsValid(@index!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@index!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										index: <Not formattable>
									""");
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									index: <Not formattable>
								""");
						}
						set
						{
							if (this.Expectations.handlers1 is not null)
							{
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.@index.IsValid(@index!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@index!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(1)}
										index: <Not formattable>
										value: {@value.FormatValue()}
									""");
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(1)}
									index: <Not formattable>
									value: {@value.FormatValue()}
								""");
						}
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerGetterExpectations
					{
						internal IndexerGetterExpectations(global::IHaveRefStructCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::IHaveRefStructCreateExpectations.Adornments.AdornmentsForHandler0 This(global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @index)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							
							var @handler = new global::IHaveRefStructCreateExpectations.Handler0
							{
								@index = @index,
							};
							
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						private global::IHaveRefStructCreateExpectations Expectations { get; }
					}
					
					internal sealed class IndexerSetterExpectations
					{
						internal IndexerSetterExpectations(global::IHaveRefStructCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::IHaveRefStructCreateExpectations.Adornments.AdornmentsForHandler1 This(global::Rocks.Runtime.Argument<string> @value, global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @index)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var @handler = new global::IHaveRefStructCreateExpectations.Handler1
							{
								@index = @index,
								@value = @value,
							};
							
							if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
							else { this.Expectations.handlers1.Add(@handler); }
							return new(@handler);
						}
						private global::IHaveRefStructCreateExpectations Expectations { get; }
					}
					
					internal IndexerExpectations(global::IHaveRefStructCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::IHaveRefStructCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
					internal global::IHaveRefStructCreateExpectations.IndexerExpectations.IndexerSetterExpectations Setters { get; }
				}
				
				internal global::IHaveRefStructCreateExpectations.IndexerExpectations Indexers { get; }
				
				internal IHaveRefStructCreateExpectations() =>
					(this.Indexers) = (new(this));
				
				internal global::IHaveRefStruct Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIHaveRefStruct<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIHaveRefStruct<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::IHaveRefStructCreateExpectations.Handler0, global::System.Func<global::System.Span<int>, string>, string>, IAdornmentsForIHaveRefStruct<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::IHaveRefStructCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler1, global::IHaveRefStructCreateExpectations.Handler1, global::System.Action<global::System.Span<int>, string>>, IAdornmentsForIHaveRefStruct<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::IHaveRefStructCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IHaveRefStructMakeExpectations
			{
				internal global::IHaveRefStruct Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock()
					{
					}
					
					public string this[global::System.Span<int> @index]
					{
						get => default!;
						set { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IHaveRefStruct_Rock_Create.g.cs", createGeneratedCode),
				("IHaveRefStruct_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithIndexerReturnValueAsync()
	{
		var code =
			"""
			using Rocks.Runtime;
			using System;

			[assembly: Rock(typeof(IHaveRefStruct), BuildType.Create | BuildType.Make)]

			public interface IHaveRefStruct
			{
				Span<int> this[string index] { get; set; }
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IHaveRefStructCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Runtime.Handler<global::System.Func<string, global::System.Span<int>>, global::System.Func<global::System.Span<int>>>
				{
					public global::Rocks.Runtime.Argument<string> @index { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::IHaveRefStructCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Runtime.Handler<global::System.Action<string, global::System.Span<int>>>
				{
					public global::Rocks.Runtime.Argument<string> @index { get; set; }
					public global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::IHaveRefStructCreateExpectations.Handler1>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock(global::IHaveRefStructCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0, global::Rocks.Runtime.PropertyAccessor.Get)]
					[global::Rocks.Runtime.MemberIdentifier(1, global::Rocks.Runtime.PropertyAccessor.Set)]
					public global::System.Span<int> this[string @index]
					{
						get
						{
							if (this.Expectations.handlers0 is not null)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@index.IsValid(@index!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@index!) : @handler.ReturnValue!();
										return @result!;
									}
								}
								
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										index: {@index.FormatValue()}
									""");
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									index: {@index.FormatValue()}
								""");
						}
						set
						{
							if (this.Expectations.handlers1 is not null)
							{
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.@index.IsValid(@index!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@index!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(1)}
										index: {@index.FormatValue()}
										value: <Not formattable>
									""");
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(1)}
									index: {@index.FormatValue()}
									value: <Not formattable>
								""");
						}
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerGetterExpectations
					{
						internal IndexerGetterExpectations(global::IHaveRefStructCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::IHaveRefStructCreateExpectations.Adornments.AdornmentsForHandler0 This(global::Rocks.Runtime.Argument<string> @index)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							
							var @handler = new global::IHaveRefStructCreateExpectations.Handler0
							{
								@index = @index,
							};
							
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						private global::IHaveRefStructCreateExpectations Expectations { get; }
					}
					
					internal sealed class IndexerSetterExpectations
					{
						internal IndexerSetterExpectations(global::IHaveRefStructCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::IHaveRefStructCreateExpectations.Adornments.AdornmentsForHandler1 This(global::Rocks.Runtime.RefStructArgument<global::System.Span<int>> @value, global::Rocks.Runtime.Argument<string> @index)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var @handler = new global::IHaveRefStructCreateExpectations.Handler1
							{
								@index = @index,
								@value = @value,
							};
							
							if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
							else { this.Expectations.handlers1.Add(@handler); }
							return new(@handler);
						}
						private global::IHaveRefStructCreateExpectations Expectations { get; }
					}
					
					internal IndexerExpectations(global::IHaveRefStructCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::IHaveRefStructCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
					internal global::IHaveRefStructCreateExpectations.IndexerExpectations.IndexerSetterExpectations Setters { get; }
				}
				
				internal global::IHaveRefStructCreateExpectations.IndexerExpectations Indexers { get; }
				
				internal IHaveRefStructCreateExpectations() =>
					(this.Indexers) = (new(this));
				
				internal global::IHaveRefStruct Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIHaveRefStruct<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIHaveRefStruct<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::IHaveRefStructCreateExpectations.Handler0, global::System.Func<string, global::System.Span<int>>, global::System.Func<global::System.Span<int>>>, IAdornmentsForIHaveRefStruct<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::IHaveRefStructCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler1, global::IHaveRefStructCreateExpectations.Handler1, global::System.Action<string, global::System.Span<int>>>, IAdornmentsForIHaveRefStruct<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::IHaveRefStructCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IHaveRefStructMakeExpectations
			{
				internal global::IHaveRefStruct Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock()
					{
					}
					
					public global::System.Span<int> this[string @index]
					{
						get => default!;
						set { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IHaveRefStruct_Rock_Create.g.cs", createGeneratedCode),
				("IHaveRefStruct_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}
}