using NUnit.Framework;

namespace Rocks.Analysis.Tests.Generators;

public static class PropertyGeneratorTests
{
	[Test]
	public static async Task GenerateWithNewDefinitionAsync()
	{
		var code =
			"""
			using Rocks.Runtime;

			[assembly: Rock(typeof(IMessagePublishTopologyConfigurator), BuildType.Create | BuildType.Make)]

			public interface IMessagePublishTopology
			{
				bool Exclude { get; }
			}

			public interface IMessagePublishTopologyConfigurator :
				IMessagePublishTopology
			{
				new bool Exclude { set; }
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IMessagePublishTopologyConfiguratorCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Runtime.Handler<global::System.Action<bool>>
				{
					public global::Rocks.Runtime.Argument<bool> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Runtime.Handler<global::System.Func<bool>, bool>
				{ }
				private global::Rocks.Runtime.Handlers<global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler1>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IMessagePublishTopologyConfigurator
				{
					public Mock(global::IMessagePublishTopologyConfiguratorCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0, global::Rocks.Runtime.PropertyAccessor.Set)]
					public bool Exclude
					{
						set
						{
							if (this.Expectations.handlers0 is not null)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Runtime.Exceptions.ExpectationException(
												$"""
												No handlers match for {this.GetType().GetMemberDescription(0)}
													value: {@value.FormatValue()}
												""");
										}
										
										break;
									}
								}
							}
							else
							{
								throw new global::Rocks.Runtime.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers were found for {this.GetType().GetMemberDescription(0)}
										value: {@value.FormatValue()}
									""");
							}
						}
					}
					[global::Rocks.Runtime.MemberIdentifier(1, global::Rocks.Runtime.PropertyAccessor.Get)]
					bool global::IMessagePublishTopology.Exclude
					{
						get
						{
							if (this.Expectations.handlers1 is not null)
							{
								var @handler = this.Expectations.handlers1.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(1)}
								""");
						}
					}
					
					private global::IMessagePublishTopologyConfiguratorCreateExpectations Expectations { get; }
				}
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::IMessagePublishTopologyConfiguratorCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::IMessagePublishTopologyConfiguratorCreateExpectations.Adornments.AdornmentsForHandler0 Exclude(global::Rocks.Runtime.Argument<bool> @value)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler0
							{
								value = @value,
							};
						
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(handler); }
							else { this.Expectations.handlers0.Add(handler); }
							return new(handler);
						}
						private global::IMessagePublishTopologyConfiguratorCreateExpectations Expectations { get; }
					}
					
					internal PropertyExpectations(global::IMessagePublishTopologyConfiguratorCreateExpectations expectations) =>
						(this.Setters) = (new(expectations));
					
					internal global::IMessagePublishTopologyConfiguratorCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				internal sealed class ExplicitPropertyExpectationsForIMessagePublishTopology
				{
					internal sealed class ExplicitPropertyGetterExpectationsForIMessagePublishTopology
					{
						internal ExplicitPropertyGetterExpectationsForIMessagePublishTopology(global::IMessagePublishTopologyConfiguratorCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::IMessagePublishTopologyConfiguratorCreateExpectations.Adornments.AdornmentsForHandler1 Exclude()
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler1();
							if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
							else { this.Expectations.handlers1.Add(handler); }
							return new(handler);
						}
						private global::IMessagePublishTopologyConfiguratorCreateExpectations Expectations { get; }
					}
					
					internal ExplicitPropertyExpectationsForIMessagePublishTopology(global::IMessagePublishTopologyConfiguratorCreateExpectations expectations) =>
						(this.Getters) = (new(expectations));
					
					internal global::IMessagePublishTopologyConfiguratorCreateExpectations.ExplicitPropertyExpectationsForIMessagePublishTopology.ExplicitPropertyGetterExpectationsForIMessagePublishTopology Getters { get; }
				}
				
				internal global::IMessagePublishTopologyConfiguratorCreateExpectations.PropertyExpectations Properties { get; }
				internal global::IMessagePublishTopologyConfiguratorCreateExpectations.ExplicitPropertyExpectationsForIMessagePublishTopology ExplicitPropertiesForIMessagePublishTopology { get; }
				
				internal IMessagePublishTopologyConfiguratorCreateExpectations() =>
					(this.Properties, this.ExplicitPropertiesForIMessagePublishTopology) = (new(this), new(this));
				
				internal global::IMessagePublishTopologyConfigurator Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIMessagePublishTopologyConfigurator<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIMessagePublishTopologyConfigurator<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler0, global::System.Action<bool>>, IAdornmentsForIMessagePublishTopologyConfigurator<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler1, global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler1, global::System.Func<bool>, bool>, IAdornmentsForIMessagePublishTopologyConfigurator<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IMessagePublishTopologyConfiguratorMakeExpectations
			{
				internal global::IMessagePublishTopologyConfigurator Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IMessagePublishTopologyConfigurator
				{
					public Mock()
					{
					}
					
					public bool Exclude
					{
						set { }
					}
					bool global::IMessagePublishTopology.Exclude
					{
						get => default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IMessagePublishTopologyConfigurator_Rock_Create.g.cs", createGeneratedCode),
				("IMessagePublishTopologyConfigurator_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithMultiplePrivatePublicPropertyAsync()
	{
		var code =
			"""
			using System;
			using Rocks.Runtime;

			[assembly: Rock(typeof(PrivatePublicProperties), BuildType.Create | BuildType.Make)]

			#nullable enable

			public class PrivatePublicProperties
			{
				public virtual string? PrivateGetPublicSet1 { private get; set; }
				public virtual string? PrivateGetPublicSet2 { private get; set; }
				public virtual string? PrivateGetPublicSet3 { private get; set; }
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class PrivatePublicPropertiesCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Runtime.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Runtime.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::PrivatePublicPropertiesCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Runtime.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Runtime.Handlers<global::PrivatePublicPropertiesCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Runtime.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Runtime.Handlers<global::PrivatePublicPropertiesCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3
					: global::Rocks.Runtime.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Runtime.Argument<string?> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::PrivatePublicPropertiesCreateExpectations.Handler3>? @handlers3;
				internal sealed class Handler5
					: global::Rocks.Runtime.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Runtime.Argument<string?> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::PrivatePublicPropertiesCreateExpectations.Handler5>? @handlers5;
				internal sealed class Handler7
					: global::Rocks.Runtime.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Runtime.Argument<string?> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::PrivatePublicPropertiesCreateExpectations.Handler7>? @handlers7;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers5 is not null) { failures.AddRange(this.Verify(this.handlers5, 5)); }
						if (this.handlers7 is not null) { failures.AddRange(this.Verify(this.handlers7, 7)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::PrivatePublicProperties
				{
					public Mock(global::PrivatePublicPropertiesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(0)}
									obj: {@obj.FormatValue()}
								""");
						}
						else
						{
							return base.Equals(@obj: @obj!);
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(3, global::Rocks.Runtime.PropertyAccessor.Set)]
					public override string? PrivateGetPublicSet1
					{
						set
						{
							if (this.Expectations.handlers3 is not null)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers3)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Runtime.Exceptions.ExpectationException(
												$"""
												No handlers match for {this.GetType().GetMemberDescription(3)}
													value: {@value.FormatValue()}
												""");
										}
										
										break;
									}
								}
							}
							else
							{
								base.PrivateGetPublicSet1 = value!;
							}
						}
					}
					[global::Rocks.Runtime.MemberIdentifier(5, global::Rocks.Runtime.PropertyAccessor.Set)]
					public override string? PrivateGetPublicSet2
					{
						set
						{
							if (this.Expectations.handlers5 is not null)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers5)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Runtime.Exceptions.ExpectationException(
												$"""
												No handlers match for {this.GetType().GetMemberDescription(5)}
													value: {@value.FormatValue()}
												""");
										}
										
										break;
									}
								}
							}
							else
							{
								base.PrivateGetPublicSet2 = value!;
							}
						}
					}
					[global::Rocks.Runtime.MemberIdentifier(7, global::Rocks.Runtime.PropertyAccessor.Set)]
					public override string? PrivateGetPublicSet3
					{
						set
						{
							if (this.Expectations.handlers7 is not null)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers7)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Runtime.Exceptions.ExpectationException(
												$"""
												No handlers match for {this.GetType().GetMemberDescription(7)}
													value: {@value.FormatValue()}
												""");
										}
										
										break;
									}
								}
							}
							else
							{
								base.PrivateGetPublicSet3 = value!;
							}
						}
					}
					
					private global::PrivatePublicPropertiesCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::PrivatePublicPropertiesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::PrivatePublicPropertiesCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Runtime.Argument<object?> @obj)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::PrivatePublicPropertiesCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::PrivatePublicPropertiesCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::PrivatePublicPropertiesCreateExpectations.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::PrivatePublicPropertiesCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::PrivatePublicPropertiesCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					private global::PrivatePublicPropertiesCreateExpectations Expectations { get; }
				}
				
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::PrivatePublicPropertiesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::PrivatePublicPropertiesCreateExpectations.Adornments.AdornmentsForHandler3 PrivateGetPublicSet1(global::Rocks.Runtime.Argument<string?> @value)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::PrivatePublicPropertiesCreateExpectations.Handler3
							{
								value = @value,
							};
						
							if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
							else { this.Expectations.handlers3.Add(handler); }
							return new(handler);
						}
						internal global::PrivatePublicPropertiesCreateExpectations.Adornments.AdornmentsForHandler5 PrivateGetPublicSet2(global::Rocks.Runtime.Argument<string?> @value)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::PrivatePublicPropertiesCreateExpectations.Handler5
							{
								value = @value,
							};
						
							if (this.Expectations.handlers5 is null) { this.Expectations.handlers5 = new(handler); }
							else { this.Expectations.handlers5.Add(handler); }
							return new(handler);
						}
						internal global::PrivatePublicPropertiesCreateExpectations.Adornments.AdornmentsForHandler7 PrivateGetPublicSet3(global::Rocks.Runtime.Argument<string?> @value)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::PrivatePublicPropertiesCreateExpectations.Handler7
							{
								value = @value,
							};
						
							if (this.Expectations.handlers7 is null) { this.Expectations.handlers7 = new(handler); }
							else { this.Expectations.handlers7.Add(handler); }
							return new(handler);
						}
						private global::PrivatePublicPropertiesCreateExpectations Expectations { get; }
					}
					
					internal PropertyExpectations(global::PrivatePublicPropertiesCreateExpectations expectations) =>
						(this.Setters) = (new(expectations));
					
					internal global::PrivatePublicPropertiesCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				
				internal global::PrivatePublicPropertiesCreateExpectations.MethodExpectations Methods { get; }
				internal global::PrivatePublicPropertiesCreateExpectations.PropertyExpectations Properties { get; }
				
				internal PrivatePublicPropertiesCreateExpectations() =>
					(this.Methods, this.Properties) = (new(this), new(this));
				
				internal global::PrivatePublicProperties Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForPrivatePublicProperties<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForPrivatePublicProperties<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::PrivatePublicPropertiesCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForPrivatePublicProperties<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::PrivatePublicPropertiesCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler1, global::PrivatePublicPropertiesCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForPrivatePublicProperties<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::PrivatePublicPropertiesCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler2, global::PrivatePublicPropertiesCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForPrivatePublicProperties<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::PrivatePublicPropertiesCreateExpectations.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler3, global::PrivatePublicPropertiesCreateExpectations.Handler3, global::System.Action<string?>>, IAdornmentsForPrivatePublicProperties<AdornmentsForHandler3>
					{
						public AdornmentsForHandler3(global::PrivatePublicPropertiesCreateExpectations.Handler3 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler5
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler5, global::PrivatePublicPropertiesCreateExpectations.Handler5, global::System.Action<string?>>, IAdornmentsForPrivatePublicProperties<AdornmentsForHandler5>
					{
						public AdornmentsForHandler5(global::PrivatePublicPropertiesCreateExpectations.Handler5 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler7
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler7, global::PrivatePublicPropertiesCreateExpectations.Handler7, global::System.Action<string?>>, IAdornmentsForPrivatePublicProperties<AdornmentsForHandler7>
					{
						public AdornmentsForHandler7(global::PrivatePublicPropertiesCreateExpectations.Handler7 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class PrivatePublicPropertiesMakeExpectations
			{
				internal global::PrivatePublicProperties Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::PrivatePublicProperties
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override string? PrivateGetPublicSet1
					{
						set { }
					}
					public override string? PrivateGetPublicSet2
					{
						set { }
					}
					public override string? PrivateGetPublicSet3
					{
						set { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("PrivatePublicProperties_Rock_Create.g.cs", createGeneratedCode),
				("PrivatePublicProperties_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task CreateWithPrivatePublicPropertyAsync()
	{
		var code =
			"""
			using System;
			using Rocks.Runtime;

			[assembly: Rock(typeof(PrivatePublicProperty), BuildType.Create | BuildType.Make)]

			#nullable enable

			public class PrivatePublicProperty
			{
				public virtual string? PrivateGetPublicSet { private get; set; }
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class PrivatePublicPropertyCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Runtime.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Runtime.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::PrivatePublicPropertyCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Runtime.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Runtime.Handlers<global::PrivatePublicPropertyCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Runtime.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Runtime.Handlers<global::PrivatePublicPropertyCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3
					: global::Rocks.Runtime.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Runtime.Argument<string?> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::PrivatePublicPropertyCreateExpectations.Handler3>? @handlers3;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::PrivatePublicProperty
				{
					public Mock(global::PrivatePublicPropertyCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(0)}
									obj: {@obj.FormatValue()}
								""");
						}
						else
						{
							return base.Equals(@obj: @obj!);
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(3, global::Rocks.Runtime.PropertyAccessor.Set)]
					public override string? PrivateGetPublicSet
					{
						set
						{
							if (this.Expectations.handlers3 is not null)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers3)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Runtime.Exceptions.ExpectationException(
												$"""
												No handlers match for {this.GetType().GetMemberDescription(3)}
													value: {@value.FormatValue()}
												""");
										}
										
										break;
									}
								}
							}
							else
							{
								base.PrivateGetPublicSet = value!;
							}
						}
					}
					
					private global::PrivatePublicPropertyCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::PrivatePublicPropertyCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::PrivatePublicPropertyCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Runtime.Argument<object?> @obj)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::PrivatePublicPropertyCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::PrivatePublicPropertyCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::PrivatePublicPropertyCreateExpectations.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::PrivatePublicPropertyCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::PrivatePublicPropertyCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					private global::PrivatePublicPropertyCreateExpectations Expectations { get; }
				}
				
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::PrivatePublicPropertyCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::PrivatePublicPropertyCreateExpectations.Adornments.AdornmentsForHandler3 PrivateGetPublicSet(global::Rocks.Runtime.Argument<string?> @value)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::PrivatePublicPropertyCreateExpectations.Handler3
							{
								value = @value,
							};
						
							if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
							else { this.Expectations.handlers3.Add(handler); }
							return new(handler);
						}
						private global::PrivatePublicPropertyCreateExpectations Expectations { get; }
					}
					
					internal PropertyExpectations(global::PrivatePublicPropertyCreateExpectations expectations) =>
						(this.Setters) = (new(expectations));
					
					internal global::PrivatePublicPropertyCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				
				internal global::PrivatePublicPropertyCreateExpectations.MethodExpectations Methods { get; }
				internal global::PrivatePublicPropertyCreateExpectations.PropertyExpectations Properties { get; }
				
				internal PrivatePublicPropertyCreateExpectations() =>
					(this.Methods, this.Properties) = (new(this), new(this));
				
				internal global::PrivatePublicProperty Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForPrivatePublicProperty<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForPrivatePublicProperty<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::PrivatePublicPropertyCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForPrivatePublicProperty<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::PrivatePublicPropertyCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler1, global::PrivatePublicPropertyCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForPrivatePublicProperty<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::PrivatePublicPropertyCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler2, global::PrivatePublicPropertyCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForPrivatePublicProperty<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::PrivatePublicPropertyCreateExpectations.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler3, global::PrivatePublicPropertyCreateExpectations.Handler3, global::System.Action<string?>>, IAdornmentsForPrivatePublicProperty<AdornmentsForHandler3>
					{
						public AdornmentsForHandler3(global::PrivatePublicPropertyCreateExpectations.Handler3 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class PrivatePublicPropertyMakeExpectations
			{
				internal global::PrivatePublicProperty Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::PrivatePublicProperty
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override string? PrivateGetPublicSet
					{
						set { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("PrivatePublicProperty_Rock_Create.g.cs", createGeneratedCode),
				("PrivatePublicProperty_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithMixedIndexerVisibilityAsync()
	{
		var code =
			"""
			using System;
			using Rocks.Runtime;

			[assembly: Rock(typeof(MixedIndexers), BuildType.Create | BuildType.Make)]

			#nullable enable

			public class MixedIndexers
			{
				public virtual string? this[int index] { get => string.Empty; private set { } }
				public virtual string? this[long index] { get => string.Empty; protected set { } }
				public virtual string? this[Guid index] { private get => string.Empty; set { } }
				public virtual string? this[string index] { protected get => string.Empty; set { } }
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class MixedIndexersCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Runtime.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Runtime.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::MixedIndexersCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Runtime.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Runtime.Handlers<global::MixedIndexersCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Runtime.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Runtime.Handlers<global::MixedIndexersCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3
					: global::Rocks.Runtime.Handler<global::System.Func<int, string?>, string?>
				{
					public global::Rocks.Runtime.Argument<int> @index { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::MixedIndexersCreateExpectations.Handler3>? @handlers3;
				internal sealed class Handler5
					: global::Rocks.Runtime.Handler<global::System.Func<long, string?>, string?>
				{
					public global::Rocks.Runtime.Argument<long> @index { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::MixedIndexersCreateExpectations.Handler5>? @handlers5;
				internal sealed class Handler6
					: global::Rocks.Runtime.Handler<global::System.Action<long, string?>>
				{
					public global::Rocks.Runtime.Argument<long> @index { get; set; }
					public global::Rocks.Runtime.Argument<string?> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::MixedIndexersCreateExpectations.Handler6>? @handlers6;
				internal sealed class Handler7
					: global::Rocks.Runtime.Handler<global::System.Action<global::System.Guid, string?>>
				{
					public global::Rocks.Runtime.Argument<global::System.Guid> @index { get; set; }
					public global::Rocks.Runtime.Argument<string?> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::MixedIndexersCreateExpectations.Handler7>? @handlers7;
				internal sealed class Handler9
					: global::Rocks.Runtime.Handler<global::System.Func<string, string?>, string?>
				{
					public global::Rocks.Runtime.Argument<string> @index { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::MixedIndexersCreateExpectations.Handler9>? @handlers9;
				internal sealed class Handler10
					: global::Rocks.Runtime.Handler<global::System.Action<string, string?>>
				{
					public global::Rocks.Runtime.Argument<string> @index { get; set; }
					public global::Rocks.Runtime.Argument<string?> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::MixedIndexersCreateExpectations.Handler10>? @handlers10;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers5 is not null) { failures.AddRange(this.Verify(this.handlers5, 5)); }
						if (this.handlers6 is not null) { failures.AddRange(this.Verify(this.handlers6, 6)); }
						if (this.handlers7 is not null) { failures.AddRange(this.Verify(this.handlers7, 7)); }
						if (this.handlers9 is not null) { failures.AddRange(this.Verify(this.handlers9, 9)); }
						if (this.handlers10 is not null) { failures.AddRange(this.Verify(this.handlers10, 10)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::MixedIndexers
				{
					public Mock(global::MixedIndexersCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(0)}
									obj: {@obj.FormatValue()}
								""");
						}
						else
						{
							return base.Equals(@obj: @obj!);
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(3, global::Rocks.Runtime.PropertyAccessor.Get)]
					public override string? this[int @index]
					{
						get
						{
							if (this.Expectations.handlers3 is not null)
							{
								foreach (var @handler in this.Expectations.handlers3)
								{
									if (@handler.@index.IsValid(@index!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@index!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(3)}
										index: {@index.FormatValue()}
									""");
							}
							else
							{
								return base[@index: @index!];
							}
						}
					}
					[global::Rocks.Runtime.MemberIdentifier(5, global::Rocks.Runtime.PropertyAccessor.Get)]
					[global::Rocks.Runtime.MemberIdentifier(6, global::Rocks.Runtime.PropertyAccessor.Set)]
					public override string? this[long @index]
					{
						get
						{
							if (this.Expectations.handlers5 is not null)
							{
								foreach (var @handler in this.Expectations.handlers5)
								{
									if (@handler.@index.IsValid(@index!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@index!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(5)}
										index: {@index.FormatValue()}
									""");
							}
							else
							{
								return base[@index: @index!];
							}
						}
						protected set
						{
							if (this.Expectations.handlers6 is not null)
							{
								foreach (var @handler in this.Expectations.handlers6)
								{
									if (@handler.@index.IsValid(@index!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@index!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(6)}
										index: {@index.FormatValue()}
										value: {@value.FormatValue()}
									""");
							}
							else
							{
								base[@index: @index!] = @value!;
							}
						}
					}
					[global::Rocks.Runtime.MemberIdentifier(7, global::Rocks.Runtime.PropertyAccessor.Set)]
					public override string? this[global::System.Guid @index]
					{
						set
						{
							if (this.Expectations.handlers7 is not null)
							{
								foreach (var @handler in this.Expectations.handlers7)
								{
									if (@handler.@index.IsValid(@index!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@index!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(7)}
										index: {@index.FormatValue()}
										value: {@value.FormatValue()}
									""");
							}
							else
							{
								base[@index: @index!] = @value!;
							}
						}
					}
					[global::Rocks.Runtime.MemberIdentifier(9, global::Rocks.Runtime.PropertyAccessor.Get)]
					[global::Rocks.Runtime.MemberIdentifier(10, global::Rocks.Runtime.PropertyAccessor.Set)]
					public override string? this[string @index]
					{
						protected get
						{
							if (this.Expectations.handlers9 is not null)
							{
								foreach (var @handler in this.Expectations.handlers9)
								{
									if (@handler.@index.IsValid(@index!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@index!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(9)}
										index: {@index.FormatValue()}
									""");
							}
							else
							{
								return base[@index: @index!];
							}
						}
						set
						{
							if (this.Expectations.handlers10 is not null)
							{
								foreach (var @handler in this.Expectations.handlers10)
								{
									if (@handler.@index.IsValid(@index!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@index!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Runtime.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(10)}
										index: {@index.FormatValue()}
										value: {@value.FormatValue()}
									""");
							}
							else
							{
								base[@index: @index!] = @value!;
							}
						}
					}
					
					private global::MixedIndexersCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::MixedIndexersCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::MixedIndexersCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Runtime.Argument<object?> @obj)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::MixedIndexersCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::MixedIndexersCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::MixedIndexersCreateExpectations.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::MixedIndexersCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::MixedIndexersCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					private global::MixedIndexersCreateExpectations Expectations { get; }
				}
				
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerGetterExpectations
					{
						internal IndexerGetterExpectations(global::MixedIndexersCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::MixedIndexersCreateExpectations.Adornments.AdornmentsForHandler3 This(global::Rocks.Runtime.Argument<int> @index)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							
							var @handler = new global::MixedIndexersCreateExpectations.Handler3
							{
								@index = @index,
							};
							
							if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(@handler); }
							else { this.Expectations.handlers3.Add(@handler); }
							return new(@handler);
						}
						internal global::MixedIndexersCreateExpectations.Adornments.AdornmentsForHandler5 This(global::Rocks.Runtime.Argument<long> @index)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							
							var @handler = new global::MixedIndexersCreateExpectations.Handler5
							{
								@index = @index,
							};
							
							if (this.Expectations.handlers5 is null) { this.Expectations.handlers5 = new(@handler); }
							else { this.Expectations.handlers5.Add(@handler); }
							return new(@handler);
						}
						internal global::MixedIndexersCreateExpectations.Adornments.AdornmentsForHandler9 This(global::Rocks.Runtime.Argument<string> @index)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							
							var @handler = new global::MixedIndexersCreateExpectations.Handler9
							{
								@index = @index,
							};
							
							if (this.Expectations.handlers9 is null) { this.Expectations.handlers9 = new(@handler); }
							else { this.Expectations.handlers9.Add(@handler); }
							return new(@handler);
						}
						private global::MixedIndexersCreateExpectations Expectations { get; }
					}
					
					internal sealed class IndexerSetterExpectations
					{
						internal IndexerSetterExpectations(global::MixedIndexersCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::MixedIndexersCreateExpectations.Adornments.AdornmentsForHandler6 This(global::Rocks.Runtime.Argument<string?> @value, global::Rocks.Runtime.Argument<long> @index)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var @handler = new global::MixedIndexersCreateExpectations.Handler6
							{
								@index = @index,
								@value = @value,
							};
							
							if (this.Expectations.handlers6 is null) { this.Expectations.handlers6 = new(@handler); }
							else { this.Expectations.handlers6.Add(@handler); }
							return new(@handler);
						}
						internal global::MixedIndexersCreateExpectations.Adornments.AdornmentsForHandler7 This(global::Rocks.Runtime.Argument<string?> @value, global::Rocks.Runtime.Argument<global::System.Guid> @index)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var @handler = new global::MixedIndexersCreateExpectations.Handler7
							{
								@index = @index,
								@value = @value,
							};
							
							if (this.Expectations.handlers7 is null) { this.Expectations.handlers7 = new(@handler); }
							else { this.Expectations.handlers7.Add(@handler); }
							return new(@handler);
						}
						internal global::MixedIndexersCreateExpectations.Adornments.AdornmentsForHandler10 This(global::Rocks.Runtime.Argument<string?> @value, global::Rocks.Runtime.Argument<string> @index)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var @handler = new global::MixedIndexersCreateExpectations.Handler10
							{
								@index = @index,
								@value = @value,
							};
							
							if (this.Expectations.handlers10 is null) { this.Expectations.handlers10 = new(@handler); }
							else { this.Expectations.handlers10.Add(@handler); }
							return new(@handler);
						}
						private global::MixedIndexersCreateExpectations Expectations { get; }
					}
					
					internal IndexerExpectations(global::MixedIndexersCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::MixedIndexersCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
					internal global::MixedIndexersCreateExpectations.IndexerExpectations.IndexerSetterExpectations Setters { get; }
				}
				
				internal global::MixedIndexersCreateExpectations.MethodExpectations Methods { get; }
				internal global::MixedIndexersCreateExpectations.IndexerExpectations Indexers { get; }
				
				internal MixedIndexersCreateExpectations() =>
					(this.Methods, this.Indexers) = (new(this), new(this));
				
				internal global::MixedIndexers Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForMixedIndexers<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForMixedIndexers<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::MixedIndexersCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForMixedIndexers<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::MixedIndexersCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler1, global::MixedIndexersCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForMixedIndexers<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::MixedIndexersCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler2, global::MixedIndexersCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForMixedIndexers<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::MixedIndexersCreateExpectations.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler3, global::MixedIndexersCreateExpectations.Handler3, global::System.Func<int, string?>, string?>, IAdornmentsForMixedIndexers<AdornmentsForHandler3>
					{
						public AdornmentsForHandler3(global::MixedIndexersCreateExpectations.Handler3 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler5
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler5, global::MixedIndexersCreateExpectations.Handler5, global::System.Func<long, string?>, string?>, IAdornmentsForMixedIndexers<AdornmentsForHandler5>
					{
						public AdornmentsForHandler5(global::MixedIndexersCreateExpectations.Handler5 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler9
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler9, global::MixedIndexersCreateExpectations.Handler9, global::System.Func<string, string?>, string?>, IAdornmentsForMixedIndexers<AdornmentsForHandler9>
					{
						public AdornmentsForHandler9(global::MixedIndexersCreateExpectations.Handler9 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler6
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler6, global::MixedIndexersCreateExpectations.Handler6, global::System.Action<long, string?>>, IAdornmentsForMixedIndexers<AdornmentsForHandler6>
					{
						public AdornmentsForHandler6(global::MixedIndexersCreateExpectations.Handler6 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler7
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler7, global::MixedIndexersCreateExpectations.Handler7, global::System.Action<global::System.Guid, string?>>, IAdornmentsForMixedIndexers<AdornmentsForHandler7>
					{
						public AdornmentsForHandler7(global::MixedIndexersCreateExpectations.Handler7 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler10
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler10, global::MixedIndexersCreateExpectations.Handler10, global::System.Action<string, string?>>, IAdornmentsForMixedIndexers<AdornmentsForHandler10>
					{
						public AdornmentsForHandler10(global::MixedIndexersCreateExpectations.Handler10 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class MixedIndexersMakeExpectations
			{
				internal global::MixedIndexers Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::MixedIndexers
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override string? this[int @index]
					{
						get => default!;
					}
					public override string? this[long @index]
					{
						get => default!;
						protected set { }
					}
					public override string? this[global::System.Guid @index]
					{
						set { }
					}
					public override string? this[string @index]
					{
						protected get => default!;
						set { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MixedIndexers_Rock_Create.g.cs", createGeneratedCode),
				("MixedIndexers_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithMixedPropertyVisibilityAsync()
	{
		var code =
			"""
			using System;
			using Rocks.Runtime;

			[assembly: Rock(typeof(MixedProperties), BuildType.Create | BuildType.Make)]

			#nullable enable

			public class MixedProperties
			{
				public virtual string? PublicGetPrivateSet { get; private set; }
				public virtual string? PublicGetProtectedSet { get; protected set; }
				public virtual string? PrivateGetPublicSet { private get; set; }
				public virtual string? ProtectedGetPublicSet { protected get; set; }
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Runtime.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class MixedPropertiesCreateExpectations
				: global::Rocks.Runtime.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Runtime.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Runtime.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::MixedPropertiesCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Runtime.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Runtime.Handlers<global::MixedPropertiesCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Runtime.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Runtime.Handlers<global::MixedPropertiesCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3
					: global::Rocks.Runtime.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Runtime.Handlers<global::MixedPropertiesCreateExpectations.Handler3>? @handlers3;
				internal sealed class Handler5
					: global::Rocks.Runtime.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Runtime.Handlers<global::MixedPropertiesCreateExpectations.Handler5>? @handlers5;
				internal sealed class Handler6
					: global::Rocks.Runtime.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Runtime.Argument<string?> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::MixedPropertiesCreateExpectations.Handler6>? @handlers6;
				internal sealed class Handler7
					: global::Rocks.Runtime.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Runtime.Argument<string?> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::MixedPropertiesCreateExpectations.Handler7>? @handlers7;
				internal sealed class Handler9
					: global::Rocks.Runtime.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Runtime.Handlers<global::MixedPropertiesCreateExpectations.Handler9>? @handlers9;
				internal sealed class Handler10
					: global::Rocks.Runtime.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Runtime.Argument<string?> @value { get; set; }
				}
				private global::Rocks.Runtime.Handlers<global::MixedPropertiesCreateExpectations.Handler10>? @handlers10;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers5 is not null) { failures.AddRange(this.Verify(this.handlers5, 5)); }
						if (this.handlers6 is not null) { failures.AddRange(this.Verify(this.handlers6, 6)); }
						if (this.handlers7 is not null) { failures.AddRange(this.Verify(this.handlers7, 7)); }
						if (this.handlers9 is not null) { failures.AddRange(this.Verify(this.handlers9, 9)); }
						if (this.handlers10 is not null) { failures.AddRange(this.Verify(this.handlers10, 10)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Runtime.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::MixedProperties
				{
					public Mock(global::MixedPropertiesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.Runtime.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Runtime.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(0)}
									obj: {@obj.FormatValue()}
								""");
						}
						else
						{
							return base.Equals(@obj: @obj!);
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.Runtime.MemberIdentifier(3, global::Rocks.Runtime.PropertyAccessor.Get)]
					public override string? PublicGetPrivateSet
					{
						get
						{
							if (this.Expectations.handlers3 is not null)
							{
								var @handler = this.Expectations.handlers3.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.PublicGetPrivateSet;
							}
						}
					}
					[global::Rocks.Runtime.MemberIdentifier(5, global::Rocks.Runtime.PropertyAccessor.Get)]
					[global::Rocks.Runtime.MemberIdentifier(6, global::Rocks.Runtime.PropertyAccessor.Set)]
					public override string? PublicGetProtectedSet
					{
						get
						{
							if (this.Expectations.handlers5 is not null)
							{
								var @handler = this.Expectations.handlers5.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.PublicGetProtectedSet;
							}
						}
						protected set
						{
							if (this.Expectations.handlers6 is not null)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers6)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Runtime.Exceptions.ExpectationException(
												$"""
												No handlers match for {this.GetType().GetMemberDescription(6)}
													value: {@value.FormatValue()}
												""");
										}
										
										break;
									}
								}
							}
							else
							{
								base.PublicGetProtectedSet = value!;
							}
						}
					}
					[global::Rocks.Runtime.MemberIdentifier(7, global::Rocks.Runtime.PropertyAccessor.Set)]
					public override string? PrivateGetPublicSet
					{
						set
						{
							if (this.Expectations.handlers7 is not null)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers7)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Runtime.Exceptions.ExpectationException(
												$"""
												No handlers match for {this.GetType().GetMemberDescription(7)}
													value: {@value.FormatValue()}
												""");
										}
										
										break;
									}
								}
							}
							else
							{
								base.PrivateGetPublicSet = value!;
							}
						}
					}
					[global::Rocks.Runtime.MemberIdentifier(9, global::Rocks.Runtime.PropertyAccessor.Get)]
					[global::Rocks.Runtime.MemberIdentifier(10, global::Rocks.Runtime.PropertyAccessor.Set)]
					public override string? ProtectedGetPublicSet
					{
						protected get
						{
							if (this.Expectations.handlers9 is not null)
							{
								var @handler = this.Expectations.handlers9.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.ProtectedGetPublicSet;
							}
						}
						set
						{
							if (this.Expectations.handlers10 is not null)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers10)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Runtime.Exceptions.ExpectationException(
												$"""
												No handlers match for {this.GetType().GetMemberDescription(10)}
													value: {@value.FormatValue()}
												""");
										}
										
										break;
									}
								}
							}
							else
							{
								base.ProtectedGetPublicSet = value!;
							}
						}
					}
					
					private global::MixedPropertiesCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::MixedPropertiesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::MixedPropertiesCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Runtime.Argument<object?> @obj)
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::MixedPropertiesCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::MixedPropertiesCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::MixedPropertiesCreateExpectations.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::MixedPropertiesCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::MixedPropertiesCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					private global::MixedPropertiesCreateExpectations Expectations { get; }
				}
				
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertyGetterExpectations
					{
						internal PropertyGetterExpectations(global::MixedPropertiesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::MixedPropertiesCreateExpectations.Adornments.AdornmentsForHandler3 PublicGetPrivateSet()
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MixedPropertiesCreateExpectations.Handler3();
							if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
							else { this.Expectations.handlers3.Add(handler); }
							return new(handler);
						}
						internal global::MixedPropertiesCreateExpectations.Adornments.AdornmentsForHandler5 PublicGetProtectedSet()
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MixedPropertiesCreateExpectations.Handler5();
							if (this.Expectations.handlers5 is null) { this.Expectations.handlers5 = new(handler); }
							else { this.Expectations.handlers5.Add(handler); }
							return new(handler);
						}
						internal global::MixedPropertiesCreateExpectations.Adornments.AdornmentsForHandler9 ProtectedGetPublicSet()
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MixedPropertiesCreateExpectations.Handler9();
							if (this.Expectations.handlers9 is null) { this.Expectations.handlers9 = new(handler); }
							else { this.Expectations.handlers9.Add(handler); }
							return new(handler);
						}
						private global::MixedPropertiesCreateExpectations Expectations { get; }
					}
					
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::MixedPropertiesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::MixedPropertiesCreateExpectations.Adornments.AdornmentsForHandler6 PublicGetProtectedSet(global::Rocks.Runtime.Argument<string?> @value)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::MixedPropertiesCreateExpectations.Handler6
							{
								value = @value,
							};
						
							if (this.Expectations.handlers6 is null) { this.Expectations.handlers6 = new(handler); }
							else { this.Expectations.handlers6.Add(handler); }
							return new(handler);
						}
						internal global::MixedPropertiesCreateExpectations.Adornments.AdornmentsForHandler7 PrivateGetPublicSet(global::Rocks.Runtime.Argument<string?> @value)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::MixedPropertiesCreateExpectations.Handler7
							{
								value = @value,
							};
						
							if (this.Expectations.handlers7 is null) { this.Expectations.handlers7 = new(handler); }
							else { this.Expectations.handlers7.Add(handler); }
							return new(handler);
						}
						internal global::MixedPropertiesCreateExpectations.Adornments.AdornmentsForHandler10 ProtectedGetPublicSet(global::Rocks.Runtime.Argument<string?> @value)
						{
							global::Rocks.Runtime.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::MixedPropertiesCreateExpectations.Handler10
							{
								value = @value,
							};
						
							if (this.Expectations.handlers10 is null) { this.Expectations.handlers10 = new(handler); }
							else { this.Expectations.handlers10.Add(handler); }
							return new(handler);
						}
						private global::MixedPropertiesCreateExpectations Expectations { get; }
					}
					
					internal PropertyExpectations(global::MixedPropertiesCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::MixedPropertiesCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
					internal global::MixedPropertiesCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				
				internal global::MixedPropertiesCreateExpectations.MethodExpectations Methods { get; }
				internal global::MixedPropertiesCreateExpectations.PropertyExpectations Properties { get; }
				
				internal MixedPropertiesCreateExpectations() =>
					(this.Methods, this.Properties) = (new(this), new(this));
				
				internal global::MixedProperties Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Runtime.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForMixedProperties<TAdornments>
						: global::Rocks.Runtime.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForMixedProperties<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler0, global::MixedPropertiesCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForMixedProperties<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::MixedPropertiesCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler1, global::MixedPropertiesCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForMixedProperties<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::MixedPropertiesCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler2, global::MixedPropertiesCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForMixedProperties<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::MixedPropertiesCreateExpectations.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler3, global::MixedPropertiesCreateExpectations.Handler3, global::System.Func<string?>, string?>, IAdornmentsForMixedProperties<AdornmentsForHandler3>
					{
						public AdornmentsForHandler3(global::MixedPropertiesCreateExpectations.Handler3 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler5
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler5, global::MixedPropertiesCreateExpectations.Handler5, global::System.Func<string?>, string?>, IAdornmentsForMixedProperties<AdornmentsForHandler5>
					{
						public AdornmentsForHandler5(global::MixedPropertiesCreateExpectations.Handler5 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler9
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler9, global::MixedPropertiesCreateExpectations.Handler9, global::System.Func<string?>, string?>, IAdornmentsForMixedProperties<AdornmentsForHandler9>
					{
						public AdornmentsForHandler9(global::MixedPropertiesCreateExpectations.Handler9 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler6
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler6, global::MixedPropertiesCreateExpectations.Handler6, global::System.Action<string?>>, IAdornmentsForMixedProperties<AdornmentsForHandler6>
					{
						public AdornmentsForHandler6(global::MixedPropertiesCreateExpectations.Handler6 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler7
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler7, global::MixedPropertiesCreateExpectations.Handler7, global::System.Action<string?>>, IAdornmentsForMixedProperties<AdornmentsForHandler7>
					{
						public AdornmentsForHandler7(global::MixedPropertiesCreateExpectations.Handler7 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler10
						: global::Rocks.Runtime.Adornments<AdornmentsForHandler10, global::MixedPropertiesCreateExpectations.Handler10, global::System.Action<string?>>, IAdornmentsForMixedProperties<AdornmentsForHandler10>
					{
						public AdornmentsForHandler10(global::MixedPropertiesCreateExpectations.Handler10 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class MixedPropertiesMakeExpectations
			{
				internal global::MixedProperties Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::MixedProperties
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override string? PublicGetPrivateSet
					{
						get => default!;
					}
					public override string? PublicGetProtectedSet
					{
						get => default!;
						protected set { }
					}
					public override string? PrivateGetPublicSet
					{
						set { }
					}
					public override string? ProtectedGetPublicSet
					{
						protected get => default!;
						set { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MixedProperties_Rock_Create.g.cs", createGeneratedCode),
				("MixedProperties_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}
}