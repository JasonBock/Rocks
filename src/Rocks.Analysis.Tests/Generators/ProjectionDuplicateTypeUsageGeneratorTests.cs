using NUnit.Framework;

namespace Rocks.Analysis.Tests.Generators;

public static class ProjectionDuplicateTypeUsageGeneratorTests
{
	[Test]
	public static async Task GenerateWithMultipleProjectedTypeUsageInMethodAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(ISpecialTypes), BuildType.Create | BuildType.Make)]

			public interface ISpecialTypes
			{
				unsafe int* Use(ArgIterator value1, ArgIterator value2, int* value3);
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal unsafe sealed class ISpecialTypesCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<Handler0.CallbackForHandler>
				{
					internal unsafe delegate int* CallbackForHandler(global::System.ArgIterator @value1, global::System.ArgIterator @value2, int* @value3);
					public global::Rocks.Projections.ArgIteratorArgument @value1 { get; set; }
					public global::Rocks.Projections.ArgIteratorArgument @value2 { get; set; }
					public global::Rocks.Projections.PointerArgument<int> @value3 { get; set; }
					public int* ReturnValue { get; set; }
				}
				private global::Rocks.Handlers<global::ISpecialTypesCreateExpectations.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked && !this.WasExceptionThrown)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock(global::ISpecialTypesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public unsafe int* Use(global::System.ArgIterator @value1, global::System.ArgIterator @value2, int* @value3)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@value1.IsValid(@value1!) &&
									@handler.@value2.IsValid(@value2!) &&
									@handler.@value3.IsValid(@value3!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@value1!, @value2!, @value3!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							this.Expectations.WasExceptionThrown = true;
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers match for {this.GetType().GetMemberDescription(0)}
									value1: <Not formattable>
									value2: <Not formattable>
									value3: <Not formattable>
								""");
						}
						
						this.Expectations.WasExceptionThrown = true;
						throw new global::Rocks.Exceptions.ExpectationException(
							$"""
							No handlers were found for {this.GetType().GetMemberDescription(0)}
								value1: <Not formattable>
								value2: <Not formattable>
								value3: <Not formattable>
							""");
					}
					
					private global::ISpecialTypesCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::ISpecialTypesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::ISpecialTypesCreateExpectations.Adornments.AdornmentsForHandler0 Use(global::Rocks.Projections.ArgIteratorArgument @value1, global::Rocks.Projections.ArgIteratorArgument @value2, global::Rocks.Projections.PointerArgument<int> @value3)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@value1);
						global::System.ArgumentNullException.ThrowIfNull(@value2);
						global::System.ArgumentNullException.ThrowIfNull(@value3);
						
						var @handler = new global::ISpecialTypesCreateExpectations.Handler0
						{
							@value1 = @value1,
							@value2 = @value2,
							@value3 = @value3,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::ISpecialTypesCreateExpectations Expectations { get; }
				}
				
				internal global::ISpecialTypesCreateExpectations.MethodExpectations Methods { get; }
				
				public ISpecialTypesCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::ISpecialTypes Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForISpecialTypes<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForISpecialTypes<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::ISpecialTypesCreateExpectations.Handler0, global::ISpecialTypesCreateExpectations.Handler0.CallbackForHandler>, IAdornmentsForISpecialTypes<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::ISpecialTypesCreateExpectations.Handler0 handler)
							: base(handler) { }
						public AdornmentsForHandler0 ReturnValue(int* returnValue)
						{
							this.Handler.ReturnValue = returnValue;
							return this;
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ISpecialTypesMakeExpectations
			{
				internal global::ISpecialTypes Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock()
					{
					}
					
					public unsafe int* Use(global::System.ArgIterator @value1, global::System.ArgIterator @value2, int* @value3)
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		var argIteratorProjectionGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			using System;
			using System.ComponentModel;
			
			#nullable enable
			
			namespace Rocks.Projections;
			
			internal delegate bool ArgIteratorArgumentEvaluation(global::System.ArgIterator @value);
			
			internal sealed class ArgIteratorArgument
				: Argument
			{
				private readonly ArgIteratorArgumentEvaluation? evaluation;
				private readonly ValidationState validation;
			
				internal ArgIteratorArgument() => this.validation = ValidationState.None;
			
				internal ArgIteratorArgument(ArgIteratorArgumentEvaluation @evaluation)
				{
					this.evaluation = @evaluation;
					this.validation = ValidationState.Evaluation;
				}
			
				public bool IsValid(global::System.ArgIterator @value) =>
					this.validation switch
					{
						ValidationState.None => true,
						ValidationState.Evaluation => this.evaluation!(@value),
						ValidationState.DefaultValue => throw new NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
						_ => throw new InvalidEnumArgumentException($"Invalid value for validation: {this.validation}")
					};
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		var pointerProjectionGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			using System;
			using System.ComponentModel;
			
			#nullable enable
			
			namespace Rocks.Projections;
			
			internal unsafe delegate bool PointerArgumentEvaluation<T>(T* @value) where T : unmanaged;
			
			internal sealed unsafe class PointerArgument<T>
				: Argument
				where T : unmanaged
			{
				private readonly PointerArgumentEvaluation<T>? evaluation;
				private readonly T* value;
				private readonly ValidationState validation;
			
				internal PointerArgument() => this.validation = ValidationState.None;
			
				internal PointerArgument(T* @value)
				{
					this.value = @value;
					this.validation = ValidationState.Value;
				}
			
				internal PointerArgument(PointerArgumentEvaluation<T> @evaluation)
				{
					this.evaluation = @evaluation;
					this.validation = ValidationState.Evaluation;
				}
			
				public static implicit operator PointerArgument<T>(T* @value) => new(@value);
			
				public bool IsValid(T* @value) =>
					this.validation switch
					{
						ValidationState.None => true,
						ValidationState.Value => @value == this.value,
						ValidationState.Evaluation => this.evaluation!(@value),
						ValidationState.DefaultValue => throw new NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
						_ => throw new InvalidEnumArgumentException($"Invalid value for validation: {this.validation}")
					};
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("ISpecialTypes_Rock_Create.g.cs", createGeneratedCode),
				("ISpecialTypes_Rock_Make.g.cs", makeGeneratedCode),
				("System.ArgIterator_Projection.g.cs", argIteratorProjectionGeneratedCode),
				("Pointer_Projection.g.cs", pointerProjectionGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithMultipleProjectedTypeUsageInIndexerAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(ISpecialTypes), BuildType.Create | BuildType.Make)]

			public interface ISpecialTypes
			{
				unsafe int* this[ArgIterator value1, ArgIterator value2, int* value3] { get; set; }
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal unsafe sealed class ISpecialTypesCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<Handler0.CallbackForHandler>
				{
					internal unsafe delegate int* CallbackForHandler(global::System.ArgIterator @value1, global::System.ArgIterator @value2, int* @value3);
					public global::Rocks.Projections.ArgIteratorArgument @value1 { get; set; }
					public global::Rocks.Projections.ArgIteratorArgument @value2 { get; set; }
					public global::Rocks.Projections.PointerArgument<int> @value3 { get; set; }
					public int* ReturnValue { get; set; }
				}
				private global::Rocks.Handlers<global::ISpecialTypesCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<Handler1.CallbackForHandler>
				{
					internal unsafe delegate void CallbackForHandler(global::System.ArgIterator @value1, global::System.ArgIterator @value2, int* @value3, int* @value);
					public global::Rocks.Projections.ArgIteratorArgument @value1 { get; set; }
					public global::Rocks.Projections.ArgIteratorArgument @value2 { get; set; }
					public global::Rocks.Projections.PointerArgument<int> @value3 { get; set; }
					public global::Rocks.Projections.PointerArgument<int> @value { get; set; }
				}
				private global::Rocks.Handlers<global::ISpecialTypesCreateExpectations.Handler1>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked && !this.WasExceptionThrown)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock(global::ISpecialTypesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, global::Rocks.PropertyAccessor.Get)]
					[global::Rocks.MemberIdentifier(1, global::Rocks.PropertyAccessor.Set)]
					public unsafe int* this[global::System.ArgIterator @value1, global::System.ArgIterator @value2, int* @value3]
					{
						get
						{
							if (this.Expectations.handlers0 is not null)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@value1.IsValid(@value1!) &&
										@handler.@value2.IsValid(@value2!) &&
										@handler.@value3.IsValid(@value3!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@value1!, @value2!, @value3!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										value1: <Not formattable>
										value2: <Not formattable>
										value3: <Not formattable>
									""");
							}
							
							this.Expectations.WasExceptionThrown = true;
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									value1: <Not formattable>
									value2: <Not formattable>
									value3: <Not formattable>
								""");
						}
						set
						{
							if (this.Expectations.handlers1 is not null)
							{
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.@value1.IsValid(@value1!) &&
										@handler.@value2.IsValid(@value2!) &&
										@handler.@value3.IsValid(@value3!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@value1!, @value2!, @value3!, @value!);
										return;
									}
								}
								
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(1)}
										value1: <Not formattable>
										value2: <Not formattable>
										value3: <Not formattable>
										value: <Not formattable>
									""");
							}
							
							this.Expectations.WasExceptionThrown = true;
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(1)}
									value1: <Not formattable>
									value2: <Not formattable>
									value3: <Not formattable>
									value: <Not formattable>
								""");
						}
					}
					
					private global::ISpecialTypesCreateExpectations Expectations { get; }
				}
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerGetterExpectations
					{
						internal IndexerGetterExpectations(global::ISpecialTypesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::ISpecialTypesCreateExpectations.Adornments.AdornmentsForHandler0 This(global::Rocks.Projections.ArgIteratorArgument @value1, global::Rocks.Projections.ArgIteratorArgument @value2, global::Rocks.Projections.PointerArgument<int> @value3)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value1);
							global::System.ArgumentNullException.ThrowIfNull(@value2);
							global::System.ArgumentNullException.ThrowIfNull(@value3);
							
							var @handler = new global::ISpecialTypesCreateExpectations.Handler0
							{
								@value1 = @value1,
								@value2 = @value2,
								@value3 = @value3,
							};
							
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						private global::ISpecialTypesCreateExpectations Expectations { get; }
					}
					
					internal sealed class IndexerSetterExpectations
					{
						internal IndexerSetterExpectations(global::ISpecialTypesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::ISpecialTypesCreateExpectations.Adornments.AdornmentsForHandler1 This(global::Rocks.Projections.PointerArgument<int> @value, global::Rocks.Projections.ArgIteratorArgument @value1, global::Rocks.Projections.ArgIteratorArgument @value2, global::Rocks.Projections.PointerArgument<int> @value3)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value1);
							global::System.ArgumentNullException.ThrowIfNull(@value2);
							global::System.ArgumentNullException.ThrowIfNull(@value3);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var @handler = new global::ISpecialTypesCreateExpectations.Handler1
							{
								@value1 = @value1,
								@value2 = @value2,
								@value3 = @value3,
								@value = @value,
							};
							
							if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
							else { this.Expectations.handlers1.Add(@handler); }
							return new(@handler);
						}
						private global::ISpecialTypesCreateExpectations Expectations { get; }
					}
					
					internal IndexerExpectations(global::ISpecialTypesCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::ISpecialTypesCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
					internal global::ISpecialTypesCreateExpectations.IndexerExpectations.IndexerSetterExpectations Setters { get; }
				}
				
				internal global::ISpecialTypesCreateExpectations.IndexerExpectations Indexers { get; }
				
				public ISpecialTypesCreateExpectations() =>
					(this.Indexers) = (new(this));
				
				internal global::ISpecialTypes Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForISpecialTypes<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForISpecialTypes<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::ISpecialTypesCreateExpectations.Handler0, global::ISpecialTypesCreateExpectations.Handler0.CallbackForHandler>, IAdornmentsForISpecialTypes<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::ISpecialTypesCreateExpectations.Handler0 handler)
							: base(handler) { }
						public AdornmentsForHandler0 ReturnValue(int* returnValue)
						{
							this.Handler.ReturnValue = returnValue;
							return this;
						}
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::ISpecialTypesCreateExpectations.Handler1, global::ISpecialTypesCreateExpectations.Handler1.CallbackForHandler>, IAdornmentsForISpecialTypes<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::ISpecialTypesCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ISpecialTypesMakeExpectations
			{
				internal global::ISpecialTypes Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock()
					{
					}
					
					public unsafe int* this[global::System.ArgIterator @value1, global::System.ArgIterator @value2, int* @value3]
					{
						get => default!;
						set { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		var pointerProjectionGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			using System;
			using System.ComponentModel;
			
			#nullable enable
			
			namespace Rocks.Projections;
			
			internal unsafe delegate bool PointerArgumentEvaluation<T>(T* @value) where T : unmanaged;
			
			internal sealed unsafe class PointerArgument<T>
				: Argument
				where T : unmanaged
			{
				private readonly PointerArgumentEvaluation<T>? evaluation;
				private readonly T* value;
				private readonly ValidationState validation;
			
				internal PointerArgument() => this.validation = ValidationState.None;
			
				internal PointerArgument(T* @value)
				{
					this.value = @value;
					this.validation = ValidationState.Value;
				}
			
				internal PointerArgument(PointerArgumentEvaluation<T> @evaluation)
				{
					this.evaluation = @evaluation;
					this.validation = ValidationState.Evaluation;
				}
			
				public static implicit operator PointerArgument<T>(T* @value) => new(@value);
			
				public bool IsValid(T* @value) =>
					this.validation switch
					{
						ValidationState.None => true,
						ValidationState.Value => @value == this.value,
						ValidationState.Evaluation => this.evaluation!(@value),
						ValidationState.DefaultValue => throw new NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
						_ => throw new InvalidEnumArgumentException($"Invalid value for validation: {this.validation}")
					};
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		var argIteratorProjectionGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			using System;
			using System.ComponentModel;
			
			#nullable enable
			
			namespace Rocks.Projections;
			
			internal delegate bool ArgIteratorArgumentEvaluation(global::System.ArgIterator @value);
			
			internal sealed class ArgIteratorArgument
				: Argument
			{
				private readonly ArgIteratorArgumentEvaluation? evaluation;
				private readonly ValidationState validation;
			
				internal ArgIteratorArgument() => this.validation = ValidationState.None;
			
				internal ArgIteratorArgument(ArgIteratorArgumentEvaluation @evaluation)
				{
					this.evaluation = @evaluation;
					this.validation = ValidationState.Evaluation;
				}
			
				public bool IsValid(global::System.ArgIterator @value) =>
					this.validation switch
					{
						ValidationState.None => true,
						ValidationState.Evaluation => this.evaluation!(@value),
						ValidationState.DefaultValue => throw new NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
						_ => throw new InvalidEnumArgumentException($"Invalid value for validation: {this.validation}")
					};
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("ISpecialTypes_Rock_Create.g.cs", createGeneratedCode),
				("ISpecialTypes_Rock_Make.g.cs", makeGeneratedCode),
				("Pointer_Projection.g.cs", pointerProjectionGeneratedCode),
				("System.ArgIterator_Projection.g.cs", argIteratorProjectionGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithMultiplePointerTypeUsageInMethodAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(ISpecialTypes), BuildType.Create | BuildType.Make)]

			public interface ISpecialTypes
			{
				unsafe void Use(int* value1, char* value2);
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal unsafe sealed class ISpecialTypesCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<Handler0.CallbackForHandler>
				{
					internal unsafe delegate void CallbackForHandler(int* @value1, char* @value2);
					public global::Rocks.Projections.PointerArgument<int> @value1 { get; set; }
					public global::Rocks.Projections.PointerArgument<char> @value2 { get; set; }
				}
				private global::Rocks.Handlers<global::ISpecialTypesCreateExpectations.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked && !this.WasExceptionThrown)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock(global::ISpecialTypesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public unsafe void Use(int* @value1, char* @value2)
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@value1.IsValid(@value1!) &&
									@handler.@value2.IsValid(@value2!))
								{
									@foundMatch = true;
									@handler.CallCount++;
									@handler.Callback?.Invoke(@value1!, @value2!);
									break;
								}
							}
							
							if (!@foundMatch)
							{
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										value1: <Not formattable>
										value2: <Not formattable>
									""");
							}
						}
						else
						{
							this.Expectations.WasExceptionThrown = true;
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									value1: <Not formattable>
									value2: <Not formattable>
								""");
						}
					}
					
					private global::ISpecialTypesCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::ISpecialTypesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::ISpecialTypesCreateExpectations.Adornments.AdornmentsForHandler0 Use(global::Rocks.Projections.PointerArgument<int> @value1, global::Rocks.Projections.PointerArgument<char> @value2)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@value1);
						global::System.ArgumentNullException.ThrowIfNull(@value2);
						
						var @handler = new global::ISpecialTypesCreateExpectations.Handler0
						{
							@value1 = @value1,
							@value2 = @value2,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::ISpecialTypesCreateExpectations Expectations { get; }
				}
				
				internal global::ISpecialTypesCreateExpectations.MethodExpectations Methods { get; }
				
				public ISpecialTypesCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::ISpecialTypes Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForISpecialTypes<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForISpecialTypes<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::ISpecialTypesCreateExpectations.Handler0, global::ISpecialTypesCreateExpectations.Handler0.CallbackForHandler>, IAdornmentsForISpecialTypes<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::ISpecialTypesCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ISpecialTypesMakeExpectations
			{
				internal global::ISpecialTypes Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock()
					{
					}
					
					public unsafe void Use(int* @value1, char* @value2)
					{
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		var pointerProjectionGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			using System;
			using System.ComponentModel;
			
			#nullable enable
			
			namespace Rocks.Projections;
			
			internal unsafe delegate bool PointerArgumentEvaluation<T>(T* @value) where T : unmanaged;
			
			internal sealed unsafe class PointerArgument<T>
				: Argument
				where T : unmanaged
			{
				private readonly PointerArgumentEvaluation<T>? evaluation;
				private readonly T* value;
				private readonly ValidationState validation;
			
				internal PointerArgument() => this.validation = ValidationState.None;
			
				internal PointerArgument(T* @value)
				{
					this.value = @value;
					this.validation = ValidationState.Value;
				}
			
				internal PointerArgument(PointerArgumentEvaluation<T> @evaluation)
				{
					this.evaluation = @evaluation;
					this.validation = ValidationState.Evaluation;
				}
			
				public static implicit operator PointerArgument<T>(T* @value) => new(@value);
			
				public bool IsValid(T* @value) =>
					this.validation switch
					{
						ValidationState.None => true,
						ValidationState.Value => @value == this.value,
						ValidationState.Evaluation => this.evaluation!(@value),
						ValidationState.DefaultValue => throw new NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
						_ => throw new InvalidEnumArgumentException($"Invalid value for validation: {this.validation}")
					};
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("ISpecialTypes_Rock_Create.g.cs", createGeneratedCode),
				("ISpecialTypes_Rock_Make.g.cs", makeGeneratedCode),
				("Pointer_Projection.g.cs", pointerProjectionGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithMultiplePointerTypeUsageInIndexerAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(ISpecialTypes), BuildType.Create | BuildType.Make)]

			public interface ISpecialTypes
			{
				unsafe int this[int* value1, char* value3] { get; set; }
			}
			""";

		var createGeneratedCode =
			""""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal unsafe sealed class ISpecialTypesCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<Handler0.CallbackForHandler, int>
				{
					internal unsafe delegate int CallbackForHandler(int* @value1, char* @value3);
					public global::Rocks.Projections.PointerArgument<int> @value1 { get; set; }
					public global::Rocks.Projections.PointerArgument<char> @value3 { get; set; }
				}
				private global::Rocks.Handlers<global::ISpecialTypesCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<Handler1.CallbackForHandler>
				{
					internal unsafe delegate void CallbackForHandler(int* @value1, char* @value3, int @value);
					public global::Rocks.Projections.PointerArgument<int> @value1 { get; set; }
					public global::Rocks.Projections.PointerArgument<char> @value3 { get; set; }
					public global::Rocks.Argument<int> @value { get; set; }
				}
				private global::Rocks.Handlers<global::ISpecialTypesCreateExpectations.Handler1>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked && !this.WasExceptionThrown)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock(global::ISpecialTypesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, global::Rocks.PropertyAccessor.Get)]
					[global::Rocks.MemberIdentifier(1, global::Rocks.PropertyAccessor.Set)]
					public unsafe int this[int* @value1, char* @value3]
					{
						get
						{
							if (this.Expectations.handlers0 is not null)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@value1.IsValid(@value1!) &&
										@handler.@value3.IsValid(@value3!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@value1!, @value3!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(0)}
										value1: <Not formattable>
										value3: <Not formattable>
									""");
							}
							
							this.Expectations.WasExceptionThrown = true;
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(0)}
									value1: <Not formattable>
									value3: <Not formattable>
								""");
						}
						set
						{
							if (this.Expectations.handlers1 is not null)
							{
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.@value1.IsValid(@value1!) &&
										@handler.@value3.IsValid(@value3!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@value1!, @value3!, @value!);
										return;
									}
								}
								
								this.Expectations.WasExceptionThrown = true;
								throw new global::Rocks.Exceptions.ExpectationException(
									$"""
									No handlers match for {this.GetType().GetMemberDescription(1)}
										value1: <Not formattable>
										value3: <Not formattable>
										value: {@value.FormatValue()}
									""");
							}
							
							this.Expectations.WasExceptionThrown = true;
							throw new global::Rocks.Exceptions.ExpectationException(
								$"""
								No handlers were found for {this.GetType().GetMemberDescription(1)}
									value1: <Not formattable>
									value3: <Not formattable>
									value: {@value.FormatValue()}
								""");
						}
					}
					
					private global::ISpecialTypesCreateExpectations Expectations { get; }
				}
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerGetterExpectations
					{
						internal IndexerGetterExpectations(global::ISpecialTypesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::ISpecialTypesCreateExpectations.Adornments.AdornmentsForHandler0 This(global::Rocks.Projections.PointerArgument<int> @value1, global::Rocks.Projections.PointerArgument<char> @value3)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value1);
							global::System.ArgumentNullException.ThrowIfNull(@value3);
							
							var @handler = new global::ISpecialTypesCreateExpectations.Handler0
							{
								@value1 = @value1,
								@value3 = @value3,
							};
							
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						private global::ISpecialTypesCreateExpectations Expectations { get; }
					}
					
					internal sealed class IndexerSetterExpectations
					{
						internal IndexerSetterExpectations(global::ISpecialTypesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::ISpecialTypesCreateExpectations.Adornments.AdornmentsForHandler1 This(global::Rocks.Argument<int> @value, global::Rocks.Projections.PointerArgument<int> @value1, global::Rocks.Projections.PointerArgument<char> @value3)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value1);
							global::System.ArgumentNullException.ThrowIfNull(@value3);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var @handler = new global::ISpecialTypesCreateExpectations.Handler1
							{
								@value1 = @value1,
								@value3 = @value3,
								@value = @value,
							};
							
							if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
							else { this.Expectations.handlers1.Add(@handler); }
							return new(@handler);
						}
						private global::ISpecialTypesCreateExpectations Expectations { get; }
					}
					
					internal IndexerExpectations(global::ISpecialTypesCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::ISpecialTypesCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
					internal global::ISpecialTypesCreateExpectations.IndexerExpectations.IndexerSetterExpectations Setters { get; }
				}
				
				internal global::ISpecialTypesCreateExpectations.IndexerExpectations Indexers { get; }
				
				public ISpecialTypesCreateExpectations() =>
					(this.Indexers) = (new(this));
				
				internal global::ISpecialTypes Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForISpecialTypes<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForISpecialTypes<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::ISpecialTypesCreateExpectations.Handler0, global::ISpecialTypesCreateExpectations.Handler0.CallbackForHandler, int>, IAdornmentsForISpecialTypes<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::ISpecialTypesCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::ISpecialTypesCreateExpectations.Handler1, global::ISpecialTypesCreateExpectations.Handler1.CallbackForHandler>, IAdornmentsForISpecialTypes<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::ISpecialTypesCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			"""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ISpecialTypesMakeExpectations
			{
				internal global::ISpecialTypes Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::ISpecialTypes
				{
					public Mock()
					{
					}
					
					public unsafe int this[int* @value1, char* @value3]
					{
						get => default!;
						set { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		var pointerProjectionGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			using System;
			using System.ComponentModel;
			
			#nullable enable
			
			namespace Rocks.Projections;
			
			internal unsafe delegate bool PointerArgumentEvaluation<T>(T* @value) where T : unmanaged;
			
			internal sealed unsafe class PointerArgument<T>
				: Argument
				where T : unmanaged
			{
				private readonly PointerArgumentEvaluation<T>? evaluation;
				private readonly T* value;
				private readonly ValidationState validation;
			
				internal PointerArgument() => this.validation = ValidationState.None;
			
				internal PointerArgument(T* @value)
				{
					this.value = @value;
					this.validation = ValidationState.Value;
				}
			
				internal PointerArgument(PointerArgumentEvaluation<T> @evaluation)
				{
					this.evaluation = @evaluation;
					this.validation = ValidationState.Evaluation;
				}
			
				public static implicit operator PointerArgument<T>(T* @value) => new(@value);
			
				public bool IsValid(T* @value) =>
					this.validation switch
					{
						ValidationState.None => true,
						ValidationState.Value => @value == this.value,
						ValidationState.Evaluation => this.evaluation!(@value),
						ValidationState.DefaultValue => throw new NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
						_ => throw new InvalidEnumArgumentException($"Invalid value for validation: {this.validation}")
					};
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("ISpecialTypes_Rock_Create.g.cs", createGeneratedCode),
				("ISpecialTypes_Rock_Make.g.cs", makeGeneratedCode),
				("Pointer_Projection.g.cs", pointerProjectionGeneratedCode)
			],
			[]);
	}
}