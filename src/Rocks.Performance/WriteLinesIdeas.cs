using BenchmarkDotNet.Attributes;
using System.CodeDom.Compiler;

namespace Rocks.Performance;

[MemoryDiagnoser]
public class WriteLinesIdeas
{
	private readonly string value =
		"""
		// <auto-generated/>
			
		#nullable enable
			
		using Rocks.Extensions;
		using System.Collections.Generic;
		using System.Collections.Immutable;
		""";

	[Benchmark(Baseline = true)]
	public string OldWay()
	{
		using var writer = new StringWriter();
		using var indentWriter = new IndentedTextWriter(writer, "\t");

		indentWriter.WriteLinesOldWay(this.value);
		indentWriter.Indent++;
		indentWriter.WriteLinesOldWay(this.value);
		indentWriter.Indent--;
		indentWriter.WriteLinesOldWay(this.value);

		return writer.ToString();
	}

	[Benchmark]
	public string NewWay()
	{
		using var writer = new StringWriter();
		using var indentWriter = new IndentedTextWriter(writer, "\t");

		indentWriter.WriteLinesNewWay(this.value);
		indentWriter.Indent++;
		indentWriter.WriteLinesNewWay(this.value);
		indentWriter.Indent--;
		indentWriter.WriteLinesNewWay(this.value);

		return writer.ToString();
	}
}

internal static class Extensions
{
	internal static void WriteLinesOldWay(this IndentedTextWriter self, string content, int indentation = 0)
	{
		if (indentation > 0)
		{
			self.Indent += indentation;
		}

		foreach (var line in content.Split([self.NewLine], StringSplitOptions.None))
		{
			self.WriteLine(line);
		}

		if (indentation > 0)
		{
			self.Indent -= indentation;
		}
	}

	internal static void WriteLinesNewWay(this IndentedTextWriter self, string content, int indentation = 0)
	{
		if (indentation > 0)
		{
			self.Indent += indentation;
		}

		var contentSpan = content.AsSpan();

		var startIndex = 0;
		var endIndex = content.IndexOf(Environment.NewLine, startIndex, StringComparison.InvariantCulture);

		while (endIndex > 0)
		{
			self.WriteLine(contentSpan.Slice(startIndex, endIndex - startIndex + 1));
			startIndex = endIndex + Environment.NewLine.Length;
			endIndex = content.IndexOf(Environment.NewLine, startIndex, StringComparison.InvariantCulture);
		}

		// Need to write one more to get the last line
		self.WriteLine(contentSpan[startIndex..content.Length]);

		if (indentation > 0)
		{
			self.Indent -= indentation;
		}
	}
}