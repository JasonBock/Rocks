// <auto-generated/>

#nullable enable

internal static class CreateExpectationsOfISimpleExtensions
{
	internal static global::Rocks.Expectations.MethodExpectations<global::ISimple> Methods(
		 this global::Rocks.Expectations.Expectations<global::ISimple> @self) =>
			  new(@self);

	internal static global::ISimple Instance(this global::Rocks.Expectations.Expectations<global::ISimple> @self)
	{
		if (!@self.WasInstanceInvoked)
		{
			@self.WasInstanceInvoked = true;
			var @mock = new RockISimple(@self);
			@self.MockType = @mock.GetType();
			return @mock;
		}
		else
		{
			throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
		}
	}

	private sealed class RockISimple
		 : global::ISimple
	{
		private readonly global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<global::Rocks.HandlerInformation>> handlers;

		public RockISimple(global::Rocks.Expectations.Expectations<global::ISimple> @expectations)
		{
			this.handlers = @expectations.Handlers;
		}

		[global::Rocks.MemberIdentifier(0, "string DoStuff(int @options, global::System.Guid @id)")]
		public string DoStuff(int @options, global::System.Guid @id)
		{
			if (this.handlers.TryGetValue(0, out var @methodHandlers))
			{
				foreach (var @methodHandler in @methodHandlers)
				{
					if (((global::Rocks.Argument<int>)@methodHandler.Expectations[0]).IsValid(@options!) &&
						 ((global::Rocks.Argument<global::System.Guid>)@methodHandler.Expectations[1]).IsValid(@id!))
					{
						@methodHandler.IncrementCallCount();
						var @result = @methodHandler.Method is not null ?
							 ((global::System.Func<int, global::System.Guid, string>)@methodHandler.Method)(@options!, @id!) :
							 ((global::Rocks.HandlerInformation<string>)@methodHandler).ReturnValue;
						return @result!;
					}
				}

				throw new global::Rocks.Exceptions.ExpectationException(
					 "No handlers match for string DoStuff(int @options, global::System.Guid @id)");
			}

			throw new global::Rocks.Exceptions.ExpectationException(
				 "No handlers were found for string DoStuff(int @options, global::System.Guid @id)");
		}
	}
}

internal static class MethodExpectationsOfISimpleExtensions
{
	internal static global::Rocks.MethodAdornments<global::ISimple, global::System.Func<int, global::System.Guid, string>, string> DoStuff(
		 this global::Rocks.Expectations.MethodExpectations<global::ISimple> @self,
		 global::Rocks.Argument<int> @options, global::Rocks.Argument<global::System.Guid> @id)
	{
		global::System.ArgumentNullException.ThrowIfNull(@options);
		global::System.ArgumentNullException.ThrowIfNull(@id);
		return new global::Rocks.MethodAdornments<global::ISimple, global::System.Func<int, global::System.Guid, string>, string>(
			 @self.Add<string>(0, new global::System.Collections.Generic.List<global::Rocks.Argument>(2) { @options, @id }));
	}
}
