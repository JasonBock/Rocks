using Microsoft.CodeAnalysis.Text;
using Rocks.Extensions;
using Rocks.Models;
using System.CodeDom.Compiler;
using System.Text;

namespace Rocks.Builders.Create;

internal sealed class RockCreateBuilder
{
	internal RockCreateBuilder(TypeMockModel mockType)
	{
		this.MockType = mockType;
		(this.Name, this.Text) = this.Build();
	}

	private (string, SourceText) Build()
	{
		using var writer = new StringWriter();
		using var indentWriter = new IndentedTextWriter(writer, "\t");

		var mockNamespace = this.MockType.ExpectationsNamespace;

		if (mockNamespace is not null)
		{
			indentWriter.WriteLine($"namespace {mockNamespace}");
			indentWriter.WriteLine("{");
			indentWriter.Indent++;
		}

		MockBuilder.Build(indentWriter, this.MockType);

		if (mockNamespace is not null)
		{
			indentWriter.Indent--;
			indentWriter.WriteLine("}");
		}

		var content = new List<string>
		{
			"// <auto-generated/>", string.Empty,
			"#pragma warning disable CS8618",
			"#pragma warning disable CS8633",
			"#pragma warning disable CS8714",
			"#pragma warning disable CS8775", string.Empty,
			"#nullable enable", string.Empty,
		};

		if (this.MockType.Aliases.Length > 0)
		{
			var requiredAliases = this.MockType.Aliases
				.Select(_ => $"extern alias {_};").ToArray();
			content.AddRange([string.Join(Environment.NewLine, requiredAliases), string.Empty]);
		}

		content.AddRange(["using Rocks.Extensions;", string.Empty]);

		content.Add(writer.ToString());

		content.AddRange(["#pragma warning restore CS8618", "#pragma warning restore CS8633", "#pragma warning restore CS8714", "#pragma warning restore CS8775"]);

		var text = SourceText.From(
			string.Join(Environment.NewLine, content),
			Encoding.UTF8);
		var name = $"{this.MockType.Type.FullyQualifiedName.GenerateFileName()}{(this.MockType.IsPartial ? "_Partial" : "")}_Rock_Create.g.cs";
		return (name, text);
	}

	public string Name { get; private set; }
	public SourceText Text { get; private set; }
	private TypeMockModel MockType { get; }
}