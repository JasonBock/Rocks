using System.Reflection;

namespace Rocks.Extensions;

/// <summary>
/// Various extension methods for a <see cref="Type"/>
/// </summary>
/// <remarks>
/// This type is designed to be used from code generated by Rocks,
/// and is not intended for general use. Please refrain from
/// referencing it for any other purposes, as its implementation may change.
/// </remarks>
public static class TypeExtensions
{
	/// <summary>
	/// Gets the description of a member given a member identifier.
	/// </summary>
	/// <param name="self">The type that contains the member.</param>
	/// <param name="identifier">The member identifier.</param>
	/// <returns>A description of the member using Reflection.</returns>
	/// <remarks>
	/// This is primarily used to add the member description
	/// into an exception's message string.
	/// </remarks>
	public static string? GetMemberDescription(this Type self, uint identifier)
	{
		static string GetDescription(MemberInfo member, PropertyAccessor? propertyAccessor) =>
			// Always get to a MethodInfo type. For a property/indexer,
			// get the "get"/"set"/"init" method, and use that.
			member switch
			{
				MethodInfo methodMember => methodMember.ToString().Replace("\"", "\\\""),
				PropertyInfo propertyMember => propertyAccessor! == PropertyAccessor.Get ?
					 propertyMember.GetMethod.ToString().Replace("\"", "\\\"") : propertyMember.SetMethod.ToString().Replace("\"", "\\\""),
				_ => "",
			};

		var bindingFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static;
		return (from member in self.GetMembers(bindingFlags)
				  from memberIdentifier in member.GetCustomAttributes<MemberIdentifierAttribute>()
				  where memberIdentifier is not null
				  where memberIdentifier.Value == identifier
				  select GetDescription(member, memberIdentifier.PropertyAccessor)).FirstOrDefault();
	}
}