//// <auto-generated/>

//#nullable enable

//using MockTests.ProjectionsForIHavePointers;
//using Rocks.Extensions;
//using System.Collections.Generic;
//using System.Collections.Immutable;

//namespace MockTests
//{
//	namespace ProjectionsForIHavePointers
//	{
//		internal unsafe delegate int* get_DataCallback_62644662948694084991903968447217532072342399156();
//		internal unsafe delegate void set_DataCallback_54835225615139759328507410010696482155088342224(int* @value);
//		internal unsafe delegate bool ArgEvaluationForintPointer(int* @value);

//		internal unsafe sealed class ArgForintPointer
//			: global::Rocks.Argument
//		{
//			private readonly global::MockTests.ProjectionsForIHavePointers.ArgEvaluationForintPointer? evaluation;
//			private readonly global::Rocks.ValidationState validation;

//			internal ArgForintPointer() => this.validation = global::Rocks.ValidationState.None;

//			internal ArgForintPointer(global::MockTests.ProjectionsForIHavePointers.ArgEvaluationForintPointer @evaluation)
//			{
//				this.evaluation = @evaluation;
//				this.validation = global::Rocks.ValidationState.Evaluation;
//			}

//			public bool IsValid(int* @value) =>
//				this.validation switch
//				{
//					global::Rocks.ValidationState.None => true,
//					global::Rocks.ValidationState.Evaluation => this.evaluation!(@value),
//					_ => throw new global::System.NotSupportedException("Invalid validation state."),
//				};
//		}
//	}

//	internal sealed class IHavePointersCreateExpectations
//		: global::Rocks.Expectations.ExpectationsV4
//	{
//#pragma warning disable CS8618

//		internal sealed class Handler0
//			: global::Rocks.PointerHandlerV4<global::MockTests.ProjectionsForIHavePointers.get_DataCallback_62644662948694084991903968447217532072342399156, int>
//		{ }

//		internal sealed class Handler1
//			: global::Rocks.HandlerV4<global::MockTests.ProjectionsForIHavePointers.set_DataCallback_54835225615139759328507410010696482155088342224>
//		{
//			public global::Rocks.PointerArgument<int> @value { get; set; }
//		}

//#pragma warning restore CS8618

//		private readonly global::System.Collections.Generic.List<global::MockTests.IHavePointersCreateExpectations.Handler0> @handlers0 = new();
//		private readonly global::System.Collections.Generic.List<global::MockTests.IHavePointersCreateExpectations.Handler1> @handlers1 = new();

//		public override void Verify()
//		{
//			if (this.WasInstanceInvoked)
//			{
//				var failures = new global::System.Collections.Generic.List<string>();

//				failures.AddRange(this.Verify(handlers0));
//				failures.AddRange(this.Verify(handlers1));

//				if (failures.Count > 0)
//				{
//					throw new global::Rocks.Exceptions.VerificationException(failures);
//				}
//			}
//		}

//		private sealed class RockIHavePointers
//			: global::MockTests.IHavePointers
//		{
//			public RockIHavePointers(global::MockTests.IHavePointersCreateExpectations @expectations)
//			{
//				this.Expectations = @expectations;
//			}

//			[global::Rocks.MemberIdentifier(0, "get_Data()")]
//			[global::Rocks.MemberIdentifier(1, "set_Data(value)")]
//			public unsafe int* Data
//			{
//				get
//				{
//					if (this.Expectations.handlers0.Count > 0)
//					{
//						var @handler = this.Expectations.handlers0[0];
//						@handler.CallCount++;
//						var @result = @handler.Callback is not null ?
//							@handler.Callback() : @handler.ReturnValue;
//						return @result!;
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for get_Data())");
//				}
//				set
//				{
//					if (this.Expectations.handlers1.Count > 0)
//					{
//						var @foundMatch = false;
//						foreach (var @handler in this.Expectations.handlers1)
//						{
//							if (@handler.value.IsValid(value!))
//							{
//								@handler.CallCount++;
//								@foundMatch = true;
//								@handler.Callback?.Invoke(value!);

//								if (!@foundMatch)
//								{
//									throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_Data(value)");
//								}

//								break;
//							}
//						}
//					}
//					else
//					{
//						throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for set_Data(value)");
//					}
//				}
//			}

//			private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
//		}
//		internal sealed class IHavePointersPropertyExpectations
//		{
//			internal sealed class IHavePointersPropertyGetterExpectations
//			{
//				internal IHavePointersPropertyGetterExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
//					this.Expectations = expectations;

//				internal global::MockTests.ProjectionsForIHavePointers.PropertyAdornmentsForintPointer<global::MockTests.IHavePointers, global::MockTests.ProjectionsForIHavePointers.get_DataCallback_62644662948694084991903968447217532072342399156> Data()
//				{
//					var handler = new global::MockTests.IHavePointersCreateExpectations.Handler0();
//					this.Expectations.handlers0.Add(handler);
//					return new(handler);
//				}
//				private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
//			}

//			internal sealed class IHavePointersPropertySetterExpectations
//			{
//				internal IHavePointersPropertySetterExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
//					this.Expectations = expectations;

//				internal global::MockTests.ProjectionsForIHavePointers.PropertyAdornmentsForintPointer<global::MockTests.IHavePointers, global::MockTests.ProjectionsForIHavePointers.set_DataCallback_54835225615139759328507410010696482155088342224> Data(global::Rocks.Argument<global::MockTests.ProjectionsForIHavePointers.ArgumentForintPointer> @value)
//				{
//					var handler = new global::MockTests.IHavePointersCreateExpectations.Handler1
//					{
//						value = @value,
//					};

//					this.Expectations.handlers1.Add(handler);
//					return new(handler);
//				}
//				private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
//			}

//			internal IHavePointersPropertyExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
//				(this.Getters, this.Setters) = (new(expectations), new(expectations));

//			internal global::MockTests.IHavePointersCreateExpectations.IHavePointersPropertyExpectations.IHavePointersPropertyGetterExpectations Getters { get; }
//			internal global::MockTests.IHavePointersCreateExpectations.IHavePointersPropertyExpectations.IHavePointersPropertySetterExpectations Setters { get; }
//		}

//		internal global::MockTests.IHavePointersCreateExpectations.IHavePointersPropertyExpectations Properties { get; }

//		internal IHavePointersCreateExpectations() =>
//			(this.Properties) = (new(this));

//		internal global::MockTests.IHavePointers Instance()
//		{
//			if (!this.WasInstanceInvoked)
//			{
//				this.WasInstanceInvoked = true;
//				var @mock = new RockIHavePointers(this);
//				this.MockType = @mock.GetType();
//				return @mock;
//			}
//			else
//			{
//				throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
//			}
//		}
//	}
//}


//namespace MockTests
//{
//	public unsafe interface IHavePointers
//	{
//		int* Data { get; set; }
//	}
//}
