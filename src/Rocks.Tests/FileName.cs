//// <auto-generated/>

//#nullable enable

//using Rocks.Extensions;
//using System.Collections.Generic;
//using System.Collections.Immutable;

//namespace MockTests
//{
//	internal sealed class IMatchObjectOfobjectCreateExpectations
//		: global::Rocks.Expectations.ExpectationsV4
//	{
//#pragma warning disable CS8618

//		internal sealed class Handler0
//			: global::Rocks.HandlerV4<global::System.Func<object?, bool>, bool>
//		{
//			public global::Rocks.Argument<object?> @other { get; set; }
//		}

//		internal sealed class Handler1
//			: global::Rocks.HandlerV4<global::System.Func<object?, object?, bool>, bool>
//		{
//			public global::Rocks.Argument<object?> @objA { get; set; }
//			public global::Rocks.Argument<object?> @objB { get; set; }
//		}

//		internal sealed class Handler2
//			: global::Rocks.HandlerV4<global::System.Func<object>, object>
//		{ }

//#pragma warning restore CS8618

//		private readonly global::System.Collections.Generic.List<global::MockTests.IMatchObjectOfobjectCreateExpectations.Handler0> @handlers0 = new();
//		private readonly global::System.Collections.Generic.List<global::MockTests.IMatchObjectOfobjectCreateExpectations.Handler1> @handlers1 = new();
//		private readonly global::System.Collections.Generic.List<global::MockTests.IMatchObjectOfobjectCreateExpectations.Handler2> @handlers2 = new();

//		public override void Verify()
//		{
//			if (this.WasInstanceInvoked)
//			{
//				var failures = new global::System.Collections.Generic.List<string>();

//				failures.AddRange(this.Verify(handlers0));
//				failures.AddRange(this.Verify(handlers1));
//				failures.AddRange(this.Verify(handlers2));

//				if (failures.Count > 0)
//				{
//					throw new global::Rocks.Exceptions.VerificationException(failures);
//				}
//			}
//		}

//		private sealed class RockIMatchObjectOfobject
//			: global::MockTests.IMatchObject<object>
//		{
//			public RockIMatchObjectOfobject(global::MockTests.IMatchObjectOfobjectCreateExpectations @expectations)
//			{
//				this.Expectations = @expectations;
//			}

//			[global::Rocks.MemberIdentifier(0, "bool global::MockTests.IMatchObject<object>.Equals(object? @other)")]
//			bool global::MockTests.IMatchObject<object>.Equals(object? @other)
//			{
//				if (this.Expectations.handlers0.Count > 0)
//				{
//					foreach (var @handler in this.Expectations.handlers0)
//					{
//						if (@handler.@other.IsValid(@other!))
//						{
//							@handler.CallCount++;
//							var @result = @handler.Callback is not null ?
//								@handler.Callback(@other!) : @handler.ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool global::MockTests.IMatchObject<object>.Equals(object? @other)");
//				}

//				throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for bool global::MockTests.IMatchObject<object>.Equals(object? @other)");
//			}

//			[global::Rocks.MemberIdentifier(1, "bool global::MockTests.IMatchObject<object>.ReferenceEquals(object? @objA, object? @objB)")]
//			bool global::MockTests.IMatchObject<object>.ReferenceEquals(object? @objA, object? @objB)
//			{
//				if (this.Expectations.handlers1.Count > 0)
//				{
//					foreach (var @handler in this.Expectations.handlers1)
//					{
//						if (@handler.@objA.IsValid(@objA!) &&
//							@handler.@objB.IsValid(@objB!))
//						{
//							@handler.CallCount++;
//							var @result = @handler.Callback is not null ?
//								@handler.Callback(@objA!, @objB!) : @handler.ReturnValue;
//							return @result!;
//						}
//					}

//					throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool global::MockTests.IMatchObject<object>.ReferenceEquals(object? @objA, object? @objB)");
//				}

//				throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for bool global::MockTests.IMatchObject<object>.ReferenceEquals(object? @objA, object? @objB)");
//			}

//			[global::Rocks.MemberIdentifier(2, "object global::MockTests.IMatchObject<object>.MemberwiseClone()")]
//			object global::MockTests.IMatchObject<object>.MemberwiseClone()
//			{
//				if (this.Expectations.handlers2.Count > 0)
//				{
//					var @handler = this.Expectations.handlers2[0];
//					@handler.CallCount++;
//					var @result = @handler.Callback is not null ?
//						@handler.Callback() : @handler.ReturnValue;
//					return @result!;
//				}

//				throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for object global::MockTests.IMatchObject<object>.MemberwiseClone()");
//			}

//			private global::MockTests.IMatchObjectOfobjectCreateExpectations Expectations { get; }
//		}

//		internal sealed class IMatchObjectOfobjectExplicitMethodExpectationsForIMatchObjectOfobject
//		{
//			internal IMatchObjectOfobjectExplicitMethodExpectationsForIMatchObjectOfobject(global::MockTests.IMatchObjectOfobjectCreateExpectations expectations) =>
//				this.Expectations = expectations;

//			internal global::Rocks.AdornmentsV4<global::MockTests.IMatchObjectOfobjectCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @other)
//			{
//				global::System.ArgumentNullException.ThrowIfNull(@other);

//				var handler = new global::MockTests.IMatchObjectOfobjectCreateExpectations.Handler0
//				{
//					@other = @other,
//				};

//				this.Expectations.handlers0.Add(handler);
//				return new(handler);
//			}

//			internal global::Rocks.AdornmentsV4<global::MockTests.IMatchObjectOfobjectCreateExpectations.Handler1, global::System.Func<object?, object?, bool>, bool> ReferenceEquals(global::Rocks.Argument<object?> @objA, global::Rocks.Argument<object?> @objB)
//			{
//				global::System.ArgumentNullException.ThrowIfNull(@objA);
//				global::System.ArgumentNullException.ThrowIfNull(@objB);

//				var handler = new global::MockTests.IMatchObjectOfobjectCreateExpectations.Handler1
//				{
//					@objA = @objA,
//					@objB = @objB,
//				};

//				this.Expectations.handlers1.Add(handler);
//				return new(handler);
//			}

//			internal new global::Rocks.AdornmentsV4<global::MockTests.IMatchObjectOfobjectCreateExpectations.Handler2, global::System.Func<object>, object> MemberwiseClone()
//			{
//				var handler = new global::MockTests.IMatchObjectOfobjectCreateExpectations.Handler2();
//				this.Expectations.handlers2.Add(handler);
//				return new(handler);
//			}

//			private global::MockTests.IMatchObjectOfobjectCreateExpectations Expectations { get; }
//		}

//		internal global::MockTests.IMatchObjectOfobjectCreateExpectations.IMatchObjectOfobjectExplicitMethodExpectationsForIMatchObjectOfobject ExplicitMethodsForIMatchObjectOfobject { get; }

//		internal IMatchObjectOfobjectCreateExpectations() =>
//			(this.ExplicitMethodsForIMatchObjectOfobject) = (new(this));

//		internal global::MockTests.IMatchObject<object> Instance()
//		{
//			if (!this.WasInstanceInvoked)
//			{
//				this.WasInstanceInvoked = true;
//				var @mock = new RockIMatchObjectOfobject(this);
//				this.MockType = @mock.GetType();
//				return @mock;
//			}
//			else
//			{
//				throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
//			}
//		}
//	}
//}

//namespace MockTests
//{
//	public interface IMatchObject<T>
//	{
//		bool Equals(T? other);
//		bool ReferenceEquals(T? objA, T? objB);
//		T MemberwiseClone();
//	}
//}
