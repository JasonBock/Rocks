// <auto-generated/>

#nullable enable

using MockTests.ProjectionsForIHavePointers;
using Rocks.Extensions;
using System.Collections.Generic;
using System.Collections.Immutable;

namespace MockTests
{
	namespace ProjectionsForIHavePointers
	{
		internal unsafe delegate delegate*<int, void> FunctionPointerReturnCallback_251504302799091288200726897881163423629002400244();
		internal unsafe class HandlerFordelegatePointerOfint__void
			: global::Rocks.HandlerV4<global::MockTests.ProjectionsForIHavePointers.FunctionPointerReturnCallback_251504302799091288200726897881163423629002400244>
		{
			internal delegate*<int, void> ReturnValue { get; set; }
		}
		internal unsafe sealed class AdornmentsFordelegatePointerOfint__void
			: global::Rocks.AdornmentsV4<HandlerFordelegatePointerOfint__void, global::MockTests.ProjectionsForIHavePointers.FunctionPointerReturnCallback_251504302799091288200726897881163423629002400244>
		{
			internal AdornmentsFordelegatePointerOfint__void(HandlerFordelegatePointerOfint__void handler)
				: base(handler)
			{ }

			internal AdornmentsFordelegatePointerOfint__void ReturnValue(delegate*<int, void> returnValue)
			{
				this.handler.ReturnValue = returnValue;
				return this;
			}
		}
	}

	internal sealed class IHavePointersCreateExpectations
		: global::Rocks.Expectations.ExpectationsV4
	{
		internal sealed class Handler0
			: global::MockTests.ProjectionsForIHavePointers.HandlerFordelegatePointerOfint__void
		{ }

		private readonly global::System.Collections.Generic.List<global::MockTests.IHavePointersCreateExpectations.Handler0> @handlers0 = new();

		public override void Verify()
		{
			if (this.WasInstanceInvoked)
			{
				var failures = new global::System.Collections.Generic.List<string>();

				failures.AddRange(this.Verify(handlers0));

				if (failures.Count > 0)
				{
					throw new global::Rocks.Exceptions.VerificationException(failures);
				}
			}
		}

		private sealed class RockIHavePointers
			: global::MockTests.IHavePointers
		{
			public RockIHavePointers(global::MockTests.IHavePointersCreateExpectations @expectations)
			{
				this.Expectations = @expectations;
			}

			[global::Rocks.MemberIdentifier(0, "delegate*<int, void> FunctionPointerReturn()")]
			public unsafe delegate*<int, void> FunctionPointerReturn()
			{
				if (this.Expectations.handlers0.Count > 0)
				{
					var @handler = this.Expectations.handlers0[0];
					@handler.CallCount++;
					var @result = @handler.Callback is not null ?
						@handler.Callback() : @handler.ReturnValue;
					return @result!;
				}

				throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for unsafe delegate*<int, void> FunctionPointerReturn()");
			}

			private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
		}

		internal sealed class IHavePointersMethodExpectations
		{
			internal IHavePointersMethodExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
				this.Expectations = expectations;

			internal global::MockTests.ProjectionsForIHavePointers.AdornmentsFordelegatePointerOfint__void FunctionPointerReturn()
			{
				var handler = new global::MockTests.IHavePointersCreateExpectations.Handler0();
				this.Expectations.handlers0.Add(handler);
				return new(handler);
			}

			private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
		}

		internal global::MockTests.IHavePointersCreateExpectations.IHavePointersMethodExpectations Methods { get; }

		internal IHavePointersCreateExpectations() =>
			(this.Methods) = (new(this));

		internal global::MockTests.IHavePointers Instance()
		{
			if (!this.WasInstanceInvoked)
			{
				this.WasInstanceInvoked = true;
				var @mock = new RockIHavePointers(this);
				this.MockType = @mock.GetType();
				return @mock;
			}
			else
			{
				throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
			}
		}
	}
}

namespace MockTests
{
	public unsafe interface IHavePointers
	{
		delegate*<int, void> FunctionPointerReturn();
	}
}
