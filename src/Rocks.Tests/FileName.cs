// <auto-generated/>

#nullable enable

using MockTests.ProjectionsForIHavePointers;
using Rocks.Extensions;
using System.Collections.Generic;
using System.Collections.Immutable;

namespace MockTests
{
	namespace ProjectionsForIHavePointers
	{
		internal unsafe delegate delegate*<int, void> get_ItemCallback_544565603059154913763960422018104775893635174208(string @index);
		internal unsafe delegate void set_ItemCallback_639797374395471112019498606510044262758696353188(string @index, delegate*<int, void> @value);
		internal unsafe delegate bool ArgEvaluationFordelegatePointerOfint__void(delegate*<int, void> @value);

		internal unsafe sealed class ArgFordelegatePointerOfint__void
			: global::Rocks.Argument
		{
			private readonly global::MockTests.ProjectionsForIHavePointers.ArgEvaluationFordelegatePointerOfint__void? evaluation;
			private readonly global::Rocks.ValidationState validation;

			internal ArgFordelegatePointerOfint__void() => this.validation = global::Rocks.ValidationState.None;

			internal ArgFordelegatePointerOfint__void(global::MockTests.ProjectionsForIHavePointers.ArgEvaluationFordelegatePointerOfint__void @evaluation)
			{
				this.evaluation = @evaluation;
				this.validation = global::Rocks.ValidationState.Evaluation;
			}

			public bool IsValid(delegate*<int, void> @value) =>
				this.validation switch
				{
					global::Rocks.ValidationState.None => true,
					global::Rocks.ValidationState.Evaluation => this.evaluation!(@value),
					_ => throw new global::System.NotSupportedException("Invalid validation state."),
				};
		}
		internal unsafe class HandlerFordelegatePointerOfint__void
			: global::Rocks.HandlerV4<global::MockTests.ProjectionsForIHavePointers.get_ItemCallback_544565603059154913763960422018104775893635174208>
		{
			internal delegate*<int, void> ReturnValue { get; set; }
		}
		internal unsafe sealed class AdornmentsFordelegatePointerOfint__void
			: global::Rocks.AdornmentsV4<HandlerFordelegatePointerOfint__void, global::MockTests.ProjectionsForIHavePointers.get_ItemCallback_544565603059154913763960422018104775893635174208>
		{
			internal AdornmentsFordelegatePointerOfint__void(HandlerFordelegatePointerOfint__void handler)
				: base(handler)
			{ }

			internal AdornmentsFordelegatePointerOfint__void ReturnValue(delegate*<int, void> returnValue)
			{
				this.handler.ReturnValue = returnValue;
				return this;
			}
		}
	}

	internal sealed class IHavePointersCreateExpectations
		: global::Rocks.Expectations.ExpectationsV4
	{
#pragma warning disable CS8618

		internal sealed class Handler0
			: global::MockTests.ProjectionsForIHavePointers.HandlerFordelegatePointerOfint__void
		{
			public global::Rocks.Argument<string> @index { get; set; }
		}

		internal sealed class Handler1
			: global::Rocks.HandlerV4<global::MockTests.ProjectionsForIHavePointers.set_ItemCallback_639797374395471112019498606510044262758696353188>
		{
			public global::Rocks.Argument<string> @index { get; set; }
			public global::MockTests.ProjectionsForIHavePointers.ArgFordelegatePointerOfint__void @value { get; set; }
		}

#pragma warning restore CS8618

		private readonly global::System.Collections.Generic.List<global::MockTests.IHavePointersCreateExpectations.Handler0> @handlers0 = new();
		private readonly global::System.Collections.Generic.List<global::MockTests.IHavePointersCreateExpectations.Handler1> @handlers1 = new();

		public override void Verify()
		{
			if (this.WasInstanceInvoked)
			{
				var failures = new global::System.Collections.Generic.List<string>();

				failures.AddRange(this.Verify(handlers0));
				failures.AddRange(this.Verify(handlers1));

				if (failures.Count > 0)
				{
					throw new global::Rocks.Exceptions.VerificationException(failures);
				}
			}
		}

		private sealed class RockIHavePointers
			: global::MockTests.IHavePointers
		{
			public RockIHavePointers(global::MockTests.IHavePointersCreateExpectations @expectations)
			{
				this.Expectations = @expectations;
			}

			[global::Rocks.MemberIdentifier(0, "this[string @index]")]
			[global::Rocks.MemberIdentifier(1, "this[string @index]")]
			public unsafe delegate*<int, void> this[string @index]
			{
				get
				{
					if (this.Expectations.handlers0.Count > 0)
					{
						foreach (var @handler in this.Expectations.handlers0)
						{
							if (@handler.@index.IsValid(@index!))
							{
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback(@index!) : @handler.ReturnValue;
								return @result!;
							}
						}

						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[string @index]");
					}

					throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[string @index])");
				}
				set
				{
					if (this.Expectations.handlers1.Count > 0)
					{
						foreach (var @handler in this.Expectations.handlers1)
						{
							if (@handler.@index.IsValid(@index!) &&
								@handler.@value.IsValid(@value!))
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke(@index!, @value!);
								return;
							}
						}

						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[string @index]");
					}

					throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[string @index])");
				}
			}

			private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
		}
		internal sealed class IHavePointersIndexerExpectations
		{
			internal sealed class IHavePointersIndexerGetterExpectations
			{
				internal IHavePointersIndexerGetterExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
					this.Expectations = expectations;

				internal global::MockTests.ProjectionsForIHavePointers.AdornmentsFordelegatePointerOfint__void This(global::Rocks.Argument<string> @index)
				{
					global::System.ArgumentNullException.ThrowIfNull(@index);

					var handler = new global::MockTests.IHavePointersCreateExpectations.Handler0
					{
						@index = @index,
					};

					this.Expectations.handlers0.Add(handler);
					return new(handler);
				}
				private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
			}

			internal sealed class IHavePointersIndexerSetterExpectations
			{
				internal IHavePointersIndexerSetterExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
					this.Expectations = expectations;

				internal global::Rocks.AdornmentsV4<Handler1, set_ItemCallback_639797374395471112019498606510044262758696353188> This(global::MockTests.ProjectionsForIHavePointers.ArgFordelegatePointerOfint__void @value, global::Rocks.Argument<string> @index)
				{
					global::System.ArgumentNullException.ThrowIfNull(@index);
					global::System.ArgumentNullException.ThrowIfNull(@value);

					var handler = new global::MockTests.IHavePointersCreateExpectations.Handler1
					{
						@index = @index,
						@value = @value,
					};

					this.Expectations.handlers1.Add(handler);
					return new(handler);
				}
				private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
			}

			internal IHavePointersIndexerExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
				(this.Getters, this.Setters) = (new(expectations), new(expectations));

			internal global::MockTests.IHavePointersCreateExpectations.IHavePointersIndexerExpectations.IHavePointersIndexerGetterExpectations Getters { get; }
			internal global::MockTests.IHavePointersCreateExpectations.IHavePointersIndexerExpectations.IHavePointersIndexerSetterExpectations Setters { get; }
		}

		internal global::MockTests.IHavePointersCreateExpectations.IHavePointersIndexerExpectations Indexers { get; }

		internal IHavePointersCreateExpectations() =>
			(this.Indexers) = (new(this));

		internal global::MockTests.IHavePointers Instance()
		{
			if (!this.WasInstanceInvoked)
			{
				this.WasInstanceInvoked = true;
				var @mock = new RockIHavePointers(this);
				this.MockType = @mock.GetType();
				return @mock;
			}
			else
			{
				throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
			}
		}
	}
}


namespace MockTests
{
	public unsafe interface IHavePointers
	{
		delegate*<int, void> this[string index] { get; set; }
	}
}
