// <auto-generated/>

#nullable enable

using MockTests.ProjectionsForIHavePointers;
using Rocks.Extensions;
using System.Collections.Generic;
using System.Collections.Immutable;

namespace MockTests
{
	namespace ProjectionsForIHavePointers
	{
		internal unsafe delegate string get_ItemCallback_358841955163324583119694615602880815135165759209(int* @index);
		internal unsafe delegate void set_ItemCallback_670704542699972028623331848601141915565982287732(int* @index, string @value);
	}

	internal sealed class IHavePointersCreateExpectations
		: global::Rocks.Expectations.ExpectationsV4
	{
#pragma warning disable CS8618

		internal sealed class Handler0
			: global::Rocks.HandlerV4<global::MockTests.ProjectionsForIHavePointers.get_ItemCallback_358841955163324583119694615602880815135165759209, string>
		{
			public global::Rocks.PointerArgument<int> @index { get; set; }
		}

		internal sealed class Handler1
			: global::Rocks.HandlerV4<global::MockTests.ProjectionsForIHavePointers.set_ItemCallback_670704542699972028623331848601141915565982287732>
		{
			public global::Rocks.PointerArgument<int> @index { get; set; }
			public global::Rocks.Argument<string> @value { get; set; }
		}

#pragma warning restore CS8618

		private readonly global::System.Collections.Generic.List<global::MockTests.IHavePointersCreateExpectations.Handler0> @handlers0 = new();
		private readonly global::System.Collections.Generic.List<global::MockTests.IHavePointersCreateExpectations.Handler1> @handlers1 = new();

		public override void Verify()
		{
			if (this.WasInstanceInvoked)
			{
				var failures = new global::System.Collections.Generic.List<string>();

				failures.AddRange(this.Verify(handlers0));
				failures.AddRange(this.Verify(handlers1));

				if (failures.Count > 0)
				{
					throw new global::Rocks.Exceptions.VerificationException(failures);
				}
			}
		}

		private sealed class RockIHavePointers
			: global::MockTests.IHavePointers
		{
			public RockIHavePointers(global::MockTests.IHavePointersCreateExpectations @expectations)
			{
				this.Expectations = @expectations;
			}

			[global::Rocks.MemberIdentifier(0, "this[int* @index]")]
			[global::Rocks.MemberIdentifier(1, "this[int* @index]")]
			public unsafe string this[int* @index]
			{
				get
				{
					if (this.Expectations.handlers0.Count > 0)
					{
						foreach (var @handler in this.Expectations.handlers0)
						{
							if (@handler.@index.IsValid(@index!))
							{
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback(@index!) : @handler.ReturnValue;
								return @result!;
							}
						}

						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[int* @index]");
					}

					throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[int* @index])");
				}
				set
				{
					if (this.Expectations.handlers1.Count > 0)
					{
						foreach (var @handler in this.Expectations.handlers1)
						{
							if (@handler.@index.IsValid(@index!) &&
								@handler.@value.IsValid(@value!))
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke(@index!, @value!);
								return;
							}
						}

						throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[int* @index]");
					}

					throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[int* @index])");
				}
			}

			private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
		}
		internal sealed class IHavePointersIndexerExpectations
		{
			internal sealed class IHavePointersIndexerGetterExpectations
			{
				internal IHavePointersIndexerGetterExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
					this.Expectations = expectations;

				internal global::Rocks.AdornmentsV4<global::MockTests.IHavePointersCreateExpectations.Handler0, global::MockTests.ProjectionsForIHavePointers.get_ItemCallback_358841955163324583119694615602880815135165759209, string> This(global::Rocks.PointerArgument<int> @index)
				{
					global::System.ArgumentNullException.ThrowIfNull(@index);

					var handler = new global::MockTests.IHavePointersCreateExpectations.Handler0
					{
						@index = @index,
					};

					this.Expectations.handlers0.Add(handler);
					return new(handler);
				}
				private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
			}

			internal sealed class IHavePointersIndexerSetterExpectations
			{
				internal IHavePointersIndexerSetterExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
					this.Expectations = expectations;

				internal global::Rocks.AdornmentsV4<global::MockTests.IHavePointersCreateExpectations.Handler1, global::MockTests.ProjectionsForIHavePointers.set_ItemCallback_670704542699972028623331848601141915565982287732> This(global::Rocks.Argument<string> @value, global::Rocks.PointerArgument<int> @index)
				{
					global::System.ArgumentNullException.ThrowIfNull(@index);
					global::System.ArgumentNullException.ThrowIfNull(@value);

					var handler = new global::MockTests.IHavePointersCreateExpectations.Handler1
					{
						@index = @index,
						@value = @value,
					};

					this.Expectations.handlers1.Add(handler);
					return new(handler);
				}
				private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
			}

			internal IHavePointersIndexerExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
				(this.Getters, this.Setters) = (new(expectations), new(expectations));

			internal global::MockTests.IHavePointersCreateExpectations.IHavePointersIndexerExpectations.IHavePointersIndexerGetterExpectations Getters { get; }
			internal global::MockTests.IHavePointersCreateExpectations.IHavePointersIndexerExpectations.IHavePointersIndexerSetterExpectations Setters { get; }
		}

		internal global::MockTests.IHavePointersCreateExpectations.IHavePointersIndexerExpectations Indexers { get; }

		internal IHavePointersCreateExpectations() =>
			(this.Indexers) = (new(this));

		internal global::MockTests.IHavePointers Instance()
		{
			if (!this.WasInstanceInvoked)
			{
				this.WasInstanceInvoked = true;
				var @mock = new RockIHavePointers(this);
				this.MockType = @mock.GetType();
				return @mock;
			}
			else
			{
				throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
			}
		}
	}
}


namespace MockTests
{
	public unsafe interface IHavePointers
	{
#pragma warning disable CA1043 // Use Integral Or String Argument For Indexers
	  string this[int* index] { get; set; }
#pragma warning restore CA1043 // Use Integral Or String Argument For Indexers
   }
}
