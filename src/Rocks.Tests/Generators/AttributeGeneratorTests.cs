using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Testing;
using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class AttributeGeneratorTests
{
	[Test]
	public static async Task CreateWithAttributesNotObsoleteAndObsoleteOnMockAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			using System.Reflection;
			using System.Runtime.InteropServices;

			[assembly: RockCreate<IItems>]

			#nullable enable

			[DefaultMember("Item")]
			[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
			[Obsolete("old")]
			public interface IItems
			{
				int Length { get; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class IItemsCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				private global::System.Collections.Generic.List<global::IItemsCreateExpectations.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				[type: global::System.ObsoleteAttribute("old")]
				private sealed class Mock
					: global::IItems
				{
					public Mock(global::IItemsCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "get_Length()")]
					public int Length
					{
						get
						{
							if (this.Expectations.handlers0?.Count > 0)
							{
								var @handler = this.Expectations.handlers0[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for get_Length())");
						}
					}
					
					private global::IItemsCreateExpectations Expectations { get; }
				}
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertyGetterExpectations
					{
						internal PropertyGetterExpectations(global::IItemsCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::IItemsCreateExpectations.Handler0, global::System.Func<int>, int> Length()
						{
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
							var handler = new global::IItemsCreateExpectations.Handler0();
							this.Expectations.handlers0.Add(handler);
							return new(handler);
						}
						private global::IItemsCreateExpectations Expectations { get; }
					}
					
					
					internal PropertyExpectations(global::IItemsCreateExpectations expectations) =>
						(this.Getters) = (new(expectations));
					
					internal global::IItemsCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
				}
				
				internal global::IItemsCreateExpectations.PropertyExpectations Properties { get; }
				
				internal IItemsCreateExpectations() =>
					(this.Properties) = (new(this));
				
				internal global::IItems Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IItems_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task CreateWithConditionalAsync()
	{
		var code =
			"""
			using Rocks;
			using System.Diagnostics;

			[assembly: RockCreate<ConventionDispatcher>]

			public class ConventionDispatcher
			{
				[Conditional("DEBUG")]
				public virtual void AssertNoScope() { }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class ConventionDispatcherCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Action>
				{ }
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::ConventionDispatcherCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::ConventionDispatcherCreateExpectations.Handler1>? @handlers1;
				private global::System.Collections.Generic.List<global::ConventionDispatcherCreateExpectations.Handler2>? @handlers2;
				private global::System.Collections.Generic.List<global::ConventionDispatcherCreateExpectations.Handler3>? @handlers3;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1)); }
						if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2)); }
						if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::ConventionDispatcher
				{
					public Mock(global::ConventionDispatcherCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1?.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2?.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "void AssertNoScope()")]
					public override void AssertNoScope()
					{
						if (this.Expectations.handlers3?.Count > 0)
						{
							var @handler = this.Expectations.handlers3[0];
							@handler.CallCount++;
							@handler.Callback?.Invoke();
						}
						else
						{
							base.AssertNoScope();
						}
					}
					
					private global::ConventionDispatcherCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::ConventionDispatcherCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::ConventionDispatcherCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::ConventionDispatcherCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::ConventionDispatcherCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
						var handler = new global::ConventionDispatcherCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::ConventionDispatcherCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
						var handler = new global::ConventionDispatcherCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::ConventionDispatcherCreateExpectations.Handler3, global::System.Action> AssertNoScope()
					{
						if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(); }
						var handler = new global::ConventionDispatcherCreateExpectations.Handler3();
						this.Expectations.handlers3.Add(handler);
						return new(handler);
					}
					
					private global::ConventionDispatcherCreateExpectations Expectations { get; }
				}
				
				internal global::ConventionDispatcherCreateExpectations.MethodExpectations Methods { get; }
				
				internal ConventionDispatcherCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::ConventionDispatcher Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "ConventionDispatcher_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task CreateWithNotNullIfNotNullAsync()
	{
		var code =
			"""
			using Rocks;
			using System.Diagnostics.CodeAnalysis;

			[assembly: RockCreate<NotNullIfNotCases>]

			#nullable enable
	
			public class NotNullIfNotCases
			{
				[return: NotNullIfNotNull(nameof(node))]
				public virtual object? VisitMethod(object? node) => default;

				[NotNullIfNotNull("value")]
				public virtual string? VisitProperty { get; set; }

				[NotNullIfNotNull(nameof(node))]
				public virtual string? this[object? node] { get => default; set { } }

				public virtual object? VisitParameter([NotNullIfNotNull(nameof(node))] object? node) => default;
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class NotNullIfNotCasesCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Func<object?, object?>, object?>
				{
					public global::Rocks.Argument<object?> @node { get; set; }
				}
				
				internal sealed class Handler4
					: global::Rocks.Handler<global::System.Func<object?, object?>, object?>
				{
					public global::Rocks.Argument<object?> @node { get; set; }
				}
				
				internal sealed class Handler5
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler6
					: global::Rocks.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Argument<string?> @value { get; set; }
				}
				
				internal sealed class Handler7
					: global::Rocks.Handler<global::System.Func<object?, string?>, string?>
				{
					public global::Rocks.Argument<object?> @node { get; set; }
				}
				
				internal sealed class Handler8
					: global::Rocks.Handler<global::System.Action<object?, string?>>
				{
					public global::Rocks.Argument<object?> @node { get; set; }
					public global::Rocks.Argument<string?> @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::NotNullIfNotCasesCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::NotNullIfNotCasesCreateExpectations.Handler1>? @handlers1;
				private global::System.Collections.Generic.List<global::NotNullIfNotCasesCreateExpectations.Handler2>? @handlers2;
				private global::System.Collections.Generic.List<global::NotNullIfNotCasesCreateExpectations.Handler3>? @handlers3;
				private global::System.Collections.Generic.List<global::NotNullIfNotCasesCreateExpectations.Handler4>? @handlers4;
				private global::System.Collections.Generic.List<global::NotNullIfNotCasesCreateExpectations.Handler5>? @handlers5;
				private global::System.Collections.Generic.List<global::NotNullIfNotCasesCreateExpectations.Handler6>? @handlers6;
				private global::System.Collections.Generic.List<global::NotNullIfNotCasesCreateExpectations.Handler7>? @handlers7;
				private global::System.Collections.Generic.List<global::NotNullIfNotCasesCreateExpectations.Handler8>? @handlers8;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1)); }
						if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2)); }
						if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3)); }
						if (this.handlers4?.Count > 0) { failures.AddRange(this.Verify(this.handlers4)); }
						if (this.handlers5?.Count > 0) { failures.AddRange(this.Verify(this.handlers5)); }
						if (this.handlers6?.Count > 0) { failures.AddRange(this.Verify(this.handlers6)); }
						if (this.handlers7?.Count > 0) { failures.AddRange(this.Verify(this.handlers7)); }
						if (this.handlers8?.Count > 0) { failures.AddRange(this.Verify(this.handlers8)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::NotNullIfNotCases
				{
					public Mock(global::NotNullIfNotCasesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1?.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2?.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute("node")]
					[global::Rocks.MemberIdentifier(3, "object? VisitMethod(object? @node)")]
					public override object? VisitMethod(object? @node)
					{
						if (this.Expectations.handlers3?.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers3)
							{
								if (@handler.@node.IsValid(@node!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@node!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for object? VisitMethod(object? @node)");
						}
						else
						{
							return base.VisitMethod(node: @node!);
						}
					}
					
					[global::Rocks.MemberIdentifier(4, "object? VisitParameter(object? @node)")]
					public override object? VisitParameter([global::System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute("node")] object? @node)
					{
						if (this.Expectations.handlers4?.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers4)
							{
								if (@handler.@node.IsValid(@node!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@node!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for object? VisitParameter([global::System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute(\"node\")] object? @node)");
						}
						else
						{
							return base.VisitParameter(node: @node!);
						}
					}
					
					[global::System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute("value")]
					[global::Rocks.MemberIdentifier(5, "get_VisitProperty()")]
					[global::Rocks.MemberIdentifier(6, "set_VisitProperty(value)")]
					public override string? VisitProperty
					{
						get
						{
							if (this.Expectations.handlers5?.Count > 0)
							{
								var @handler = this.Expectations.handlers5[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.VisitProperty;
							}
						}
						set
						{
							if (this.Expectations.handlers6?.Count > 0)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers6)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_VisitProperty(value)");
										}
										
										break;
									}
								}
							}
							else
							{
								base.VisitProperty = value!;
							}
						}
					}
					
					[global::System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute("node")]
					[global::Rocks.MemberIdentifier(7, "this[object? @node]")]
					[global::Rocks.MemberIdentifier(8, "this[object? @node]")]
					public override string? this[object? @node]
					{
						get
						{
							if (this.Expectations.handlers7?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers7)
								{
									if (@handler.@node.IsValid(@node!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@node!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[object? @node]");
							}
							else
							{
								return base[node: @node!];
							}
						}
						set
						{
							if (this.Expectations.handlers8?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers8)
								{
									if (@handler.@node.IsValid(@node!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@node!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[object? @node]");
							}
							else
							{
								base[node: @node!] = @value!;
							}
						}
					}
					
					private global::NotNullIfNotCasesCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::NotNullIfNotCasesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::NotNullIfNotCasesCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::NotNullIfNotCasesCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::NotNullIfNotCasesCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
						var handler = new global::NotNullIfNotCasesCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::NotNullIfNotCasesCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
						var handler = new global::NotNullIfNotCasesCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::NotNullIfNotCasesCreateExpectations.Handler3, global::System.Func<object?, object?>, object?> VisitMethod(global::Rocks.Argument<object?> @node)
					{
						global::System.ArgumentNullException.ThrowIfNull(@node);
						
						var handler = new global::NotNullIfNotCasesCreateExpectations.Handler3
						{
							@node = @node,
						};
						
						if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(); }
						this.Expectations.handlers3.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::NotNullIfNotCasesCreateExpectations.Handler4, global::System.Func<object?, object?>, object?> VisitParameter(global::Rocks.Argument<object?> @node)
					{
						global::System.ArgumentNullException.ThrowIfNull(@node);
						
						var handler = new global::NotNullIfNotCasesCreateExpectations.Handler4
						{
							@node = @node,
						};
						
						if (this.Expectations.handlers4 is null ) { this.Expectations.handlers4 = new(); }
						this.Expectations.handlers4.Add(handler);
						return new(handler);
					}
					
					private global::NotNullIfNotCasesCreateExpectations Expectations { get; }
				}
				
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertyGetterExpectations
					{
						internal PropertyGetterExpectations(global::NotNullIfNotCasesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::NotNullIfNotCasesCreateExpectations.Handler5, global::System.Func<string?>, string?> VisitProperty()
						{
							if (this.Expectations.handlers5 is null ) { this.Expectations.handlers5 = new(); }
							var handler = new global::NotNullIfNotCasesCreateExpectations.Handler5();
							this.Expectations.handlers5.Add(handler);
							return new(handler);
						}
						private global::NotNullIfNotCasesCreateExpectations Expectations { get; }
					}
					
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::NotNullIfNotCasesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::NotNullIfNotCasesCreateExpectations.Handler6, global::System.Action<string?>> VisitProperty(global::Rocks.Argument<string?> @value)
						{
							var handler = new global::NotNullIfNotCasesCreateExpectations.Handler6
							{
								value = @value,
							};
						
							if (this.Expectations.handlers6 is null ) { this.Expectations.handlers6 = new(); }
							this.Expectations.handlers6.Add(handler);
							return new(handler);
						}
						private global::NotNullIfNotCasesCreateExpectations Expectations { get; }
					}
					
					internal PropertyExpectations(global::NotNullIfNotCasesCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::NotNullIfNotCasesCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
					internal global::NotNullIfNotCasesCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerGetterExpectations
					{
						internal IndexerGetterExpectations(global::NotNullIfNotCasesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::NotNullIfNotCasesCreateExpectations.Handler7, global::System.Func<object?, string?>, string?> This(global::Rocks.Argument<object?> @node)
						{
							global::System.ArgumentNullException.ThrowIfNull(@node);
							
							var handler = new global::NotNullIfNotCasesCreateExpectations.Handler7
							{
								@node = @node,
							};
							
							if (this.Expectations.handlers7 is null ) { this.Expectations.handlers7 = new(); }
							this.Expectations.handlers7.Add(handler);
							return new(handler);
						}
						private global::NotNullIfNotCasesCreateExpectations Expectations { get; }
					}
					
					internal sealed class IndexerSetterExpectations
					{
						internal IndexerSetterExpectations(global::NotNullIfNotCasesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::NotNullIfNotCasesCreateExpectations.Handler8, global::System.Action<object?, string?>> This(global::Rocks.Argument<string?> @value, global::Rocks.Argument<object?> @node)
						{
							global::System.ArgumentNullException.ThrowIfNull(@node);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var handler = new global::NotNullIfNotCasesCreateExpectations.Handler8
							{
								@node = @node,
								@value = @value,
							};
							
							if (this.Expectations.handlers8 is null ) { this.Expectations.handlers8 = new(); }
							this.Expectations.handlers8.Add(handler);
							return new(handler);
						}
						private global::NotNullIfNotCasesCreateExpectations Expectations { get; }
					}
					
					internal IndexerExpectations(global::NotNullIfNotCasesCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::NotNullIfNotCasesCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
					internal global::NotNullIfNotCasesCreateExpectations.IndexerExpectations.IndexerSetterExpectations Setters { get; }
				}
				
				internal global::NotNullIfNotCasesCreateExpectations.MethodExpectations Methods { get; }
				internal global::NotNullIfNotCasesCreateExpectations.PropertyExpectations Properties { get; }
				internal global::NotNullIfNotCasesCreateExpectations.IndexerExpectations Indexers { get; }
				
				internal NotNullIfNotCasesCreateExpectations() =>
					(this.Methods, this.Properties, this.Indexers) = (new(this), new(this), new(this));
				
				internal global::NotNullIfNotCases Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "NotNullIfNotCases_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task CreateWithTupleNamesAsync()
	{
		var tupleCode =
			"""
			public interface IUseTuples
			{
				(nint Display, nuint Window)? X11 { get; }
			}
			""";
		var tupleSyntaxTree = CSharpSyntaxTree.ParseText(tupleCode);
		var tupleCompilation = CSharpCompilation.Create("internal", new SyntaxTree[] { tupleSyntaxTree },
			Shared.References.Value,
			new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
		using var tupleStream = new MemoryStream();
		tupleCompilation.Emit(tupleStream);
		tupleStream.Position = 0;
		var tupleReference = MetadataReference.CreateFromStream(tupleStream);

		var code =
			"""
			using Rocks;

			[assembly: RockCreate<IUseTuples>]
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class IUseTuplesCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<(nint Display, nuint Window)?>, (nint Display, nuint Window)?>
				{ }
				
				private global::System.Collections.Generic.List<global::IUseTuplesCreateExpectations.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IUseTuples
				{
					public Mock(global::IUseTuplesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "get_X11()")]
					public (nint Display, nuint Window)? X11
					{
						get
						{
							if (this.Expectations.handlers0?.Count > 0)
							{
								var @handler = this.Expectations.handlers0[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for get_X11())");
						}
					}
					
					private global::IUseTuplesCreateExpectations Expectations { get; }
				}
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertyGetterExpectations
					{
						internal PropertyGetterExpectations(global::IUseTuplesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::IUseTuplesCreateExpectations.Handler0, global::System.Func<(nint Display, nuint Window)?>, (nint Display, nuint Window)?> X11()
						{
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
							var handler = new global::IUseTuplesCreateExpectations.Handler0();
							this.Expectations.handlers0.Add(handler);
							return new(handler);
						}
						private global::IUseTuplesCreateExpectations Expectations { get; }
					}
					
					
					internal PropertyExpectations(global::IUseTuplesCreateExpectations expectations) =>
						(this.Getters) = (new(expectations));
					
					internal global::IUseTuplesCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
				}
				
				internal global::IUseTuplesCreateExpectations.PropertyExpectations Properties { get; }
				
				internal IUseTuplesCreateExpectations() =>
					(this.Properties) = (new(this));
				
				internal global::IUseTuples Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";
		
		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IUseTuples_Rock_Create.g.cs", generatedCode) },
			[],
			additionalReferences: Shared.References.Value.Concat(new[] { tupleReference as MetadataReference })).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWithDynamicAttributeAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			using System.Runtime.CompilerServices;

			[assembly: RockCreate<HaveDynamic>]

			public class HaveDynamic
			{
				[return: Dynamic]
				protected virtual dynamic CreateDynamicRecord() => default;
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class HaveDynamicCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Func<dynamic>, dynamic>
				{ }
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::HaveDynamicCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::HaveDynamicCreateExpectations.Handler1>? @handlers1;
				private global::System.Collections.Generic.List<global::HaveDynamicCreateExpectations.Handler2>? @handlers2;
				private global::System.Collections.Generic.List<global::HaveDynamicCreateExpectations.Handler3>? @handlers3;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1)); }
						if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2)); }
						if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::HaveDynamic
				{
					public Mock(global::HaveDynamicCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1?.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2?.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "dynamic CreateDynamicRecord()")]
					protected override dynamic CreateDynamicRecord()
					{
						if (this.Expectations.handlers3?.Count > 0)
						{
							var @handler = this.Expectations.handlers3[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.CreateDynamicRecord();
						}
					}
					
					private global::HaveDynamicCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::HaveDynamicCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::HaveDynamicCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::HaveDynamicCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::HaveDynamicCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
						var handler = new global::HaveDynamicCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::HaveDynamicCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
						var handler = new global::HaveDynamicCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::HaveDynamicCreateExpectations.Handler3, global::System.Func<dynamic>, dynamic> CreateDynamicRecord()
					{
						if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(); }
						var handler = new global::HaveDynamicCreateExpectations.Handler3();
						this.Expectations.handlers3.Add(handler);
						return new(handler);
					}
					
					private global::HaveDynamicCreateExpectations Expectations { get; }
				}
				
				internal global::HaveDynamicCreateExpectations.MethodExpectations Methods { get; }
				
				internal HaveDynamicCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::HaveDynamic Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		// The diagnostic is coming from the method definition in code,
		// which we have to have to ensure the generator doesn't emit [Dynamic],
		// so it's expected to get CS1970.
		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "HaveDynamic_Rock_Create.g.cs", generatedCode) },
			new[] { DiagnosticResult.CompilerError("CS1970").WithSpan(9, 11, 9, 18) }).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWithGenericAttributeAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			using System.Diagnostics.CodeAnalysis;

			[assembly: RockCreate<MockTests.IHaveGenericAttribute>]

			namespace MockTests
			{
				[AttributeUsage(AttributeTargets.Method)]
				public sealed class MyAttribute<T>
					: Attribute { }

				public interface IHaveGenericAttribute
				{
					 [MyAttribute<string>]
					 void Foo();
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			namespace MockTests
			{
				internal sealed class IHaveGenericAttributeCreateExpectations
					: global::Rocks.Expectations
				{
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Action>
					{ }
					
					private global::System.Collections.Generic.List<global::MockTests.IHaveGenericAttributeCreateExpectations.Handler0>? @handlers0;
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.IHaveGenericAttribute
					{
						public Mock(global::MockTests.IHaveGenericAttributeCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::MockTests.MyAttribute<string>]
						[global::Rocks.MemberIdentifier(0, "void Foo()")]
						public void Foo()
						{
							if (this.Expectations.handlers0?.Count > 0)
							{
								var @handler = this.Expectations.handlers0[0];
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void Foo()");
							}
						}
						
						private global::MockTests.IHaveGenericAttributeCreateExpectations Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.IHaveGenericAttributeCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::MockTests.IHaveGenericAttributeCreateExpectations.Handler0, global::System.Action> Foo()
						{
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
							var handler = new global::MockTests.IHaveGenericAttributeCreateExpectations.Handler0();
							this.Expectations.handlers0.Add(handler);
							return new(handler);
						}
						
						private global::MockTests.IHaveGenericAttributeCreateExpectations Expectations { get; }
					}
					
					internal global::MockTests.IHaveGenericAttributeCreateExpectations.MethodExpectations Methods { get; }
					
					internal IHaveGenericAttributeCreateExpectations() =>
						(this.Methods) = (new(this));
					
					internal global::MockTests.IHaveGenericAttribute Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MockTests.IHaveGenericAttribute_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWithMultipleAttributesOnMethodParameterAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			using System.Diagnostics.CodeAnalysis;

			[assembly: RockCreate<MockTests.IHaveMultipleAttributes>]

			namespace MockTests
			{
				[AttributeUsage(AttributeTargets.Parameter)]
				public sealed class ParameterOneAttribute
					: Attribute { }

				[AttributeUsage(AttributeTargets.Parameter)]
				public sealed class ParameterTwoAttribute
					: Attribute { }				

				public interface IHaveMultipleAttributes
				{
					void Foo([ParameterOne, ParameterTwo] string data);
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			namespace MockTests
			{
				internal sealed class IHaveMultipleAttributesCreateExpectations
					: global::Rocks.Expectations
				{
					#pragma warning disable CS8618
					
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Action<string>>
					{
						public global::Rocks.Argument<string> @data { get; set; }
					}
					
					#pragma warning restore CS8618
					
					private global::System.Collections.Generic.List<global::MockTests.IHaveMultipleAttributesCreateExpectations.Handler0>? @handlers0;
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.IHaveMultipleAttributes
					{
						public Mock(global::MockTests.IHaveMultipleAttributesCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0, "void Foo(string @data)")]
						public void Foo([global::MockTests.ParameterOneAttribute, global::MockTests.ParameterTwoAttribute] string @data)
						{
							if (this.Expectations.handlers0?.Count > 0)
							{
								var @foundMatch = false;
								
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@data.IsValid(@data!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(@data!);
										break;
									}
								}
								
								if (!@foundMatch)
								{
									throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void Foo([global::MockTests.ParameterOneAttribute, global::MockTests.ParameterTwoAttribute] string @data)");
								}
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void Foo([global::MockTests.ParameterOneAttribute, global::MockTests.ParameterTwoAttribute] string @data)");
							}
						}
						
						private global::MockTests.IHaveMultipleAttributesCreateExpectations Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.IHaveMultipleAttributesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::MockTests.IHaveMultipleAttributesCreateExpectations.Handler0, global::System.Action<string>> Foo(global::Rocks.Argument<string> @data)
						{
							global::System.ArgumentNullException.ThrowIfNull(@data);
							
							var handler = new global::MockTests.IHaveMultipleAttributesCreateExpectations.Handler0
							{
								@data = @data,
							};
							
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
							this.Expectations.handlers0.Add(handler);
							return new(handler);
						}
						
						private global::MockTests.IHaveMultipleAttributesCreateExpectations Expectations { get; }
					}
					
					internal global::MockTests.IHaveMultipleAttributesCreateExpectations.MethodExpectations Methods { get; }
					
					internal IHaveMultipleAttributesCreateExpectations() =>
						(this.Methods) = (new(this));
					
					internal global::MockTests.IHaveMultipleAttributes Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MockTests.IHaveMultipleAttributes_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}
}