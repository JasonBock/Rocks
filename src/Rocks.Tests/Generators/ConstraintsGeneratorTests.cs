using NUnit.Framework;

namespace Rocks.Tests.Generators;


//public interface IAllowRefStructs<T>
//	where T : new(), allows ref struct
//{
//	void DoWork(T data);
//}

//public class Mock<T>
//	: IAllowRefStructs<T>
//	where T : new(), allows ref struct
//{
//	public void DoWork(T data) => throw new NotImplementedException();
//}


public static class ConstraintsGeneratorTests
{
	[Test]
	public static async Task GenerateWithAntiConstraintOnTypeParameterAsync()
	{
		var code =
			"""
			using Rocks;
			using System.Collections.Generic;

			#nullable enable

			[assembly: Rock(typeof(IAllowRefStructs<>), BuildType.Create | BuildType.Make)]

			public interface IAllowRefStructs<T>
				where T : allows ref struct
			{
				void UseData(T data);
				T ReturnData();
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IAllowRefStructsCreateExpectations<T>
				: global::Rocks.Expectations
				where T : allows ref struct
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Action<T>>
				{
					public global::Rocks.RefStructArgument<T> @data { get; set; }
				}
				private global::Rocks.Handlers<global::IAllowRefStructsCreateExpectations<T>.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<T>, global::System.Func<T>>
				{ }
				private global::Rocks.Handlers<global::IAllowRefStructsCreateExpectations<T>.Handler1>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IAllowRefStructs<T>
				{
					public Mock(global::IAllowRefStructsCreateExpectations<T> @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public void UseData(T @data)
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@data.IsValid(@data!))
								{
									@foundMatch = true;
									@handler.CallCount++;
									@handler.Callback?.Invoke(@data!);
									break;
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public T ReturnData()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue!();
							return @result!;
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
					}
					
					private global::IAllowRefStructsCreateExpectations<T> Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IAllowRefStructsCreateExpectations<T> expectations) =>
						this.Expectations = expectations;
					
					internal global::IAllowRefStructsCreateExpectations<T>.Adornments.AdornmentsForHandler0 UseData(global::Rocks.RefStructArgument<T> @data)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::IAllowRefStructsCreateExpectations<T>.Handler0
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal global::IAllowRefStructsCreateExpectations<T>.Adornments.AdornmentsForHandler1 ReturnData()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::IAllowRefStructsCreateExpectations<T>.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					private global::IAllowRefStructsCreateExpectations<T> Expectations { get; }
				}
				
				internal global::IAllowRefStructsCreateExpectations<T>.MethodExpectations Methods { get; }
				
				internal IAllowRefStructsCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IAllowRefStructs<T> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIAllowRefStructs<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIAllowRefStructs<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::IAllowRefStructsCreateExpectations<T>.Handler0, global::System.Action<T>>, IAdornmentsForIAllowRefStructs<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::IAllowRefStructsCreateExpectations<T>.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::IAllowRefStructsCreateExpectations<T>.Handler1, global::System.Func<T>, global::System.Func<T>>, IAdornmentsForIAllowRefStructs<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::IAllowRefStructsCreateExpectations<T>.Handler1 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IAllowRefStructsMakeExpectations<T>
				where T : allows ref struct
			{
				internal global::IAllowRefStructs<T> Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IAllowRefStructs<T>
				{
					public Mock()
					{
					}
					
					public void UseData(T @data)
					{
					}
					public T ReturnData()
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IAllowRefStructsT_Rock_Create.g.cs", createGeneratedCode),
				("IAllowRefStructsT_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithAntiConstraintOnTypeParameterInMethodAsync()
	{
		var code =
			"""
			using Rocks;
			using System.Collections.Generic;

			#nullable enable

			[assembly: Rock(typeof(IAllowRefStructs), BuildType.Create | BuildType.Make)]

			public interface IAllowRefStructs
			{
				void UseData<T>(T data) where T : allows ref struct;
				T ReturnData<T>() where T : allows ref struct;
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IAllowRefStructsCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0<T>
					: global::Rocks.Handler<global::System.Action<T>>
					where T : allows ref struct
				{
					public global::Rocks.RefStructArgument<T> @data { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers0;
				internal sealed class Handler1<T>
					: global::Rocks.Handler<global::System.Func<T>, global::System.Func<T>>
					where T : allows ref struct
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IAllowRefStructs
				{
					public Mock(global::IAllowRefStructsCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public void UseData<T>(T @data)
						where T : allows ref struct
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @genericHandler in this.Expectations.handlers0)
							{
								if (@genericHandler is global::IAllowRefStructsCreateExpectations.Handler0<T> @handler)
								{
									if (@handler.@data.IsValid(@data!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(@data!);
										break;
									}
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public T ReturnData<T>()
						where T : allows ref struct
					{
						if (this.Expectations.handlers1 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers1)
							{
								if (@genericHandler is global::IAllowRefStructsCreateExpectations.Handler1<T> @handler)
								{
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback() : @handler.ReturnValue!();
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(1)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
					}
					
					private global::IAllowRefStructsCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IAllowRefStructsCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::IAllowRefStructsCreateExpectations.Adornments.AdornmentsForHandler0<T> UseData<T>(global::Rocks.RefStructArgument<T> @data) where T : allows ref struct
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::IAllowRefStructsCreateExpectations.Handler0<T>
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal global::IAllowRefStructsCreateExpectations.Adornments.AdornmentsForHandler1<T> ReturnData<T>() where T : allows ref struct
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::IAllowRefStructsCreateExpectations.Handler1<T>();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					private global::IAllowRefStructsCreateExpectations Expectations { get; }
				}
				
				internal global::IAllowRefStructsCreateExpectations.MethodExpectations Methods { get; }
				
				internal IAllowRefStructsCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IAllowRefStructs Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIAllowRefStructs<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIAllowRefStructs<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0<T>
						: global::Rocks.Adornments<AdornmentsForHandler0<T>, global::IAllowRefStructsCreateExpectations.Handler0<T>, global::System.Action<T>>, IAdornmentsForIAllowRefStructs<AdornmentsForHandler0<T>> where T : allows ref struct
					{
						public AdornmentsForHandler0(global::IAllowRefStructsCreateExpectations.Handler0<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1<T>
						: global::Rocks.Adornments<AdornmentsForHandler1<T>, global::IAllowRefStructsCreateExpectations.Handler1<T>, global::System.Func<T>, global::System.Func<T>>, IAdornmentsForIAllowRefStructs<AdornmentsForHandler1<T>> where T : allows ref struct
					{
						public AdornmentsForHandler1(global::IAllowRefStructsCreateExpectations.Handler1<T> handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IAllowRefStructsMakeExpectations
			{
				internal global::IAllowRefStructs Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IAllowRefStructs
				{
					public Mock()
					{
					}
					
					public void UseData<T>(T @data)
						where T : allows ref struct
					{
					}
					public T ReturnData<T>()
						where T : allows ref struct
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IAllowRefStructs_Rock_Create.g.cs", createGeneratedCode),
				("IAllowRefStructs_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithGeneratedDefaultConstraintAsync()
	{
		var code =
			"""
			using Rocks;
			using System.Collections.Generic;

			#nullable enable

			[assembly: Rock(typeof(ClassMap<>), BuildType.Create | BuildType.Make)]

			public abstract class ClassMap<TClass>
			{
				public virtual void MapNullable<TMember>(
					IList<TMember?> member, bool useExistingMap = true) { }
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ClassMapCreateExpectations<TClass>
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::ClassMapCreateExpectations<TClass>.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::ClassMapCreateExpectations<TClass>.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::ClassMapCreateExpectations<TClass>.Handler2>? @handlers2;
				internal sealed class Handler3<TMember>
					: global::Rocks.Handler<global::System.Action<global::System.Collections.Generic.IList<TMember?>, bool>>
				{
					public global::Rocks.Argument<global::System.Collections.Generic.IList<TMember?>> @member { get; set; }
					public global::Rocks.Argument<bool> @useExistingMap { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers3;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::ClassMap<TClass>
				{
					public Mock(global::ClassMapCreateExpectations<TClass> @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						else
						{
							return base.Equals(@obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3)]
					public override void MapNullable<TMember>(global::System.Collections.Generic.IList<TMember?> @member, bool @useExistingMap = true)
						where TMember : default
					{
						if (this.Expectations.handlers3 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @genericHandler in this.Expectations.handlers3)
							{
								if (@genericHandler is global::ClassMapCreateExpectations<TClass>.Handler3<TMember> @handler)
								{
									if (@handler.@member.IsValid(@member!) &&
										@handler.@useExistingMap.IsValid(@useExistingMap!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(@member!, @useExistingMap!);
										break;
									}
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(3)}");
							}
						}
						else
						{
							base.MapNullable<TMember>(@member: @member!, @useExistingMap: @useExistingMap!);
						}
					}
					
					private global::ClassMapCreateExpectations<TClass> Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::ClassMapCreateExpectations<TClass> expectations) =>
						this.Expectations = expectations;
					
					internal global::ClassMapCreateExpectations<TClass>.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::ClassMapCreateExpectations<TClass>.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::ClassMapCreateExpectations<TClass>.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::ClassMapCreateExpectations<TClass>.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::ClassMapCreateExpectations<TClass>.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::ClassMapCreateExpectations<TClass>.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal global::ClassMapCreateExpectations<TClass>.Adornments.AdornmentsForHandler3<TMember> MapNullable<TMember>(global::Rocks.Argument<global::System.Collections.Generic.IList<TMember?>> @member, global::Rocks.Argument<bool> @useExistingMap)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@member);
						global::System.ArgumentNullException.ThrowIfNull(@useExistingMap);
						
						var @handler = new global::ClassMapCreateExpectations<TClass>.Handler3<TMember>
						{
							@member = @member,
							@useExistingMap = @useExistingMap.Transform(true),
						};
						
						if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(@handler); }
						else { this.Expectations.handlers3.Add(@handler); }
						return new(@handler);
					}
					internal global::ClassMapCreateExpectations<TClass>.Adornments.AdornmentsForHandler3<TMember> MapNullable<TMember>(global::Rocks.Argument<global::System.Collections.Generic.IList<TMember?>> @member, bool @useExistingMap = true) =>
						this.MapNullable<TMember>(@member, global::Rocks.Arg.Is(@useExistingMap));
					
					private global::ClassMapCreateExpectations<TClass> Expectations { get; }
				}
				
				internal global::ClassMapCreateExpectations<TClass>.MethodExpectations Methods { get; }
				
				internal ClassMapCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::ClassMap<TClass> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForClassMap<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForClassMap<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::ClassMapCreateExpectations<TClass>.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForClassMap<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::ClassMapCreateExpectations<TClass>.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::ClassMapCreateExpectations<TClass>.Handler1, global::System.Func<int>, int>, IAdornmentsForClassMap<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::ClassMapCreateExpectations<TClass>.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::ClassMapCreateExpectations<TClass>.Handler2, global::System.Func<string?>, string?>, IAdornmentsForClassMap<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::ClassMapCreateExpectations<TClass>.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3<TMember>
						: global::Rocks.Adornments<AdornmentsForHandler3<TMember>, global::ClassMapCreateExpectations<TClass>.Handler3<TMember>, global::System.Action<global::System.Collections.Generic.IList<TMember?>, bool>>, IAdornmentsForClassMap<AdornmentsForHandler3<TMember>>
					{
						public AdornmentsForHandler3(global::ClassMapCreateExpectations<TClass>.Handler3<TMember> handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ClassMapMakeExpectations<TClass>
			{
				internal global::ClassMap<TClass> Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::ClassMap<TClass>
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override void MapNullable<TMember>(global::System.Collections.Generic.IList<TMember?> @member, bool @useExistingMap = true)
						where TMember : default
					{
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("ClassMapTClass_Rock_Create.g.cs", createGeneratedCode),
				("ClassMapTClass_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithDefaultConstraintAsync()
	{
		var code =
			"""
			using Rocks;

			[assembly: Rock(typeof(BaseStuff), BuildType.Create | BuildType.Make)]

			#nullable enable

			public class BaseStuff
			{
				public virtual T? GetService<T>(object[] args) where T : class => default!;
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class BaseStuffCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::BaseStuffCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::BaseStuffCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::BaseStuffCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3<T>
					: global::Rocks.Handler<global::System.Func<object[], T?>, T?>
					where T : class
				{
					public global::Rocks.Argument<object[]> @args { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers3;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::BaseStuff
				{
					public Mock(global::BaseStuffCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						else
						{
							return base.Equals(@obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3)]
					public override T? GetService<T>(object[] @args)
						where T : class
					{
						if (this.Expectations.handlers3 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers3)
							{
								if (@genericHandler is global::BaseStuffCreateExpectations.Handler3<T> @handler)
								{
									if (@handler.@args.IsValid(@args!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@args!) : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(3)}");
						}
						else
						{
							return base.GetService<T>(@args: @args!);
						}
					}
					
					private global::BaseStuffCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::BaseStuffCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::BaseStuffCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::BaseStuffCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::BaseStuffCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::BaseStuffCreateExpectations.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::BaseStuffCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::BaseStuffCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal global::BaseStuffCreateExpectations.Adornments.AdornmentsForHandler3<T> GetService<T>(global::Rocks.Argument<object[]> @args) where T : class
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@args);
						
						var @handler = new global::BaseStuffCreateExpectations.Handler3<T>
						{
							@args = @args,
						};
						
						if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(@handler); }
						else { this.Expectations.handlers3.Add(@handler); }
						return new(@handler);
					}
					
					private global::BaseStuffCreateExpectations Expectations { get; }
				}
				
				internal global::BaseStuffCreateExpectations.MethodExpectations Methods { get; }
				
				internal BaseStuffCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::BaseStuff Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForBaseStuff<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForBaseStuff<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::BaseStuffCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForBaseStuff<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::BaseStuffCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::BaseStuffCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForBaseStuff<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::BaseStuffCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::BaseStuffCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForBaseStuff<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::BaseStuffCreateExpectations.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3<T>
						: global::Rocks.Adornments<AdornmentsForHandler3<T>, global::BaseStuffCreateExpectations.Handler3<T>, global::System.Func<object[], T?>, T?>, IAdornmentsForBaseStuff<AdornmentsForHandler3<T>> where T : class
					{
						public AdornmentsForHandler3(global::BaseStuffCreateExpectations.Handler3<T> handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class BaseStuffMakeExpectations
			{
				internal global::BaseStuff Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::BaseStuff
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override T? GetService<T>(object[] @args)
						where T : class
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("BaseStuff_Rock_Create.g.cs", createGeneratedCode),
				("BaseStuff_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithDelegateCreationAndConstraintsAsync()
	{
		var code =
			"""
			using Rocks;
			
			[assembly: Rock(typeof(INeedDelegate), BuildType.Create | BuildType.Make)]

			public interface IDot<T> { }

			public sealed class Frame<TDot>
				where TDot : unmanaged, IDot<TDot>
			{ }

			public interface INeedDelegate
			{				
				void Foo<T>(ref int a, Frame<T> frame) where T : unmanaged, IDot<T>;
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class INeedDelegateCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0<T>
					: global::Rocks.Handler<Handler0<T>.CallbackForHandler>
					where T : unmanaged, global::IDot<T>
				{
					internal delegate void CallbackForHandler(ref int @a, global::Frame<T> @frame);
					public global::Rocks.Argument<int> @a { get; set; }
					public global::Rocks.Argument<global::Frame<T>> @frame { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::INeedDelegate
				{
					public Mock(global::INeedDelegateCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public void Foo<T>(ref int @a, global::Frame<T> @frame)
						where T : unmanaged, global::IDot<T>
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @genericHandler in this.Expectations.handlers0)
							{
								if (@genericHandler is global::INeedDelegateCreateExpectations.Handler0<T> @handler)
								{
									if (@handler.@a.IsValid(@a!) &&
										@handler.@frame.IsValid(@frame!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(ref @a!, @frame!);
										break;
									}
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
						}
					}
					
					private global::INeedDelegateCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::INeedDelegateCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::INeedDelegateCreateExpectations.Adornments.AdornmentsForHandler0<T> Foo<T>(global::Rocks.Argument<int> @a, global::Rocks.Argument<global::Frame<T>> @frame) where T : unmanaged, global::IDot<T>
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@a);
						global::System.ArgumentNullException.ThrowIfNull(@frame);
						
						var @handler = new global::INeedDelegateCreateExpectations.Handler0<T>
						{
							@a = @a,
							@frame = @frame,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::INeedDelegateCreateExpectations Expectations { get; }
				}
				
				internal global::INeedDelegateCreateExpectations.MethodExpectations Methods { get; }
				
				internal INeedDelegateCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::INeedDelegate Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForINeedDelegate<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForINeedDelegate<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0<T>
						: global::Rocks.Adornments<AdornmentsForHandler0<T>, global::INeedDelegateCreateExpectations.Handler0<T>, global::INeedDelegateCreateExpectations.Handler0<T>.CallbackForHandler>, IAdornmentsForINeedDelegate<AdornmentsForHandler0<T>> where T : unmanaged, global::IDot<T>
					{
						public AdornmentsForHandler0(global::INeedDelegateCreateExpectations.Handler0<T> handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class INeedDelegateMakeExpectations
			{
				internal global::INeedDelegate Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::INeedDelegate
				{
					public Mock()
					{
					}
					
					public void Foo<T>(ref int @a, global::Frame<T> @frame)
						where T : unmanaged, global::IDot<T>
					{
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("INeedDelegate_Rock_Create.g.cs", createGeneratedCode),
				("INeedDelegate_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateTargetingInterfaceAsync()
	{
		var code =
			"""
			using Rocks;
			
			[assembly: Rock(typeof(ITypeConstraints), BuildType.Create | BuildType.Make)]

			#nullable enable

			public interface InterfaceConstraint { }
			public class ClassConstraint { }

			public interface ITypeConstraints
			{				
			   void HasUnmanaged<T>() where T : unmanaged;
			   void HasNotNull<T>() where T : notnull;
			   void HasClass<T>() where T : class;
			   void HasStruct<T>() where T : struct;
			   void HasClassTypeConstraint<T>() where T : ClassConstraint;
			   void HasInterfaceTypeConstraint<T>() where T : InterfaceConstraint;
			   void HasConstructorConstraint<T>() where T : new();
				TData? HasNullableValue<TData>(TData? data);
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ITypeConstraintsCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0<T>
					: global::Rocks.Handler<global::System.Action>
					where T : unmanaged
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers0;
				internal sealed class Handler1<T>
					: global::Rocks.Handler<global::System.Action>
					where T : notnull
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers1;
				internal sealed class Handler2<T>
					: global::Rocks.Handler<global::System.Action>
					where T : class
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers2;
				internal sealed class Handler3<T>
					: global::Rocks.Handler<global::System.Action>
					where T : struct
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers3;
				internal sealed class Handler4<T>
					: global::Rocks.Handler<global::System.Action>
					where T : global::ClassConstraint
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers4;
				internal sealed class Handler5<T>
					: global::Rocks.Handler<global::System.Action>
					where T : global::InterfaceConstraint
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers5;
				internal sealed class Handler6<T>
					: global::Rocks.Handler<global::System.Action>
					where T : new()
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers6;
				internal sealed class Handler7<TData>
					: global::Rocks.Handler<global::System.Func<TData?, TData?>, TData?>
				{
					public global::Rocks.Argument<TData?> @data { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers7;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
						if (this.handlers5 is not null) { failures.AddRange(this.Verify(this.handlers5, 5)); }
						if (this.handlers6 is not null) { failures.AddRange(this.Verify(this.handlers6, 6)); }
						if (this.handlers7 is not null) { failures.AddRange(this.Verify(this.handlers7, 7)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::ITypeConstraints
				{
					public Mock(global::ITypeConstraintsCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public void HasUnmanaged<T>()
						where T : unmanaged
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @genericHandler = this.Expectations.handlers0.First;
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler0<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(0)}");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public void HasNotNull<T>()
						where T : notnull
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @genericHandler = this.Expectations.handlers1.First;
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler1<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(1)}");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public void HasClass<T>()
						where T : class
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @genericHandler = this.Expectations.handlers2.First;
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler2<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(2)}");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(2)}");
						}
					}
					
					[global::Rocks.MemberIdentifier(3)]
					public void HasStruct<T>()
						where T : struct
					{
						if (this.Expectations.handlers3 is not null)
						{
							var @genericHandler = this.Expectations.handlers3.First;
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler3<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(3)}");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(3)}");
						}
					}
					
					[global::Rocks.MemberIdentifier(4)]
					public void HasClassTypeConstraint<T>()
						where T : global::ClassConstraint
					{
						if (this.Expectations.handlers4 is not null)
						{
							var @genericHandler = this.Expectations.handlers4.First;
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler4<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(4)}");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(4)}");
						}
					}
					
					[global::Rocks.MemberIdentifier(5)]
					public void HasInterfaceTypeConstraint<T>()
						where T : global::InterfaceConstraint
					{
						if (this.Expectations.handlers5 is not null)
						{
							var @genericHandler = this.Expectations.handlers5.First;
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler5<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(5)}");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(5)}");
						}
					}
					
					[global::Rocks.MemberIdentifier(6)]
					public void HasConstructorConstraint<T>()
						where T : new()
					{
						if (this.Expectations.handlers6 is not null)
						{
							var @genericHandler = this.Expectations.handlers6.First;
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler6<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(6)}");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(6)}");
						}
					}
					
					[global::Rocks.MemberIdentifier(7)]
					public TData? HasNullableValue<TData>(TData? @data)
					{
						if (this.Expectations.handlers7 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers7)
							{
								if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler7<TData> @handler)
								{
									if (@handler.@data.IsValid(@data!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@data!) : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(7)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(7)}");
					}
					
					private global::ITypeConstraintsCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::ITypeConstraintsCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::ITypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler0<T> HasUnmanaged<T>() where T : unmanaged
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::ITypeConstraintsCreateExpectations.Handler0<T>();
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(handler); }
						else { this.Expectations.handlers0.Add(handler); }
						return new(handler);
					}
					
					internal global::ITypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler1<T> HasNotNull<T>() where T : notnull
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::ITypeConstraintsCreateExpectations.Handler1<T>();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal global::ITypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler2<T> HasClass<T>() where T : class
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::ITypeConstraintsCreateExpectations.Handler2<T>();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal global::ITypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler3<T> HasStruct<T>() where T : struct
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::ITypeConstraintsCreateExpectations.Handler3<T>();
						if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
						else { this.Expectations.handlers3.Add(handler); }
						return new(handler);
					}
					
					internal global::ITypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler4<T> HasClassTypeConstraint<T>() where T : global::ClassConstraint
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::ITypeConstraintsCreateExpectations.Handler4<T>();
						if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(handler); }
						else { this.Expectations.handlers4.Add(handler); }
						return new(handler);
					}
					
					internal global::ITypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler5<T> HasInterfaceTypeConstraint<T>() where T : global::InterfaceConstraint
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::ITypeConstraintsCreateExpectations.Handler5<T>();
						if (this.Expectations.handlers5 is null) { this.Expectations.handlers5 = new(handler); }
						else { this.Expectations.handlers5.Add(handler); }
						return new(handler);
					}
					
					internal global::ITypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler6<T> HasConstructorConstraint<T>() where T : new()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::ITypeConstraintsCreateExpectations.Handler6<T>();
						if (this.Expectations.handlers6 is null) { this.Expectations.handlers6 = new(handler); }
						else { this.Expectations.handlers6.Add(handler); }
						return new(handler);
					}
					
					internal global::ITypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler7<TData> HasNullableValue<TData>(global::Rocks.Argument<TData?> @data)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::ITypeConstraintsCreateExpectations.Handler7<TData>
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers7 is null) { this.Expectations.handlers7 = new(@handler); }
						else { this.Expectations.handlers7.Add(@handler); }
						return new(@handler);
					}
					
					private global::ITypeConstraintsCreateExpectations Expectations { get; }
				}
				
				internal global::ITypeConstraintsCreateExpectations.MethodExpectations Methods { get; }
				
				internal ITypeConstraintsCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::ITypeConstraints Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForITypeConstraints<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForITypeConstraints<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0<T>
						: global::Rocks.Adornments<AdornmentsForHandler0<T>, global::ITypeConstraintsCreateExpectations.Handler0<T>, global::System.Action>, IAdornmentsForITypeConstraints<AdornmentsForHandler0<T>> where T : unmanaged
					{
						public AdornmentsForHandler0(global::ITypeConstraintsCreateExpectations.Handler0<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1<T>
						: global::Rocks.Adornments<AdornmentsForHandler1<T>, global::ITypeConstraintsCreateExpectations.Handler1<T>, global::System.Action>, IAdornmentsForITypeConstraints<AdornmentsForHandler1<T>> where T : notnull
					{
						public AdornmentsForHandler1(global::ITypeConstraintsCreateExpectations.Handler1<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2<T>
						: global::Rocks.Adornments<AdornmentsForHandler2<T>, global::ITypeConstraintsCreateExpectations.Handler2<T>, global::System.Action>, IAdornmentsForITypeConstraints<AdornmentsForHandler2<T>> where T : class
					{
						public AdornmentsForHandler2(global::ITypeConstraintsCreateExpectations.Handler2<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3<T>
						: global::Rocks.Adornments<AdornmentsForHandler3<T>, global::ITypeConstraintsCreateExpectations.Handler3<T>, global::System.Action>, IAdornmentsForITypeConstraints<AdornmentsForHandler3<T>> where T : struct
					{
						public AdornmentsForHandler3(global::ITypeConstraintsCreateExpectations.Handler3<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler4<T>
						: global::Rocks.Adornments<AdornmentsForHandler4<T>, global::ITypeConstraintsCreateExpectations.Handler4<T>, global::System.Action>, IAdornmentsForITypeConstraints<AdornmentsForHandler4<T>> where T : global::ClassConstraint
					{
						public AdornmentsForHandler4(global::ITypeConstraintsCreateExpectations.Handler4<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler5<T>
						: global::Rocks.Adornments<AdornmentsForHandler5<T>, global::ITypeConstraintsCreateExpectations.Handler5<T>, global::System.Action>, IAdornmentsForITypeConstraints<AdornmentsForHandler5<T>> where T : global::InterfaceConstraint
					{
						public AdornmentsForHandler5(global::ITypeConstraintsCreateExpectations.Handler5<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler6<T>
						: global::Rocks.Adornments<AdornmentsForHandler6<T>, global::ITypeConstraintsCreateExpectations.Handler6<T>, global::System.Action>, IAdornmentsForITypeConstraints<AdornmentsForHandler6<T>> where T : new()
					{
						public AdornmentsForHandler6(global::ITypeConstraintsCreateExpectations.Handler6<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler7<TData>
						: global::Rocks.Adornments<AdornmentsForHandler7<TData>, global::ITypeConstraintsCreateExpectations.Handler7<TData>, global::System.Func<TData?, TData?>, TData?>, IAdornmentsForITypeConstraints<AdornmentsForHandler7<TData>>
					{
						public AdornmentsForHandler7(global::ITypeConstraintsCreateExpectations.Handler7<TData> handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class ITypeConstraintsMakeExpectations
			{
				internal global::ITypeConstraints Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::ITypeConstraints
				{
					public Mock()
					{
					}
					
					public void HasUnmanaged<T>()
						where T : unmanaged
					{
					}
					public void HasNotNull<T>()
						where T : notnull
					{
					}
					public void HasClass<T>()
						where T : class
					{
					}
					public void HasStruct<T>()
						where T : struct
					{
					}
					public void HasClassTypeConstraint<T>()
						where T : global::ClassConstraint
					{
					}
					public void HasInterfaceTypeConstraint<T>()
						where T : global::InterfaceConstraint
					{
					}
					public void HasConstructorConstraint<T>()
						where T : new()
					{
					}
					public TData? HasNullableValue<TData>(TData? @data)
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("ITypeConstraints_Rock_Create.g.cs", createGeneratedCode),
				("ITypeConstraints_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateTargetingClassAsync()
	{
		var code =
			"""
			using Rocks;

			[assembly: Rock(typeof(TypeConstraints), BuildType.Create | BuildType.Make)]

			#nullable enable
			
			public interface InterfaceConstraint { }
			public class ClassConstraint { }

			public class TypeConstraints
			{				
			   public virtual void HasUnmanaged<T>() where T : unmanaged { }
			   public virtual void HasNotNull<T>() where T : notnull { }
			   public virtual void HasClass<T>() where T : class { }
			   public virtual void HasStruct<T>() where T : struct { }
			   public virtual void HasClassTypeConstraint<T>() where T : ClassConstraint { }
			   public virtual void HasInterfaceTypeConstraint<T>() where T : InterfaceConstraint { }
			   public virtual void HasConstructorConstraint<T>() where T : new() { }
				public virtual TData? HasNullableValue<TData>(TData? data) => default!;
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class TypeConstraintsCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::TypeConstraintsCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::TypeConstraintsCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::TypeConstraintsCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3<T>
					: global::Rocks.Handler<global::System.Action>
					where T : unmanaged
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers3;
				internal sealed class Handler4<T>
					: global::Rocks.Handler<global::System.Action>
					where T : notnull
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers4;
				internal sealed class Handler5<T>
					: global::Rocks.Handler<global::System.Action>
					where T : class
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers5;
				internal sealed class Handler6<T>
					: global::Rocks.Handler<global::System.Action>
					where T : struct
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers6;
				internal sealed class Handler7<T>
					: global::Rocks.Handler<global::System.Action>
					where T : global::ClassConstraint
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers7;
				internal sealed class Handler8<T>
					: global::Rocks.Handler<global::System.Action>
					where T : global::InterfaceConstraint
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers8;
				internal sealed class Handler9<T>
					: global::Rocks.Handler<global::System.Action>
					where T : new()
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers9;
				internal sealed class Handler10<TData>
					: global::Rocks.Handler<global::System.Func<TData?, TData?>, TData?>
				{
					public global::Rocks.Argument<TData?> @data { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers10;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
						if (this.handlers5 is not null) { failures.AddRange(this.Verify(this.handlers5, 5)); }
						if (this.handlers6 is not null) { failures.AddRange(this.Verify(this.handlers6, 6)); }
						if (this.handlers7 is not null) { failures.AddRange(this.Verify(this.handlers7, 7)); }
						if (this.handlers8 is not null) { failures.AddRange(this.Verify(this.handlers8, 8)); }
						if (this.handlers9 is not null) { failures.AddRange(this.Verify(this.handlers9, 9)); }
						if (this.handlers10 is not null) { failures.AddRange(this.Verify(this.handlers10, 10)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::TypeConstraints
				{
					public Mock(global::TypeConstraintsCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						else
						{
							return base.Equals(@obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3)]
					public override void HasUnmanaged<T>()
						where T : struct
					{
						if (this.Expectations.handlers3 is not null)
						{
							var @genericHandler = this.Expectations.handlers3.First;
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler3<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(3)}");
							}
						}
						else
						{
							base.HasUnmanaged<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(4)]
					public override void HasNotNull<T>()
					{
						if (this.Expectations.handlers4 is not null)
						{
							var @genericHandler = this.Expectations.handlers4.First;
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler4<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(4)}");
							}
						}
						else
						{
							base.HasNotNull<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(5)]
					public override void HasClass<T>()
						where T : class
					{
						if (this.Expectations.handlers5 is not null)
						{
							var @genericHandler = this.Expectations.handlers5.First;
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler5<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(5)}");
							}
						}
						else
						{
							base.HasClass<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(6)]
					public override void HasStruct<T>()
						where T : struct
					{
						if (this.Expectations.handlers6 is not null)
						{
							var @genericHandler = this.Expectations.handlers6.First;
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler6<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(6)}");
							}
						}
						else
						{
							base.HasStruct<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(7)]
					public override void HasClassTypeConstraint<T>()
					{
						if (this.Expectations.handlers7 is not null)
						{
							var @genericHandler = this.Expectations.handlers7.First;
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler7<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(7)}");
							}
						}
						else
						{
							base.HasClassTypeConstraint<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(8)]
					public override void HasInterfaceTypeConstraint<T>()
					{
						if (this.Expectations.handlers8 is not null)
						{
							var @genericHandler = this.Expectations.handlers8.First;
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler8<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(8)}");
							}
						}
						else
						{
							base.HasInterfaceTypeConstraint<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(9)]
					public override void HasConstructorConstraint<T>()
					{
						if (this.Expectations.handlers9 is not null)
						{
							var @genericHandler = this.Expectations.handlers9.First;
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler9<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"The provided handler does not match for {this.GetType().GetMemberDescription(9)}");
							}
						}
						else
						{
							base.HasConstructorConstraint<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(10)]
					public override TData? HasNullableValue<TData>(TData? @data)
						where TData : default
					{
						if (this.Expectations.handlers10 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers10)
							{
								if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler10<TData> @handler)
								{
									if (@handler.@data.IsValid(@data!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@data!) : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(10)}");
						}
						else
						{
							return base.HasNullableValue<TData>(@data: @data!);
						}
					}
					
					private global::TypeConstraintsCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::TypeConstraintsCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::TypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::TypeConstraintsCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::TypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::TypeConstraintsCreateExpectations.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::TypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::TypeConstraintsCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal global::TypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler3<T> HasUnmanaged<T>() where T : unmanaged
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::TypeConstraintsCreateExpectations.Handler3<T>();
						if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
						else { this.Expectations.handlers3.Add(handler); }
						return new(handler);
					}
					
					internal global::TypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler4<T> HasNotNull<T>() where T : notnull
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::TypeConstraintsCreateExpectations.Handler4<T>();
						if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(handler); }
						else { this.Expectations.handlers4.Add(handler); }
						return new(handler);
					}
					
					internal global::TypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler5<T> HasClass<T>() where T : class
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::TypeConstraintsCreateExpectations.Handler5<T>();
						if (this.Expectations.handlers5 is null) { this.Expectations.handlers5 = new(handler); }
						else { this.Expectations.handlers5.Add(handler); }
						return new(handler);
					}
					
					internal global::TypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler6<T> HasStruct<T>() where T : struct
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::TypeConstraintsCreateExpectations.Handler6<T>();
						if (this.Expectations.handlers6 is null) { this.Expectations.handlers6 = new(handler); }
						else { this.Expectations.handlers6.Add(handler); }
						return new(handler);
					}
					
					internal global::TypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler7<T> HasClassTypeConstraint<T>() where T : global::ClassConstraint
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::TypeConstraintsCreateExpectations.Handler7<T>();
						if (this.Expectations.handlers7 is null) { this.Expectations.handlers7 = new(handler); }
						else { this.Expectations.handlers7.Add(handler); }
						return new(handler);
					}
					
					internal global::TypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler8<T> HasInterfaceTypeConstraint<T>() where T : global::InterfaceConstraint
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::TypeConstraintsCreateExpectations.Handler8<T>();
						if (this.Expectations.handlers8 is null) { this.Expectations.handlers8 = new(handler); }
						else { this.Expectations.handlers8.Add(handler); }
						return new(handler);
					}
					
					internal global::TypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler9<T> HasConstructorConstraint<T>() where T : new()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::TypeConstraintsCreateExpectations.Handler9<T>();
						if (this.Expectations.handlers9 is null) { this.Expectations.handlers9 = new(handler); }
						else { this.Expectations.handlers9.Add(handler); }
						return new(handler);
					}
					
					internal global::TypeConstraintsCreateExpectations.Adornments.AdornmentsForHandler10<TData> HasNullableValue<TData>(global::Rocks.Argument<TData?> @data)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::TypeConstraintsCreateExpectations.Handler10<TData>
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers10 is null) { this.Expectations.handlers10 = new(@handler); }
						else { this.Expectations.handlers10.Add(@handler); }
						return new(@handler);
					}
					
					private global::TypeConstraintsCreateExpectations Expectations { get; }
				}
				
				internal global::TypeConstraintsCreateExpectations.MethodExpectations Methods { get; }
				
				internal TypeConstraintsCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::TypeConstraints Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForTypeConstraints<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForTypeConstraints<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::TypeConstraintsCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForTypeConstraints<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::TypeConstraintsCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::TypeConstraintsCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForTypeConstraints<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::TypeConstraintsCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::TypeConstraintsCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForTypeConstraints<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::TypeConstraintsCreateExpectations.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3<T>
						: global::Rocks.Adornments<AdornmentsForHandler3<T>, global::TypeConstraintsCreateExpectations.Handler3<T>, global::System.Action>, IAdornmentsForTypeConstraints<AdornmentsForHandler3<T>> where T : unmanaged
					{
						public AdornmentsForHandler3(global::TypeConstraintsCreateExpectations.Handler3<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler4<T>
						: global::Rocks.Adornments<AdornmentsForHandler4<T>, global::TypeConstraintsCreateExpectations.Handler4<T>, global::System.Action>, IAdornmentsForTypeConstraints<AdornmentsForHandler4<T>> where T : notnull
					{
						public AdornmentsForHandler4(global::TypeConstraintsCreateExpectations.Handler4<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler5<T>
						: global::Rocks.Adornments<AdornmentsForHandler5<T>, global::TypeConstraintsCreateExpectations.Handler5<T>, global::System.Action>, IAdornmentsForTypeConstraints<AdornmentsForHandler5<T>> where T : class
					{
						public AdornmentsForHandler5(global::TypeConstraintsCreateExpectations.Handler5<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler6<T>
						: global::Rocks.Adornments<AdornmentsForHandler6<T>, global::TypeConstraintsCreateExpectations.Handler6<T>, global::System.Action>, IAdornmentsForTypeConstraints<AdornmentsForHandler6<T>> where T : struct
					{
						public AdornmentsForHandler6(global::TypeConstraintsCreateExpectations.Handler6<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler7<T>
						: global::Rocks.Adornments<AdornmentsForHandler7<T>, global::TypeConstraintsCreateExpectations.Handler7<T>, global::System.Action>, IAdornmentsForTypeConstraints<AdornmentsForHandler7<T>> where T : global::ClassConstraint
					{
						public AdornmentsForHandler7(global::TypeConstraintsCreateExpectations.Handler7<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler8<T>
						: global::Rocks.Adornments<AdornmentsForHandler8<T>, global::TypeConstraintsCreateExpectations.Handler8<T>, global::System.Action>, IAdornmentsForTypeConstraints<AdornmentsForHandler8<T>> where T : global::InterfaceConstraint
					{
						public AdornmentsForHandler8(global::TypeConstraintsCreateExpectations.Handler8<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler9<T>
						: global::Rocks.Adornments<AdornmentsForHandler9<T>, global::TypeConstraintsCreateExpectations.Handler9<T>, global::System.Action>, IAdornmentsForTypeConstraints<AdornmentsForHandler9<T>> where T : new()
					{
						public AdornmentsForHandler9(global::TypeConstraintsCreateExpectations.Handler9<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler10<TData>
						: global::Rocks.Adornments<AdornmentsForHandler10<TData>, global::TypeConstraintsCreateExpectations.Handler10<TData>, global::System.Func<TData?, TData?>, TData?>, IAdornmentsForTypeConstraints<AdornmentsForHandler10<TData>>
					{
						public AdornmentsForHandler10(global::TypeConstraintsCreateExpectations.Handler10<TData> handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class TypeConstraintsMakeExpectations
			{
				internal global::TypeConstraints Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::TypeConstraints
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override void HasUnmanaged<T>()
						where T : struct
					{
					}
					public override void HasNotNull<T>()
					{
					}
					public override void HasClass<T>()
						where T : class
					{
					}
					public override void HasStruct<T>()
						where T : struct
					{
					}
					public override void HasClassTypeConstraint<T>()
					{
					}
					public override void HasInterfaceTypeConstraint<T>()
					{
					}
					public override void HasConstructorConstraint<T>()
					{
					}
					public override TData? HasNullableValue<TData>(TData? @data)
						where TData : default
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("TypeConstraints_Rock_Create.g.cs", createGeneratedCode),
				("TypeConstraints_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateProperNumberOfConstraintsAsync()
	{
		var code =
			"""
			using Rocks;
			
			[assembly: Rock(typeof(IUnmanagedValue), BuildType.Create | BuildType.Make)]

			public interface IValue<TValue>
				where TValue : IValue<TValue> { }

			public class Value<TValue>
				where TValue : unmanaged, IValue<TValue> { }

			public interface IUnmanagedValue
			{
				void Use<TValue>(Value<TValue> value)
					where TValue : unmanaged, IValue<TValue>;
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IUnmanagedValueCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0<TValue>
					: global::Rocks.Handler<global::System.Action<global::Value<TValue>>>
					where TValue : unmanaged, global::IValue<TValue>
				{
					public global::Rocks.Argument<global::Value<TValue>> @value { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IUnmanagedValue
				{
					public Mock(global::IUnmanagedValueCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public void Use<TValue>(global::Value<TValue> @value)
						where TValue : unmanaged, global::IValue<TValue>
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @foundMatch = false;
							
							foreach (var @genericHandler in this.Expectations.handlers0)
							{
								if (@genericHandler is global::IUnmanagedValueCreateExpectations.Handler0<TValue> @handler)
								{
									if (@handler.@value.IsValid(@value!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(@value!);
										break;
									}
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
						}
					}
					
					private global::IUnmanagedValueCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IUnmanagedValueCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::IUnmanagedValueCreateExpectations.Adornments.AdornmentsForHandler0<TValue> Use<TValue>(global::Rocks.Argument<global::Value<TValue>> @value) where TValue : unmanaged, global::IValue<TValue>
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@value);
						
						var @handler = new global::IUnmanagedValueCreateExpectations.Handler0<TValue>
						{
							@value = @value,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::IUnmanagedValueCreateExpectations Expectations { get; }
				}
				
				internal global::IUnmanagedValueCreateExpectations.MethodExpectations Methods { get; }
				
				internal IUnmanagedValueCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IUnmanagedValue Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIUnmanagedValue<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIUnmanagedValue<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0<TValue>
						: global::Rocks.Adornments<AdornmentsForHandler0<TValue>, global::IUnmanagedValueCreateExpectations.Handler0<TValue>, global::System.Action<global::Value<TValue>>>, IAdornmentsForIUnmanagedValue<AdornmentsForHandler0<TValue>> where TValue : unmanaged, global::IValue<TValue>
					{
						public AdornmentsForHandler0(global::IUnmanagedValueCreateExpectations.Handler0<TValue> handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IUnmanagedValueMakeExpectations
			{
				internal global::IUnmanagedValue Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IUnmanagedValue
				{
					public Mock()
					{
					}
					
					public void Use<TValue>(global::Value<TValue> @value)
						where TValue : unmanaged, global::IValue<TValue>
					{
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IUnmanagedValue_Rock_Create.g.cs", createGeneratedCode),
				("IUnmanagedValue_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(MockTests.Thing<>), BuildType.Create | BuildType.Make)]

			namespace MockTests
			{
				public class Thing { }

				public abstract class Thing<T>
					: Thing where T : class
				{
					public abstract Thing<TTarget> As<TTarget>() where TTarget : class;
				}
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class ThingCreateExpectations<T>
					: global::Rocks.Expectations
					where T : class
				{
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
					{
						public global::Rocks.Argument<object?> @obj { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.ThingCreateExpectations<T>.Handler0>? @handlers0;
					internal sealed class Handler1
						: global::Rocks.Handler<global::System.Func<int>, int>
					{ }
					private global::Rocks.Handlers<global::MockTests.ThingCreateExpectations<T>.Handler1>? @handlers1;
					internal sealed class Handler2
						: global::Rocks.Handler<global::System.Func<string?>, string?>
					{ }
					private global::Rocks.Handlers<global::MockTests.ThingCreateExpectations<T>.Handler2>? @handlers2;
					internal sealed class Handler3<TTarget>
						: global::Rocks.Handler<global::System.Func<global::MockTests.Thing<TTarget>>, global::MockTests.Thing<TTarget>>
						where TTarget : class
					{ }
					private global::Rocks.Handlers<global::Rocks.Handler>? @handlers3;
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
							if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
							if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
							if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.Thing<T>
					{
						public Mock(global::MockTests.ThingCreateExpectations<T> @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0)]
						public override bool Equals(object? @obj)
						{
							if (this.Expectations.handlers0 is not null)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@obj.IsValid(@obj!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@obj!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
							}
							else
							{
								return base.Equals(@obj: @obj!);
							}
						}
						
						[global::Rocks.MemberIdentifier(1)]
						public override int GetHashCode()
						{
							if (this.Expectations.handlers1 is not null)
							{
								var @handler = this.Expectations.handlers1.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.GetHashCode();
							}
						}
						
						[global::Rocks.MemberIdentifier(2)]
						public override string? ToString()
						{
							if (this.Expectations.handlers2 is not null)
							{
								var @handler = this.Expectations.handlers2.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.ToString();
							}
						}
						
						[global::Rocks.MemberIdentifier(3)]
						public override global::MockTests.Thing<TTarget> As<TTarget>()
							where TTarget : class
						{
							if (this.Expectations.handlers3 is not null)
							{
								foreach (var @genericHandler in this.Expectations.handlers3)
								{
									if (@genericHandler is global::MockTests.ThingCreateExpectations<T>.Handler3<TTarget> @handler)
									{
										{
											@handler.CallCount++;
											var @result = @handler.Callback is not null ?
												@handler.Callback() : @handler.ReturnValue;
											return @result!;
										}
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(3)}");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(3)}");
						}
						
						private global::MockTests.ThingCreateExpectations<T> Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.ThingCreateExpectations<T> expectations) =>
							this.Expectations = expectations;
						
						internal global::MockTests.ThingCreateExpectations<T>.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@obj);
							
							var @handler = new global::MockTests.ThingCreateExpectations<T>.Handler0
							{
								@obj = @obj,
							};
							
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						
						internal new global::MockTests.ThingCreateExpectations<T>.Adornments.AdornmentsForHandler1 GetHashCode()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MockTests.ThingCreateExpectations<T>.Handler1();
							if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
							else { this.Expectations.handlers1.Add(handler); }
							return new(handler);
						}
						
						internal new global::MockTests.ThingCreateExpectations<T>.Adornments.AdornmentsForHandler2 ToString()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MockTests.ThingCreateExpectations<T>.Handler2();
							if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
							else { this.Expectations.handlers2.Add(handler); }
							return new(handler);
						}
						
						internal global::MockTests.ThingCreateExpectations<T>.Adornments.AdornmentsForHandler3<TTarget> As<TTarget>() where TTarget : class
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MockTests.ThingCreateExpectations<T>.Handler3<TTarget>();
							if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
							else { this.Expectations.handlers3.Add(handler); }
							return new(handler);
						}
						
						private global::MockTests.ThingCreateExpectations<T> Expectations { get; }
					}
					
					internal global::MockTests.ThingCreateExpectations<T>.MethodExpectations Methods { get; }
					
					internal ThingCreateExpectations() =>
						(this.Methods) = (new(this));
					
					internal global::MockTests.Thing<T> Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForThing<TAdornments>
							: global::Rocks.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForThing<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::Rocks.Adornments<AdornmentsForHandler0, global::MockTests.ThingCreateExpectations<T>.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForThing<AdornmentsForHandler0>
						{
							public AdornmentsForHandler0(global::MockTests.ThingCreateExpectations<T>.Handler0 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler1
							: global::Rocks.Adornments<AdornmentsForHandler1, global::MockTests.ThingCreateExpectations<T>.Handler1, global::System.Func<int>, int>, IAdornmentsForThing<AdornmentsForHandler1>
						{
							public AdornmentsForHandler1(global::MockTests.ThingCreateExpectations<T>.Handler1 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler2
							: global::Rocks.Adornments<AdornmentsForHandler2, global::MockTests.ThingCreateExpectations<T>.Handler2, global::System.Func<string?>, string?>, IAdornmentsForThing<AdornmentsForHandler2>
						{
							public AdornmentsForHandler2(global::MockTests.ThingCreateExpectations<T>.Handler2 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler3<TTarget>
							: global::Rocks.Adornments<AdornmentsForHandler3<TTarget>, global::MockTests.ThingCreateExpectations<T>.Handler3<TTarget>, global::System.Func<global::MockTests.Thing<TTarget>>, global::MockTests.Thing<TTarget>>, IAdornmentsForThing<AdornmentsForHandler3<TTarget>> where TTarget : class
						{
							public AdornmentsForHandler3(global::MockTests.ThingCreateExpectations<T>.Handler3<TTarget> handler)
								: base(handler) { }
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class ThingMakeExpectations<T>
					where T : class
				{
					internal global::MockTests.Thing<T> Instance()
					{
						return new Mock();
					}
					
					private sealed class Mock
						: global::MockTests.Thing<T>
					{
						public Mock()
						{
						}
						
						public override bool Equals(object? @obj)
						{
							return default!;
						}
						public override int GetHashCode()
						{
							return default!;
						}
						public override string? ToString()
						{
							return default!;
						}
						public override global::MockTests.Thing<TTarget> As<TTarget>()
							where TTarget : class
						{
							return default!;
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MockTests.ThingT_Rock_Create.g.cs", createGeneratedCode),
				("MockTests.ThingT_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}
}