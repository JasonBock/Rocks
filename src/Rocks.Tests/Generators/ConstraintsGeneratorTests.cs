using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class ConstraintsGeneratorTests
{
	[Test]
	public static async Task CreateWithDefaultConstraintAsync()
	{
		var code =
			"""
			using Rocks;

			[assembly: RockCreate<BaseStuff>]

			#nullable enable

			public class BaseStuff
			{
				public virtual T? GetService<T>(object[] args) where T : class => default!;
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class BaseStuffCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler3<T>
					: global::Rocks.Handler<global::System.Func<object[], T?>, T?>
					where T : class
				{
					public global::Rocks.Argument<object[]> @args { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::BaseStuffCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::BaseStuffCreateExpectations.Handler1>? @handlers1;
				private global::System.Collections.Generic.List<global::BaseStuffCreateExpectations.Handler2>? @handlers2;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers3;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3, 3)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::BaseStuff
				{
					public Mock(global::BaseStuffCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1?.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2?.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "T? GetService<T>(object[] @args)")]
					public override T? GetService<T>(object[] @args)
						where T : class
					{
						if (this.Expectations.handlers3?.Count > 0)
						{
							foreach (var @genericHandler in this.Expectations.handlers3)
							{
								if (@genericHandler is global::BaseStuffCreateExpectations.Handler3<T> @handler)
								{
									if (@handler.@args.IsValid(@args!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@args!) : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for T? GetService<T>(object[] @args)");
						}
						else
						{
							return base.GetService<T>(args: @args!);
						}
					}
					
					private global::BaseStuffCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::BaseStuffCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::BaseStuffCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::BaseStuffCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(@handler);
						return new(@handler);
					}
					
					internal new global::Rocks.Adornments<global::BaseStuffCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
						var handler = new global::BaseStuffCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::BaseStuffCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
						var handler = new global::BaseStuffCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::BaseStuffCreateExpectations.Handler3<T>, global::System.Func<object[], T?>, T?> GetService<T>(global::Rocks.Argument<object[]> @args) where T : class
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@args);
						
						var @handler = new global::BaseStuffCreateExpectations.Handler3<T>
						{
							@args = @args,
						};
						
						if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(); }
						this.Expectations.handlers3.Add(@handler);
						return new(@handler);
					}
					
					private global::BaseStuffCreateExpectations Expectations { get; }
				}
				
				internal global::BaseStuffCreateExpectations.MethodExpectations Methods { get; }
				
				internal BaseStuffCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::BaseStuff Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "BaseStuff_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task CreateWithDelegateCreationAndConstraintsAsync()
	{
		var code =
			"""
			using Rocks;
			
			[assembly: RockCreate<INeedDelegate>]

			public interface IDot<T> { }

			public sealed class Frame<TDot>
				where TDot : unmanaged, IDot<TDot>
			{ }

			public interface INeedDelegate
			{				
				void Foo<T>(ref int a, Frame<T> frame) where T : unmanaged, IDot<T>;
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class INeedDelegateCreateExpectations
				: global::Rocks.Expectations
			{
				internal static class Projections
				{
					internal delegate void Callback_592396125302095547400633258221535774913220381582<T>(ref int @a, global::Frame<T> @frame) where T : unmanaged, global::IDot<T>;
				}
				
				#pragma warning disable CS8618
				
				internal sealed class Handler0<T>
					: global::Rocks.Handler<global::INeedDelegateCreateExpectations.Projections.Callback_592396125302095547400633258221535774913220381582<T>>
					where T : unmanaged, global::IDot<T>
				{
					public global::Rocks.Argument<int> @a { get; set; }
					public global::Rocks.Argument<global::Frame<T>> @frame { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::INeedDelegate
				{
					public Mock(global::INeedDelegateCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "void Foo<T>(ref int @a, global::Frame<T> @frame)")]
					public void Foo<T>(ref int @a, global::Frame<T> @frame)
						where T : unmanaged, global::IDot<T>
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							var @foundMatch = false;
							
							foreach (var @genericHandler in this.Expectations.handlers0)
							{
								if (@genericHandler is global::INeedDelegateCreateExpectations.Handler0<T> @handler)
								{
									if (@handler.@a.IsValid(@a!) &&
										@handler.@frame.IsValid(@frame!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(ref @a!, @frame!);
										break;
									}
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void Foo<T>(ref int @a, global::Frame<T> @frame)");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void Foo<T>(ref int @a, global::Frame<T> @frame)");
						}
					}
					
					private global::INeedDelegateCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::INeedDelegateCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::INeedDelegateCreateExpectations.Handler0<T>, global::INeedDelegateCreateExpectations.Projections.Callback_592396125302095547400633258221535774913220381582<T>> Foo<T>(global::Rocks.Argument<int> @a, global::Rocks.Argument<global::Frame<T>> @frame) where T : unmanaged, global::IDot<T>
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@a);
						global::System.ArgumentNullException.ThrowIfNull(@frame);
						
						var @handler = new global::INeedDelegateCreateExpectations.Handler0<T>
						{
							@a = @a,
							@frame = @frame,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(@handler);
						return new(@handler);
					}
					
					private global::INeedDelegateCreateExpectations Expectations { get; }
				}
				
				internal global::INeedDelegateCreateExpectations.MethodExpectations Methods { get; }
				
				internal INeedDelegateCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::INeedDelegate Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "INeedDelegate_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task GenerateCreateTargetingInterfaceAsync()
	{
		var code =
			"""
			using Rocks;
			
			[assembly: RockCreate<ITypeConstraints>]

			#nullable enable

			public interface InterfaceConstraint { }
			public class ClassConstraint { }

			public interface ITypeConstraints
			{				
			   void HasUnmanaged<T>() where T : unmanaged;
			   void HasNotNull<T>() where T : notnull;
			   void HasClass<T>() where T : class;
			   void HasStruct<T>() where T : struct;
			   void HasClassTypeConstraint<T>() where T : ClassConstraint;
			   void HasInterfaceTypeConstraint<T>() where T : InterfaceConstraint;
			   void HasConstructorConstraint<T>() where T : new();
				TData? HasNullableValue<TData>(TData? data);
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class ITypeConstraintsCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0<T>
					: global::Rocks.Handler<global::System.Action>
					where T : unmanaged
				{ }
				
				internal sealed class Handler1<T>
					: global::Rocks.Handler<global::System.Action>
					where T : notnull
				{ }
				
				internal sealed class Handler2<T>
					: global::Rocks.Handler<global::System.Action>
					where T : class
				{ }
				
				internal sealed class Handler3<T>
					: global::Rocks.Handler<global::System.Action>
					where T : struct
				{ }
				
				internal sealed class Handler4<T>
					: global::Rocks.Handler<global::System.Action>
					where T : global::ClassConstraint
				{ }
				
				internal sealed class Handler5<T>
					: global::Rocks.Handler<global::System.Action>
					where T : global::InterfaceConstraint
				{ }
				
				internal sealed class Handler6<T>
					: global::Rocks.Handler<global::System.Action>
					where T : new()
				{ }
				
				internal sealed class Handler7<TData>
					: global::Rocks.Handler<global::System.Func<TData?, TData?>, TData?>
				{
					public global::Rocks.Argument<TData?> @data { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers0;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers1;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers2;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers3;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers4;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers5;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers6;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers7;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers4?.Count > 0) { failures.AddRange(this.Verify(this.handlers4, 4)); }
						if (this.handlers5?.Count > 0) { failures.AddRange(this.Verify(this.handlers5, 5)); }
						if (this.handlers6?.Count > 0) { failures.AddRange(this.Verify(this.handlers6, 6)); }
						if (this.handlers7?.Count > 0) { failures.AddRange(this.Verify(this.handlers7, 7)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::ITypeConstraints
				{
					public Mock(global::ITypeConstraintsCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "void HasUnmanaged<T>()")]
					public void HasUnmanaged<T>()
						where T : unmanaged
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers0[0];
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler0<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasUnmanaged<T>()");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void HasUnmanaged<T>()");
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "void HasNotNull<T>()")]
					public void HasNotNull<T>()
						where T : notnull
					{
						if (this.Expectations.handlers1?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers1[0];
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler1<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasNotNull<T>()");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void HasNotNull<T>()");
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "void HasClass<T>()")]
					public void HasClass<T>()
						where T : class
					{
						if (this.Expectations.handlers2?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers2[0];
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler2<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasClass<T>()");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void HasClass<T>()");
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "void HasStruct<T>()")]
					public void HasStruct<T>()
						where T : struct
					{
						if (this.Expectations.handlers3?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers3[0];
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler3<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasStruct<T>()");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void HasStruct<T>()");
						}
					}
					
					[global::Rocks.MemberIdentifier(4, "void HasClassTypeConstraint<T>()")]
					public void HasClassTypeConstraint<T>()
						where T : global::ClassConstraint
					{
						if (this.Expectations.handlers4?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers4[0];
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler4<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasClassTypeConstraint<T>()");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void HasClassTypeConstraint<T>()");
						}
					}
					
					[global::Rocks.MemberIdentifier(5, "void HasInterfaceTypeConstraint<T>()")]
					public void HasInterfaceTypeConstraint<T>()
						where T : global::InterfaceConstraint
					{
						if (this.Expectations.handlers5?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers5[0];
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler5<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasInterfaceTypeConstraint<T>()");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void HasInterfaceTypeConstraint<T>()");
						}
					}
					
					[global::Rocks.MemberIdentifier(6, "void HasConstructorConstraint<T>()")]
					public void HasConstructorConstraint<T>()
						where T : new()
					{
						if (this.Expectations.handlers6?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers6[0];
							if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler6<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasConstructorConstraint<T>()");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void HasConstructorConstraint<T>()");
						}
					}
					
					[global::Rocks.MemberIdentifier(7, "TData? HasNullableValue<TData>(TData? @data)")]
					public TData? HasNullableValue<TData>(TData? @data)
					{
						if (this.Expectations.handlers7?.Count > 0)
						{
							foreach (var @genericHandler in this.Expectations.handlers7)
							{
								if (@genericHandler is global::ITypeConstraintsCreateExpectations.Handler7<TData> @handler)
								{
									if (@handler.@data.IsValid(@data!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@data!) : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for TData? HasNullableValue<TData>(TData? @data)");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for TData? HasNullableValue<TData>(TData? @data)");
					}
					
					private global::ITypeConstraintsCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::ITypeConstraintsCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::ITypeConstraintsCreateExpectations.Handler0<T>, global::System.Action> HasUnmanaged<T>() where T : unmanaged
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						var handler = new global::ITypeConstraintsCreateExpectations.Handler0<T>();
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::ITypeConstraintsCreateExpectations.Handler1<T>, global::System.Action> HasNotNull<T>() where T : notnull
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
						var handler = new global::ITypeConstraintsCreateExpectations.Handler1<T>();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::ITypeConstraintsCreateExpectations.Handler2<T>, global::System.Action> HasClass<T>() where T : class
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
						var handler = new global::ITypeConstraintsCreateExpectations.Handler2<T>();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::ITypeConstraintsCreateExpectations.Handler3<T>, global::System.Action> HasStruct<T>() where T : struct
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(); }
						var handler = new global::ITypeConstraintsCreateExpectations.Handler3<T>();
						this.Expectations.handlers3.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::ITypeConstraintsCreateExpectations.Handler4<T>, global::System.Action> HasClassTypeConstraint<T>() where T : global::ClassConstraint
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers4 is null ) { this.Expectations.handlers4 = new(); }
						var handler = new global::ITypeConstraintsCreateExpectations.Handler4<T>();
						this.Expectations.handlers4.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::ITypeConstraintsCreateExpectations.Handler5<T>, global::System.Action> HasInterfaceTypeConstraint<T>() where T : global::InterfaceConstraint
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers5 is null ) { this.Expectations.handlers5 = new(); }
						var handler = new global::ITypeConstraintsCreateExpectations.Handler5<T>();
						this.Expectations.handlers5.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::ITypeConstraintsCreateExpectations.Handler6<T>, global::System.Action> HasConstructorConstraint<T>() where T : new()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers6 is null ) { this.Expectations.handlers6 = new(); }
						var handler = new global::ITypeConstraintsCreateExpectations.Handler6<T>();
						this.Expectations.handlers6.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::ITypeConstraintsCreateExpectations.Handler7<TData>, global::System.Func<TData?, TData?>, TData?> HasNullableValue<TData>(global::Rocks.Argument<TData?> @data)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::ITypeConstraintsCreateExpectations.Handler7<TData>
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers7 is null ) { this.Expectations.handlers7 = new(); }
						this.Expectations.handlers7.Add(@handler);
						return new(@handler);
					}
					
					private global::ITypeConstraintsCreateExpectations Expectations { get; }
				}
				
				internal global::ITypeConstraintsCreateExpectations.MethodExpectations Methods { get; }
				
				internal ITypeConstraintsCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::ITypeConstraints Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "ITypeConstraints_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task GenerateMakeTargetingInterfaceAsync()
	{
		var code =
			"""
			using Rocks;

			[assembly: RockMake<ITypeConstraints>]

			#nullable enable
			
			public interface InterfaceConstraint { }
			public class ClassConstraint { }

			public interface ITypeConstraints
			{				
			   void HasUnmanaged<T>() where T : unmanaged;
			   void HasNotNull<T>() where T : notnull;
			   void HasClass<T>() where T : class;
			   void HasStruct<T>() where T : struct;
			   void HasClassTypeConstraint<T>() where T : ClassConstraint;
			   void HasInterfaceTypeConstraint<T>() where T : InterfaceConstraint;
			   void HasConstructorConstraint<T>() where T : new();
				TData? HasNullableValue<TData>(TData? data);
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8775
			#nullable enable
			
			internal sealed class ITypeConstraintsMakeExpectations
			{
				internal global::ITypeConstraints Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::ITypeConstraints
				{
					public Mock()
					{
					}
					
					public void HasUnmanaged<T>()
						where T : unmanaged
					{
					}
					public void HasNotNull<T>()
						where T : notnull
					{
					}
					public void HasClass<T>()
						where T : class
					{
					}
					public void HasStruct<T>()
						where T : struct
					{
					}
					public void HasClassTypeConstraint<T>()
						where T : global::ClassConstraint
					{
					}
					public void HasInterfaceTypeConstraint<T>()
						where T : global::InterfaceConstraint
					{
					}
					public void HasConstructorConstraint<T>()
						where T : new()
					{
					}
					public TData? HasNullableValue<TData>(TData? @data)
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "ITypeConstraints_Rock_Make.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task GenerateCreateTargetingClassAsync()
	{
		var code =
			"""
			using Rocks;

			[assembly: RockCreate<TypeConstraints>]

			#nullable enable
			
			public interface InterfaceConstraint { }
			public class ClassConstraint { }

			public class TypeConstraints
			{				
			   public virtual void HasUnmanaged<T>() where T : unmanaged { }
			   public virtual void HasNotNull<T>() where T : notnull { }
			   public virtual void HasClass<T>() where T : class { }
			   public virtual void HasStruct<T>() where T : struct { }
			   public virtual void HasClassTypeConstraint<T>() where T : ClassConstraint { }
			   public virtual void HasInterfaceTypeConstraint<T>() where T : InterfaceConstraint { }
			   public virtual void HasConstructorConstraint<T>() where T : new() { }
				public virtual TData? HasNullableValue<TData>(TData? data) => default!;
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class TypeConstraintsCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler3<T>
					: global::Rocks.Handler<global::System.Action>
					where T : unmanaged
				{ }
				
				internal sealed class Handler4<T>
					: global::Rocks.Handler<global::System.Action>
					where T : notnull
				{ }
				
				internal sealed class Handler5<T>
					: global::Rocks.Handler<global::System.Action>
					where T : class
				{ }
				
				internal sealed class Handler6<T>
					: global::Rocks.Handler<global::System.Action>
					where T : struct
				{ }
				
				internal sealed class Handler7<T>
					: global::Rocks.Handler<global::System.Action>
					where T : global::ClassConstraint
				{ }
				
				internal sealed class Handler8<T>
					: global::Rocks.Handler<global::System.Action>
					where T : global::InterfaceConstraint
				{ }
				
				internal sealed class Handler9<T>
					: global::Rocks.Handler<global::System.Action>
					where T : new()
				{ }
				
				internal sealed class Handler10<TData>
					: global::Rocks.Handler<global::System.Func<TData?, TData?>, TData?>
				{
					public global::Rocks.Argument<TData?> @data { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::TypeConstraintsCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::TypeConstraintsCreateExpectations.Handler1>? @handlers1;
				private global::System.Collections.Generic.List<global::TypeConstraintsCreateExpectations.Handler2>? @handlers2;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers3;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers4;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers5;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers6;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers7;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers8;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers9;
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers10;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers4?.Count > 0) { failures.AddRange(this.Verify(this.handlers4, 4)); }
						if (this.handlers5?.Count > 0) { failures.AddRange(this.Verify(this.handlers5, 5)); }
						if (this.handlers6?.Count > 0) { failures.AddRange(this.Verify(this.handlers6, 6)); }
						if (this.handlers7?.Count > 0) { failures.AddRange(this.Verify(this.handlers7, 7)); }
						if (this.handlers8?.Count > 0) { failures.AddRange(this.Verify(this.handlers8, 8)); }
						if (this.handlers9?.Count > 0) { failures.AddRange(this.Verify(this.handlers9, 9)); }
						if (this.handlers10?.Count > 0) { failures.AddRange(this.Verify(this.handlers10, 10)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::TypeConstraints
				{
					public Mock(global::TypeConstraintsCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1?.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2?.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "void HasUnmanaged<T>()")]
					public override void HasUnmanaged<T>()
						where T : struct
					{
						if (this.Expectations.handlers3?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers3[0];
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler3<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasUnmanaged<T>()");
							}
						}
						else
						{
							base.HasUnmanaged<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(4, "void HasNotNull<T>()")]
					public override void HasNotNull<T>()
					{
						if (this.Expectations.handlers4?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers4[0];
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler4<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasNotNull<T>()");
							}
						}
						else
						{
							base.HasNotNull<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(5, "void HasClass<T>()")]
					public override void HasClass<T>()
						where T : class
					{
						if (this.Expectations.handlers5?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers5[0];
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler5<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasClass<T>()");
							}
						}
						else
						{
							base.HasClass<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(6, "void HasStruct<T>()")]
					public override void HasStruct<T>()
						where T : struct
					{
						if (this.Expectations.handlers6?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers6[0];
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler6<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasStruct<T>()");
							}
						}
						else
						{
							base.HasStruct<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(7, "void HasClassTypeConstraint<T>()")]
					public override void HasClassTypeConstraint<T>()
					{
						if (this.Expectations.handlers7?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers7[0];
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler7<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasClassTypeConstraint<T>()");
							}
						}
						else
						{
							base.HasClassTypeConstraint<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(8, "void HasInterfaceTypeConstraint<T>()")]
					public override void HasInterfaceTypeConstraint<T>()
					{
						if (this.Expectations.handlers8?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers8[0];
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler8<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasInterfaceTypeConstraint<T>()");
							}
						}
						else
						{
							base.HasInterfaceTypeConstraint<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(9, "void HasConstructorConstraint<T>()")]
					public override void HasConstructorConstraint<T>()
					{
						if (this.Expectations.handlers9?.Count > 0)
						{
							var @genericHandler = this.Expectations.handlers9[0];
							if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler9<T> @handler)
							{
								@handler.CallCount++;
								@handler.Callback?.Invoke();
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("The provided handler does not match for void HasConstructorConstraint<T>()");
							}
						}
						else
						{
							base.HasConstructorConstraint<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(10, "TData? HasNullableValue<TData>(TData? @data)")]
					public override TData? HasNullableValue<TData>(TData? @data)
						where TData : default
					{
						if (this.Expectations.handlers10?.Count > 0)
						{
							foreach (var @genericHandler in this.Expectations.handlers10)
							{
								if (@genericHandler is global::TypeConstraintsCreateExpectations.Handler10<TData> @handler)
								{
									if (@handler.@data.IsValid(@data!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@data!) : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for TData? HasNullableValue<TData>(TData? @data)");
						}
						else
						{
							return base.HasNullableValue<TData>(data: @data!);
						}
					}
					
					private global::TypeConstraintsCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::TypeConstraintsCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::TypeConstraintsCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::TypeConstraintsCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(@handler);
						return new(@handler);
					}
					
					internal new global::Rocks.Adornments<global::TypeConstraintsCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
						var handler = new global::TypeConstraintsCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::TypeConstraintsCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
						var handler = new global::TypeConstraintsCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::TypeConstraintsCreateExpectations.Handler3<T>, global::System.Action> HasUnmanaged<T>() where T : unmanaged
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(); }
						var handler = new global::TypeConstraintsCreateExpectations.Handler3<T>();
						this.Expectations.handlers3.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::TypeConstraintsCreateExpectations.Handler4<T>, global::System.Action> HasNotNull<T>() where T : notnull
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers4 is null ) { this.Expectations.handlers4 = new(); }
						var handler = new global::TypeConstraintsCreateExpectations.Handler4<T>();
						this.Expectations.handlers4.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::TypeConstraintsCreateExpectations.Handler5<T>, global::System.Action> HasClass<T>() where T : class
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers5 is null ) { this.Expectations.handlers5 = new(); }
						var handler = new global::TypeConstraintsCreateExpectations.Handler5<T>();
						this.Expectations.handlers5.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::TypeConstraintsCreateExpectations.Handler6<T>, global::System.Action> HasStruct<T>() where T : struct
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers6 is null ) { this.Expectations.handlers6 = new(); }
						var handler = new global::TypeConstraintsCreateExpectations.Handler6<T>();
						this.Expectations.handlers6.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::TypeConstraintsCreateExpectations.Handler7<T>, global::System.Action> HasClassTypeConstraint<T>() where T : global::ClassConstraint
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers7 is null ) { this.Expectations.handlers7 = new(); }
						var handler = new global::TypeConstraintsCreateExpectations.Handler7<T>();
						this.Expectations.handlers7.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::TypeConstraintsCreateExpectations.Handler8<T>, global::System.Action> HasInterfaceTypeConstraint<T>() where T : global::InterfaceConstraint
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers8 is null ) { this.Expectations.handlers8 = new(); }
						var handler = new global::TypeConstraintsCreateExpectations.Handler8<T>();
						this.Expectations.handlers8.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::TypeConstraintsCreateExpectations.Handler9<T>, global::System.Action> HasConstructorConstraint<T>() where T : new()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers9 is null ) { this.Expectations.handlers9 = new(); }
						var handler = new global::TypeConstraintsCreateExpectations.Handler9<T>();
						this.Expectations.handlers9.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::TypeConstraintsCreateExpectations.Handler10<TData>, global::System.Func<TData?, TData?>, TData?> HasNullableValue<TData>(global::Rocks.Argument<TData?> @data)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::TypeConstraintsCreateExpectations.Handler10<TData>
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers10 is null ) { this.Expectations.handlers10 = new(); }
						this.Expectations.handlers10.Add(@handler);
						return new(@handler);
					}
					
					private global::TypeConstraintsCreateExpectations Expectations { get; }
				}
				
				internal global::TypeConstraintsCreateExpectations.MethodExpectations Methods { get; }
				
				internal TypeConstraintsCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::TypeConstraints Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "TypeConstraints_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task GenerateMakeTargetingClassAsync()
	{
		var code =
			"""
			using Rocks;
			
			[assembly: RockMake<TypeConstraints>]

			#nullable enable
			
			public interface InterfaceConstraint { }
			public class ClassConstraint { }
			
			public class TypeConstraints
			{				
			   public virtual void HasUnmanaged<T>() where T : unmanaged { }
			   public virtual void HasNotNull<T>() where T : notnull { }
			   public virtual void HasClass<T>() where T : class { }
			   public virtual void HasStruct<T>() where T : struct { }
			   public virtual void HasClassTypeConstraint<T>() where T : ClassConstraint { }
			   public virtual void HasInterfaceTypeConstraint<T>() where T : InterfaceConstraint { }
			   public virtual void HasConstructorConstraint<T>() where T : new() { }
				public virtual TData? HasNullableValue<TData>(TData? data) => default!;
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8775
			#nullable enable
			
			internal sealed class TypeConstraintsMakeExpectations
			{
				internal global::TypeConstraints Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::TypeConstraints
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override void HasUnmanaged<T>()
						where T : struct
					{
					}
					public override void HasNotNull<T>()
					{
					}
					public override void HasClass<T>()
						where T : class
					{
					}
					public override void HasStruct<T>()
						where T : struct
					{
					}
					public override void HasClassTypeConstraint<T>()
					{
					}
					public override void HasInterfaceTypeConstraint<T>()
					{
					}
					public override void HasConstructorConstraint<T>()
					{
					}
					public override TData? HasNullableValue<TData>(TData? @data)
						where TData : default
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "TypeConstraints_Rock_Make.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task GenerateProperNumberOfConstraintsAsync()
	{
		var code =
			"""
			using Rocks;
			
			[assembly: RockCreate<IUnmanagedValue>]

			public interface IValue<TValue>
				where TValue : IValue<TValue> { }

			public class Value<TValue>
				where TValue : unmanaged, IValue<TValue> { }

			public interface IUnmanagedValue
			{
				void Use<TValue>(Value<TValue> value)
					where TValue : unmanaged, IValue<TValue>;
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class IUnmanagedValueCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0<TValue>
					: global::Rocks.Handler<global::System.Action<global::Value<TValue>>>
					where TValue : unmanaged, global::IValue<TValue>
				{
					public global::Rocks.Argument<global::Value<TValue>> @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IUnmanagedValue
				{
					public Mock(global::IUnmanagedValueCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "void Use<TValue>(global::Value<TValue> @value)")]
					public void Use<TValue>(global::Value<TValue> @value)
						where TValue : unmanaged, global::IValue<TValue>
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							var @foundMatch = false;
							
							foreach (var @genericHandler in this.Expectations.handlers0)
							{
								if (@genericHandler is global::IUnmanagedValueCreateExpectations.Handler0<TValue> @handler)
								{
									if (@handler.@value.IsValid(@value!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(@value!);
										break;
									}
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void Use<TValue>(global::Value<TValue> @value)");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void Use<TValue>(global::Value<TValue> @value)");
						}
					}
					
					private global::IUnmanagedValueCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IUnmanagedValueCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::IUnmanagedValueCreateExpectations.Handler0<TValue>, global::System.Action<global::Value<TValue>>> Use<TValue>(global::Rocks.Argument<global::Value<TValue>> @value) where TValue : unmanaged, global::IValue<TValue>
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@value);
						
						var @handler = new global::IUnmanagedValueCreateExpectations.Handler0<TValue>
						{
							@value = @value,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(@handler);
						return new(@handler);
					}
					
					private global::IUnmanagedValueCreateExpectations Expectations { get; }
				}
				
				internal global::IUnmanagedValueCreateExpectations.MethodExpectations Methods { get; }
				
				internal IUnmanagedValueCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IUnmanagedValue Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IUnmanagedValue_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task GenerateAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<MockTests.Thing<string>>]

			namespace MockTests
			{
				public class Thing { }

				public abstract class Thing<T>
					: Thing where T : class
				{
					public abstract Thing<TTarget> As<TTarget>() where TTarget : class;
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			namespace MockTests
			{
				internal sealed class ThingOfstringCreateExpectations
					: global::Rocks.Expectations
				{
					#pragma warning disable CS8618
					
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
					{
						public global::Rocks.Argument<object?> @obj { get; set; }
					}
					
					internal sealed class Handler1
						: global::Rocks.Handler<global::System.Func<int>, int>
					{ }
					
					internal sealed class Handler2
						: global::Rocks.Handler<global::System.Func<string?>, string?>
					{ }
					
					internal sealed class Handler3<TTarget>
						: global::Rocks.Handler<global::System.Func<global::MockTests.Thing<TTarget>>, global::MockTests.Thing<TTarget>>
						where TTarget : class
					{ }
					
					#pragma warning restore CS8618
					
					private global::System.Collections.Generic.List<global::MockTests.ThingOfstringCreateExpectations.Handler0>? @handlers0;
					private global::System.Collections.Generic.List<global::MockTests.ThingOfstringCreateExpectations.Handler1>? @handlers1;
					private global::System.Collections.Generic.List<global::MockTests.ThingOfstringCreateExpectations.Handler2>? @handlers2;
					private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers3;
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
							if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
							if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2, 2)); }
							if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3, 3)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.Thing<string>
					{
						public Mock(global::MockTests.ThingOfstringCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
						public override bool Equals(object? @obj)
						{
							if (this.Expectations.handlers0?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@obj.IsValid(@obj!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@obj!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
							}
							else
							{
								return base.Equals(obj: @obj!);
							}
						}
						
						[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
						public override int GetHashCode()
						{
							if (this.Expectations.handlers1?.Count > 0)
							{
								var @handler = this.Expectations.handlers1[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.GetHashCode();
							}
						}
						
						[global::Rocks.MemberIdentifier(2, "string? ToString()")]
						public override string? ToString()
						{
							if (this.Expectations.handlers2?.Count > 0)
							{
								var @handler = this.Expectations.handlers2[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.ToString();
							}
						}
						
						[global::Rocks.MemberIdentifier(3, "global::MockTests.Thing<TTarget> As<TTarget>()")]
						public override global::MockTests.Thing<TTarget> As<TTarget>()
							where TTarget : class
						{
							if (this.Expectations.handlers3?.Count > 0)
							{
								foreach (var @genericHandler in this.Expectations.handlers3)
								{
									if (@genericHandler is global::MockTests.ThingOfstringCreateExpectations.Handler3<TTarget> @handler)
									{
										{
											@handler.CallCount++;
											var @result = @handler.Callback is not null ?
												@handler.Callback() : @handler.ReturnValue;
											return @result!;
										}
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for global::MockTests.Thing<TTarget> As<TTarget>()");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::MockTests.Thing<TTarget> As<TTarget>()");
						}
						
						private global::MockTests.ThingOfstringCreateExpectations Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.ThingOfstringCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::MockTests.ThingOfstringCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@obj);
							
							var @handler = new global::MockTests.ThingOfstringCreateExpectations.Handler0
							{
								@obj = @obj,
							};
							
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
							this.Expectations.handlers0.Add(@handler);
							return new(@handler);
						}
						
						internal new global::Rocks.Adornments<global::MockTests.ThingOfstringCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
							var handler = new global::MockTests.ThingOfstringCreateExpectations.Handler1();
							this.Expectations.handlers1.Add(handler);
							return new(handler);
						}
						
						internal new global::Rocks.Adornments<global::MockTests.ThingOfstringCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
							var handler = new global::MockTests.ThingOfstringCreateExpectations.Handler2();
							this.Expectations.handlers2.Add(handler);
							return new(handler);
						}
						
						internal global::Rocks.Adornments<global::MockTests.ThingOfstringCreateExpectations.Handler3<TTarget>, global::System.Func<global::MockTests.Thing<TTarget>>, global::MockTests.Thing<TTarget>> As<TTarget>() where TTarget : class
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(); }
							var handler = new global::MockTests.ThingOfstringCreateExpectations.Handler3<TTarget>();
							this.Expectations.handlers3.Add(handler);
							return new(handler);
						}
						
						private global::MockTests.ThingOfstringCreateExpectations Expectations { get; }
					}
					
					internal global::MockTests.ThingOfstringCreateExpectations.MethodExpectations Methods { get; }
					
					internal ThingOfstringCreateExpectations() =>
						(this.Methods) = (new(this));
					
					internal global::MockTests.Thing<string> Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MockTests.Thingstring_Rock_Create.g.cs", generatedCode) },
			[]);
	}
}