using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class GenericsGeneratorTests
{
	[Test]
	public static async Task GenerateWithEventsAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(IGenericsAndEvent), BuildType.Create | BuildType.Make)]
	
			public interface IGenericsAndEvent
			{
				int Work<T>(T value);
				int ConstrainedWork<T>(T value) where T : class, new();
				event EventHandler MyEvent;
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IGenericsAndEventCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0<T>
					: global::Rocks.Handler<global::System.Func<T, int>, int>
				{
					public global::Rocks.Argument<T> @value { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers0;
				internal sealed class Handler1<T>
					: global::Rocks.Handler<global::System.Func<T, int>, int>
					where T : class, new()
				{
					public global::Rocks.Argument<T> @value { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IGenericsAndEvent, global::Rocks.IRaiseEvents
				{
					public Mock(global::IGenericsAndEventCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public int Work<T>(T @value)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers0)
							{
								if (@genericHandler is global::IGenericsAndEventCreateExpectations.Handler0<T> @handler)
								{
									if (@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@value!) : @handler.ReturnValue;
										@handler.RaiseEvents(this);
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public int ConstrainedWork<T>(T @value)
						where T : class, new()
					{
						if (this.Expectations.handlers1 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers1)
							{
								if (@genericHandler is global::IGenericsAndEventCreateExpectations.Handler1<T> @handler)
								{
									if (@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@value!) : @handler.ReturnValue;
										@handler.RaiseEvents(this);
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(1)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
					}
					
					#pragma warning disable CS0067
					public event global::System.EventHandler? MyEvent;
					#pragma warning restore CS0067
					
					void global::Rocks.IRaiseEvents.Raise(string @fieldName, object @args)
					{
						var @thisType = this.GetType();
						var @eventDelegate = (global::System.MulticastDelegate)thisType.GetField(@fieldName, 
							global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.NonPublic)!.GetValue(this)!;
						
						if (@eventDelegate is not null)
						{
							foreach (var @handler in @eventDelegate.GetInvocationList())
							{
								@handler.Method.Invoke(@handler.Target, new object[]{this, @args});
							}
						}
					}
					
					private global::IGenericsAndEventCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IGenericsAndEventCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::IGenericsAndEventCreateExpectations.Adornments.AdornmentsForHandler0<T> Work<T>(global::Rocks.Argument<T> @value)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@value);
						
						var @handler = new global::IGenericsAndEventCreateExpectations.Handler0<T>
						{
							@value = @value,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal global::IGenericsAndEventCreateExpectations.Adornments.AdornmentsForHandler1<T> ConstrainedWork<T>(global::Rocks.Argument<T> @value) where T : class, new()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@value);
						
						var @handler = new global::IGenericsAndEventCreateExpectations.Handler1<T>
						{
							@value = @value,
						};
						
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
						else { this.Expectations.handlers1.Add(@handler); }
						return new(@handler);
					}
					
					private global::IGenericsAndEventCreateExpectations Expectations { get; }
				}
				
				internal global::IGenericsAndEventCreateExpectations.MethodExpectations Methods { get; }
				
				internal IGenericsAndEventCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IGenericsAndEvent Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIGenericsAndEvent<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIGenericsAndEvent<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0<T>
						: global::Rocks.Adornments<AdornmentsForHandler0<T>, global::IGenericsAndEventCreateExpectations.Handler0<T>, global::System.Func<T, int>, int>, IAdornmentsForIGenericsAndEvent<AdornmentsForHandler0<T>>
					{
						public AdornmentsForHandler0(global::IGenericsAndEventCreateExpectations.Handler0<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1<T>
						: global::Rocks.Adornments<AdornmentsForHandler1<T>, global::IGenericsAndEventCreateExpectations.Handler1<T>, global::System.Func<T, int>, int>, IAdornmentsForIGenericsAndEvent<AdornmentsForHandler1<T>> where T : class, new()
					{
						public AdornmentsForHandler1(global::IGenericsAndEventCreateExpectations.Handler1<T> handler)
							: base(handler) { }
					}
				}
			}
			
			internal static class IGenericsAndEventAdornmentsEventExtensions
			{
				internal static TAdornments RaiseMyEvent<TAdornments>(this TAdornments self, global::System.EventArgs args) where TAdornments : global::IGenericsAndEventCreateExpectations.Adornments.IAdornmentsForIGenericsAndEvent<TAdornments> => 
					self.AddRaiseEvent(new("MyEvent", args));
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IGenericsAndEventMakeExpectations
			{
				internal global::IGenericsAndEvent Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IGenericsAndEvent
				{
					public Mock()
					{
					}
					
					public int Work<T>(T @value)
					{
						return default!;
					}
					public int ConstrainedWork<T>(T @value)
						where T : class, new()
					{
						return default!;
					}
					
					#pragma warning disable CS0067
					public event global::System.EventHandler? MyEvent;
					#pragma warning restore CS0067
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IGenericsAndEvent_Rock_Create.g.cs", createGeneratedCode),
				("IGenericsAndEvent_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithGenericAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: Rock(typeof(IService<,>), BuildType.Create | BuildType.Make)]

			#nullable enable

			public interface IService<T, TReturn>
			{
				TReturn Service(T data);
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IServiceCreateExpectations<T, TReturn>
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<T, TReturn>, TReturn>
				{
					public global::Rocks.Argument<T> @data { get; set; }
				}
				private global::Rocks.Handlers<global::IServiceCreateExpectations<T, TReturn>.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IService<T, TReturn>
				{
					public Mock(global::IServiceCreateExpectations<T, TReturn> @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public TReturn Service(T @data)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@data.IsValid(@data!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@data!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
					}
					
					private global::IServiceCreateExpectations<T, TReturn> Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IServiceCreateExpectations<T, TReturn> expectations) =>
						this.Expectations = expectations;
					
					internal global::IServiceCreateExpectations<T, TReturn>.Adornments.AdornmentsForHandler0 Service(global::Rocks.Argument<T> @data)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::IServiceCreateExpectations<T, TReturn>.Handler0
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::IServiceCreateExpectations<T, TReturn> Expectations { get; }
				}
				
				internal global::IServiceCreateExpectations<T, TReturn>.MethodExpectations Methods { get; }
				
				internal IServiceCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IService<T, TReturn> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIService<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIService<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::IServiceCreateExpectations<T, TReturn>.Handler0, global::System.Func<T, TReturn>, TReturn>, IAdornmentsForIService<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::IServiceCreateExpectations<T, TReturn>.Handler0 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class IServiceMakeExpectations<T, TReturn>
			{
				internal global::IService<T, TReturn> Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IService<T, TReturn>
				{
					public Mock()
					{
					}
					
					public TReturn Service(T @data)
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("IServiceT, TReturn_Rock_Create.g.cs", createGeneratedCode),
				("IServiceT, TReturn_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWhenGenericParameterNameChangesAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: Rock(typeof(M<>), BuildType.Create | BuildType.Make)]

			#nullable enable

			public abstract class Proxy<A>
			{
				public abstract Proxy<B> Bind<B>(Func<B> f);
			}      

			public class M<A>
				: Proxy<A>
			{
				public override Proxy<S> Bind<S>(Func<S> f) => new M<S>();
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class MCreateExpectations<A>
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::MCreateExpectations<A>.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::MCreateExpectations<A>.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::MCreateExpectations<A>.Handler2>? @handlers2;
				internal sealed class Handler4<S>
					: global::Rocks.Handler<global::System.Func<global::System.Func<S>, global::Proxy<S>>, global::Proxy<S>>
				{
					public global::Rocks.Argument<global::System.Func<S>> @f { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers4;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::M<A>
				{
					public Mock(global::MCreateExpectations<A> @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(4)]
					public override global::Proxy<S> Bind<S>(global::System.Func<S> @f)
					{
						if (this.Expectations.handlers4 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers4)
							{
								if (@genericHandler is global::MCreateExpectations<A>.Handler4<S> @handler)
								{
									if (@handler.@f.IsValid(@f!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@f!) : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(4)}");
						}
						else
						{
							return base.Bind<S>(f: @f!);
						}
					}
					
					private global::MCreateExpectations<A> Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::MCreateExpectations<A> expectations) =>
						this.Expectations = expectations;
					
					internal global::MCreateExpectations<A>.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::MCreateExpectations<A>.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::MCreateExpectations<A>.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::MCreateExpectations<A>.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::MCreateExpectations<A>.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::MCreateExpectations<A>.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal global::MCreateExpectations<A>.Adornments.AdornmentsForHandler4<S> Bind<S>(global::Rocks.Argument<global::System.Func<S>> @f)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@f);
						
						var @handler = new global::MCreateExpectations<A>.Handler4<S>
						{
							@f = @f,
						};
						
						if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(@handler); }
						else { this.Expectations.handlers4.Add(@handler); }
						return new(@handler);
					}
					
					private global::MCreateExpectations<A> Expectations { get; }
				}
				
				internal global::MCreateExpectations<A>.MethodExpectations Methods { get; }
				
				internal MCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::M<A> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForM<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForM<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::MCreateExpectations<A>.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForM<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::MCreateExpectations<A>.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::MCreateExpectations<A>.Handler1, global::System.Func<int>, int>, IAdornmentsForM<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::MCreateExpectations<A>.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::MCreateExpectations<A>.Handler2, global::System.Func<string?>, string?>, IAdornmentsForM<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::MCreateExpectations<A>.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler4<S>
						: global::Rocks.Adornments<AdornmentsForHandler4<S>, global::MCreateExpectations<A>.Handler4<S>, global::System.Func<global::System.Func<S>, global::Proxy<S>>, global::Proxy<S>>, IAdornmentsForM<AdornmentsForHandler4<S>>
					{
						public AdornmentsForHandler4(global::MCreateExpectations<A>.Handler4<S> handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class MMakeExpectations<A>
			{
				internal global::M<A> Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::M<A>
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override global::Proxy<S> Bind<S>(global::System.Func<S> @f)
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MA_Rock_Create.g.cs", createGeneratedCode),
				("MA_Rock_Make.g.cs", makeGeneratedCode)         
			],
			[]);
	}

	[Test]
	public static async Task GenerateWhenMemberHasOpenGenericsAndMultipleExpectationsAreSetAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(GenericContainer), BuildType.Create | BuildType.Make)]

			#nullable enable

			public class ReferenceTypeOne { }
			public class ReferenceTypeTwo { }

			public class ReferencedContainer<T> { }
			
			public class GenericContainer
			{
				public virtual ReferencedContainer<T> SetThings<T>() where T : class => new();
				public virtual TReturn Run<TReturn>() where TReturn : new() => new();
			}			
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class GenericContainerCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::GenericContainerCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::GenericContainerCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::GenericContainerCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3<T>
					: global::Rocks.Handler<global::System.Func<global::ReferencedContainer<T>>, global::ReferencedContainer<T>>
					where T : class
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers3;
				internal sealed class Handler4<TReturn>
					: global::Rocks.Handler<global::System.Func<TReturn>, TReturn>
					where TReturn : new()
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers4;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::GenericContainer
				{
					public Mock(global::GenericContainerCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3)]
					public override global::ReferencedContainer<T> SetThings<T>()
						where T : class
					{
						if (this.Expectations.handlers3 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers3)
							{
								if (@genericHandler is global::GenericContainerCreateExpectations.Handler3<T> @handler)
								{
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback() : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(3)}");
						}
						else
						{
							return base.SetThings<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(4)]
					public override TReturn Run<TReturn>()
					{
						if (this.Expectations.handlers4 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers4)
							{
								if (@genericHandler is global::GenericContainerCreateExpectations.Handler4<TReturn> @handler)
								{
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback() : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(4)}");
						}
						else
						{
							return base.Run<TReturn>();
						}
					}
					
					private global::GenericContainerCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::GenericContainerCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::GenericContainerCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::GenericContainerCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::GenericContainerCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::GenericContainerCreateExpectations.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::GenericContainerCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::GenericContainerCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal global::GenericContainerCreateExpectations.Adornments.AdornmentsForHandler3<T> SetThings<T>() where T : class
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::GenericContainerCreateExpectations.Handler3<T>();
						if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
						else { this.Expectations.handlers3.Add(handler); }
						return new(handler);
					}
					
					internal global::GenericContainerCreateExpectations.Adornments.AdornmentsForHandler4<TReturn> Run<TReturn>() where TReturn : new()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::GenericContainerCreateExpectations.Handler4<TReturn>();
						if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(handler); }
						else { this.Expectations.handlers4.Add(handler); }
						return new(handler);
					}
					
					private global::GenericContainerCreateExpectations Expectations { get; }
				}
				
				internal global::GenericContainerCreateExpectations.MethodExpectations Methods { get; }
				
				internal GenericContainerCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::GenericContainer Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForGenericContainer<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForGenericContainer<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::GenericContainerCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForGenericContainer<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::GenericContainerCreateExpectations.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::GenericContainerCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForGenericContainer<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::GenericContainerCreateExpectations.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::GenericContainerCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForGenericContainer<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::GenericContainerCreateExpectations.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3<T>
						: global::Rocks.Adornments<AdornmentsForHandler3<T>, global::GenericContainerCreateExpectations.Handler3<T>, global::System.Func<global::ReferencedContainer<T>>, global::ReferencedContainer<T>>, IAdornmentsForGenericContainer<AdornmentsForHandler3<T>> where T : class
					{
						public AdornmentsForHandler3(global::GenericContainerCreateExpectations.Handler3<T> handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler4<TReturn>
						: global::Rocks.Adornments<AdornmentsForHandler4<TReturn>, global::GenericContainerCreateExpectations.Handler4<TReturn>, global::System.Func<TReturn>, TReturn>, IAdornmentsForGenericContainer<AdornmentsForHandler4<TReturn>> where TReturn : new()
					{
						public AdornmentsForHandler4(global::GenericContainerCreateExpectations.Handler4<TReturn> handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class GenericContainerMakeExpectations
			{
				internal global::GenericContainer Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::GenericContainer
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override global::ReferencedContainer<T> SetThings<T>()
						where T : class
					{
						return default!;
					}
					public override TReturn Run<TReturn>()
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("GenericContainer_Rock_Create.g.cs", createGeneratedCode),
				("GenericContainer_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWhenEqualsIsDuplicatedAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock(typeof(Criterion<>), BuildType.Create | BuildType.Make)]

			#nullable enable

			public class Criterion<T> : IEquatable<T>
			{
				public override int GetHashCode() => base.GetHashCode();
				public override bool Equals(object? obj) => base.Equals(obj);
				public bool Equals(T? other) => true;
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class CriterionCreateExpectations<T>
				: global::Rocks.Expectations
			{
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::CriterionCreateExpectations<T>.Handler2>? @handlers2;
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::CriterionCreateExpectations<T>.Handler3>? @handlers3;
				internal sealed class Handler4
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::CriterionCreateExpectations<T>.Handler4>? @handlers4;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::Criterion<T>
				{
					public Mock(global::CriterionCreateExpectations<T> @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers3 is not null)
						{
							var @handler = this.Expectations.handlers3.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(4)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers4 is not null)
						{
							foreach (var @handler in this.Expectations.handlers4)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(4)}");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					private global::CriterionCreateExpectations<T> Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::CriterionCreateExpectations<T> expectations) =>
						this.Expectations = expectations;
					
					internal new global::CriterionCreateExpectations<T>.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::CriterionCreateExpectations<T>.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal new global::CriterionCreateExpectations<T>.Adornments.AdornmentsForHandler3 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::CriterionCreateExpectations<T>.Handler3();
						if (this.Expectations.handlers3 is null) { this.Expectations.handlers3 = new(handler); }
						else { this.Expectations.handlers3.Add(handler); }
						return new(handler);
					}
					
					internal global::CriterionCreateExpectations<T>.Adornments.AdornmentsForHandler4 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::CriterionCreateExpectations<T>.Handler4
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(@handler); }
						else { this.Expectations.handlers4.Add(@handler); }
						return new(@handler);
					}
					
					private global::CriterionCreateExpectations<T> Expectations { get; }
				}
				
				internal global::CriterionCreateExpectations<T>.MethodExpectations Methods { get; }
				
				internal CriterionCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::Criterion<T> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForCriterion<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForCriterion<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::CriterionCreateExpectations<T>.Handler2, global::System.Func<string?>, string?>, IAdornmentsForCriterion<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::CriterionCreateExpectations<T>.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler3
						: global::Rocks.Adornments<AdornmentsForHandler3, global::CriterionCreateExpectations<T>.Handler3, global::System.Func<int>, int>, IAdornmentsForCriterion<AdornmentsForHandler3>
					{
						public AdornmentsForHandler3(global::CriterionCreateExpectations<T>.Handler3 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler4
						: global::Rocks.Adornments<AdornmentsForHandler4, global::CriterionCreateExpectations<T>.Handler4, global::System.Func<object?, bool>, bool>, IAdornmentsForCriterion<AdornmentsForHandler4>
					{
						public AdornmentsForHandler4(global::CriterionCreateExpectations<T>.Handler4 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class CriterionMakeExpectations<T>
			{
				internal global::Criterion<T> Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::Criterion<T>
				{
					public Mock()
					{
					}
					
					public override string? ToString()
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override bool Equals(object? @obj)
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("CriterionT_Rock_Create.g.cs", createGeneratedCode),
				("CriterionT_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWhenClosedGenericOnClassCreatesExactMethodMatchAsync()
	{
		var code =
			"""
			using Rocks;

			[assembly: Rock(typeof(GeometryValueComparer<>), BuildType.Create | BuildType.Make)]

			#nullable enable

			public abstract class ValueComparer
			{
				public abstract object? Snapshot(object? instance);
			}

			public class ValueComparer<T>
				: ValueComparer
			{
				public override object? Snapshot(object? instance) => null;

				public virtual T Snapshot(T instance) => default!;
			}

			public class GeometryValueComparer<TGeometry>
				: ValueComparer<TGeometry> { }
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class GeometryValueComparerCreateExpectations<TGeometry>
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::GeometryValueComparerCreateExpectations<TGeometry>.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::GeometryValueComparerCreateExpectations<TGeometry>.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::GeometryValueComparerCreateExpectations<TGeometry>.Handler2>? @handlers2;
				internal sealed class Handler4
					: global::Rocks.Handler<global::System.Func<object?, object?>, object?>
				{
					public global::Rocks.Argument<object?> @instance { get; set; }
				}
				private global::Rocks.Handlers<global::GeometryValueComparerCreateExpectations<TGeometry>.Handler4>? @handlers4;
				internal sealed class Handler5
					: global::Rocks.Handler<global::System.Func<TGeometry, TGeometry>, TGeometry>
				{
					public global::Rocks.Argument<TGeometry> @instance { get; set; }
				}
				private global::Rocks.Handlers<global::GeometryValueComparerCreateExpectations<TGeometry>.Handler5>? @handlers5;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
						if (this.handlers5 is not null) { failures.AddRange(this.Verify(this.handlers5, 5)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::GeometryValueComparer<TGeometry>
				{
					public Mock(global::GeometryValueComparerCreateExpectations<TGeometry> @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(4)]
					public override object? Snapshot(object? @instance)
					{
						if (this.Expectations.handlers4 is not null)
						{
							foreach (var @handler in this.Expectations.handlers4)
							{
								if (@handler.@instance.IsValid(@instance!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@instance!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(4)}");
						}
						else
						{
							return base.Snapshot(instance: @instance!);
						}
					}
					
					[global::Rocks.MemberIdentifier(5)]
					public override TGeometry Snapshot(TGeometry @instance)
					{
						if (this.Expectations.handlers5 is not null)
						{
							foreach (var @handler in this.Expectations.handlers5)
							{
								if (@handler.@instance.IsValid(@instance!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@instance!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(5)}");
						}
						else
						{
							return base.Snapshot(instance: @instance!);
						}
					}
					
					private global::GeometryValueComparerCreateExpectations<TGeometry> Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::GeometryValueComparerCreateExpectations<TGeometry> expectations) =>
						this.Expectations = expectations;
					
					internal global::GeometryValueComparerCreateExpectations<TGeometry>.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::GeometryValueComparerCreateExpectations<TGeometry>.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::GeometryValueComparerCreateExpectations<TGeometry>.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::GeometryValueComparerCreateExpectations<TGeometry>.Handler1();
						if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::GeometryValueComparerCreateExpectations<TGeometry>.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::GeometryValueComparerCreateExpectations<TGeometry>.Handler2();
						if (this.Expectations.handlers2 is null) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal global::GeometryValueComparerCreateExpectations<TGeometry>.Adornments.AdornmentsForHandler4 Snapshot(global::Rocks.Argument<object?> @instance)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@instance);
						
						var @handler = new global::GeometryValueComparerCreateExpectations<TGeometry>.Handler4
						{
							@instance = @instance,
						};
						
						if (this.Expectations.handlers4 is null) { this.Expectations.handlers4 = new(@handler); }
						else { this.Expectations.handlers4.Add(@handler); }
						return new(@handler);
					}
					
					internal global::GeometryValueComparerCreateExpectations<TGeometry>.Adornments.AdornmentsForHandler5 Snapshot(global::Rocks.Argument<TGeometry> @instance)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@instance);
						
						var @handler = new global::GeometryValueComparerCreateExpectations<TGeometry>.Handler5
						{
							@instance = @instance,
						};
						
						if (this.Expectations.handlers5 is null) { this.Expectations.handlers5 = new(@handler); }
						else { this.Expectations.handlers5.Add(@handler); }
						return new(@handler);
					}
					
					private global::GeometryValueComparerCreateExpectations<TGeometry> Expectations { get; }
				}
				
				internal global::GeometryValueComparerCreateExpectations<TGeometry>.MethodExpectations Methods { get; }
				
				internal GeometryValueComparerCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::GeometryValueComparer<TGeometry> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForGeometryValueComparer<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForGeometryValueComparer<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::GeometryValueComparerCreateExpectations<TGeometry>.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForGeometryValueComparer<AdornmentsForHandler0>
					{
						public AdornmentsForHandler0(global::GeometryValueComparerCreateExpectations<TGeometry>.Handler0 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::GeometryValueComparerCreateExpectations<TGeometry>.Handler1, global::System.Func<int>, int>, IAdornmentsForGeometryValueComparer<AdornmentsForHandler1>
					{
						public AdornmentsForHandler1(global::GeometryValueComparerCreateExpectations<TGeometry>.Handler1 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::GeometryValueComparerCreateExpectations<TGeometry>.Handler2, global::System.Func<string?>, string?>, IAdornmentsForGeometryValueComparer<AdornmentsForHandler2>
					{
						public AdornmentsForHandler2(global::GeometryValueComparerCreateExpectations<TGeometry>.Handler2 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler4
						: global::Rocks.Adornments<AdornmentsForHandler4, global::GeometryValueComparerCreateExpectations<TGeometry>.Handler4, global::System.Func<object?, object?>, object?>, IAdornmentsForGeometryValueComparer<AdornmentsForHandler4>
					{
						public AdornmentsForHandler4(global::GeometryValueComparerCreateExpectations<TGeometry>.Handler4 handler)
							: base(handler) { }
					}
					public sealed class AdornmentsForHandler5
						: global::Rocks.Adornments<AdornmentsForHandler5, global::GeometryValueComparerCreateExpectations<TGeometry>.Handler5, global::System.Func<TGeometry, TGeometry>, TGeometry>, IAdornmentsForGeometryValueComparer<AdornmentsForHandler5>
					{
						public AdornmentsForHandler5(global::GeometryValueComparerCreateExpectations<TGeometry>.Handler5 handler)
							: base(handler) { }
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			internal sealed class GeometryValueComparerMakeExpectations<TGeometry>
			{
				internal global::GeometryValueComparer<TGeometry> Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::GeometryValueComparer<TGeometry>
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override object? Snapshot(object? @instance)
					{
						return default!;
					}
					public override TGeometry Snapshot(TGeometry @instance)
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("GeometryValueComparerTGeometry_Rock_Create.g.cs", createGeneratedCode),
				("GeometryValueComparerTGeometry_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWhenClosedGenericOnInterfaceCreatesExactMethodMatchAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			using System.Threading.Tasks;
			
			[assembly: Rock(typeof(MockTests.IRequestClient<>), BuildType.Create | BuildType.Make)]

			namespace MockTests
			{
				public interface RequestHandle<T>
					 where T : class { }

				public interface IRequestClient<TRequest>
					 where TRequest : class
				{
					 RequestHandle<TRequest> Create(TRequest message);

					 RequestHandle<TRequest> Create(object values);			
				}			
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IRequestClientCreateExpectations<TRequest>
					: global::Rocks.Expectations
					where TRequest : class
				{
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Func<TRequest, global::MockTests.RequestHandle<TRequest>>, global::MockTests.RequestHandle<TRequest>>
					{
						public global::Rocks.Argument<TRequest> @message { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.IRequestClientCreateExpectations<TRequest>.Handler0>? @handlers0;
					internal sealed class Handler1
						: global::Rocks.Handler<global::System.Func<object, global::MockTests.RequestHandle<TRequest>>, global::MockTests.RequestHandle<TRequest>>
					{
						public global::Rocks.Argument<object> @values { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.IRequestClientCreateExpectations<TRequest>.Handler1>? @handlers1;
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
							if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.IRequestClient<TRequest>
					{
						public Mock(global::MockTests.IRequestClientCreateExpectations<TRequest> @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0)]
						public global::MockTests.RequestHandle<TRequest> Create(TRequest @message)
						{
							if (this.Expectations.handlers0 is not null)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@message.IsValid(@message!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@message!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
						}
						
						[global::Rocks.MemberIdentifier(1)]
						public global::MockTests.RequestHandle<TRequest> Create(object @values)
						{
							if (this.Expectations.handlers1 is not null)
							{
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.@values.IsValid(@values!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@values!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(1)}");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
						}
						
						private global::MockTests.IRequestClientCreateExpectations<TRequest> Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.IRequestClientCreateExpectations<TRequest> expectations) =>
							this.Expectations = expectations;
						
						internal global::MockTests.IRequestClientCreateExpectations<TRequest>.Adornments.AdornmentsForHandler0 Create(global::Rocks.Argument<TRequest> @message)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@message);
							
							var @handler = new global::MockTests.IRequestClientCreateExpectations<TRequest>.Handler0
							{
								@message = @message,
							};
							
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						
						internal global::MockTests.IRequestClientCreateExpectations<TRequest>.Adornments.AdornmentsForHandler1 Create(global::Rocks.Argument<object> @values)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@values);
							
							var @handler = new global::MockTests.IRequestClientCreateExpectations<TRequest>.Handler1
							{
								@values = @values,
							};
							
							if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
							else { this.Expectations.handlers1.Add(@handler); }
							return new(@handler);
						}
						
						private global::MockTests.IRequestClientCreateExpectations<TRequest> Expectations { get; }
					}
					
					internal global::MockTests.IRequestClientCreateExpectations<TRequest>.MethodExpectations Methods { get; }
					
					internal IRequestClientCreateExpectations() =>
						(this.Methods) = (new(this));
					
					internal global::MockTests.IRequestClient<TRequest> Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForIRequestClient<TAdornments>
							: global::Rocks.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForIRequestClient<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::Rocks.Adornments<AdornmentsForHandler0, global::MockTests.IRequestClientCreateExpectations<TRequest>.Handler0, global::System.Func<TRequest, global::MockTests.RequestHandle<TRequest>>, global::MockTests.RequestHandle<TRequest>>, IAdornmentsForIRequestClient<AdornmentsForHandler0>
						{
							public AdornmentsForHandler0(global::MockTests.IRequestClientCreateExpectations<TRequest>.Handler0 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler1
							: global::Rocks.Adornments<AdornmentsForHandler1, global::MockTests.IRequestClientCreateExpectations<TRequest>.Handler1, global::System.Func<object, global::MockTests.RequestHandle<TRequest>>, global::MockTests.RequestHandle<TRequest>>, IAdornmentsForIRequestClient<AdornmentsForHandler1>
						{
							public AdornmentsForHandler1(global::MockTests.IRequestClientCreateExpectations<TRequest>.Handler1 handler)
								: base(handler) { }
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IRequestClientMakeExpectations<TRequest>
					where TRequest : class
				{
					internal global::MockTests.IRequestClient<TRequest> Instance()
					{
						return new Mock();
					}
					
					private sealed class Mock
						: global::MockTests.IRequestClient<TRequest>
					{
						public Mock()
						{
						}
						
						public global::MockTests.RequestHandle<TRequest> Create(TRequest @message)
						{
							return default!;
						}
						public global::MockTests.RequestHandle<TRequest> Create(object @values)
						{
							return default!;
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MockTests.IRequestClientTRequest_Rock_Create.g.cs", createGeneratedCode),
				("MockTests.IRequestClientTRequest_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWhenClosedGenericCreatesMethodMatchDifferByReturnTypeAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			using System.Threading.Tasks;
			
			[assembly: Rock(typeof(MockTests.IRequest<>), BuildType.Create | BuildType.Make)]

			namespace MockTests
			{
				public interface IRequest<T>
					where T : class
				{
					Task<T> Send(Guid requestId, object values);
					Task Send(Guid requestId, T message);
				}
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IRequestCreateExpectations<T>
					: global::Rocks.Expectations
					where T : class
				{
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Func<global::System.Guid, object, global::System.Threading.Tasks.Task<T>>, global::System.Threading.Tasks.Task<T>>
					{
						public global::Rocks.Argument<global::System.Guid> @requestId { get; set; }
						public global::Rocks.Argument<object> @values { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.IRequestCreateExpectations<T>.Handler0>? @handlers0;
					internal sealed class Handler1
						: global::Rocks.Handler<global::System.Func<global::System.Guid, T, global::System.Threading.Tasks.Task>, global::System.Threading.Tasks.Task>
					{
						public global::Rocks.Argument<global::System.Guid> @requestId { get; set; }
						public global::Rocks.Argument<T> @message { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.IRequestCreateExpectations<T>.Handler1>? @handlers1;
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
							if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.IRequest<T>
					{
						public Mock(global::MockTests.IRequestCreateExpectations<T> @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0)]
						public global::System.Threading.Tasks.Task<T> Send(global::System.Guid @requestId, object @values)
						{
							if (this.Expectations.handlers0 is not null)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@requestId.IsValid(@requestId!) &&
										@handler.@values.IsValid(@values!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@requestId!, @values!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
						}
						
						[global::Rocks.MemberIdentifier(1)]
						public global::System.Threading.Tasks.Task Send(global::System.Guid @requestId, T @message)
						{
							if (this.Expectations.handlers1 is not null)
							{
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.@requestId.IsValid(@requestId!) &&
										@handler.@message.IsValid(@message!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@requestId!, @message!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(1)}");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
						}
						
						private global::MockTests.IRequestCreateExpectations<T> Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.IRequestCreateExpectations<T> expectations) =>
							this.Expectations = expectations;
						
						internal global::MockTests.IRequestCreateExpectations<T>.Adornments.AdornmentsForHandler0 Send(global::Rocks.Argument<global::System.Guid> @requestId, global::Rocks.Argument<object> @values)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@requestId);
							global::System.ArgumentNullException.ThrowIfNull(@values);
							
							var @handler = new global::MockTests.IRequestCreateExpectations<T>.Handler0
							{
								@requestId = @requestId,
								@values = @values,
							};
							
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						
						internal global::MockTests.IRequestCreateExpectations<T>.Adornments.AdornmentsForHandler1 Send(global::Rocks.Argument<global::System.Guid> @requestId, global::Rocks.Argument<T> @message)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@requestId);
							global::System.ArgumentNullException.ThrowIfNull(@message);
							
							var @handler = new global::MockTests.IRequestCreateExpectations<T>.Handler1
							{
								@requestId = @requestId,
								@message = @message,
							};
							
							if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
							else { this.Expectations.handlers1.Add(@handler); }
							return new(@handler);
						}
						
						private global::MockTests.IRequestCreateExpectations<T> Expectations { get; }
					}
					
					internal global::MockTests.IRequestCreateExpectations<T>.MethodExpectations Methods { get; }
					
					internal IRequestCreateExpectations() =>
						(this.Methods) = (new(this));
					
					internal global::MockTests.IRequest<T> Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForIRequest<TAdornments>
							: global::Rocks.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForIRequest<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::Rocks.Adornments<AdornmentsForHandler0, global::MockTests.IRequestCreateExpectations<T>.Handler0, global::System.Func<global::System.Guid, object, global::System.Threading.Tasks.Task<T>>, global::System.Threading.Tasks.Task<T>>, IAdornmentsForIRequest<AdornmentsForHandler0>
						{
							public AdornmentsForHandler0(global::MockTests.IRequestCreateExpectations<T>.Handler0 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler1
							: global::Rocks.Adornments<AdornmentsForHandler1, global::MockTests.IRequestCreateExpectations<T>.Handler1, global::System.Func<global::System.Guid, T, global::System.Threading.Tasks.Task>, global::System.Threading.Tasks.Task>, IAdornmentsForIRequest<AdornmentsForHandler1>
						{
							public AdornmentsForHandler1(global::MockTests.IRequestCreateExpectations<T>.Handler1 handler)
								: base(handler) { }
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IRequestMakeExpectations<T>
					where T : class
				{
					internal global::MockTests.IRequest<T> Instance()
					{
						return new Mock();
					}
					
					private sealed class Mock
						: global::MockTests.IRequest<T>
					{
						public Mock()
						{
						}
						
						public global::System.Threading.Tasks.Task<T> Send(global::System.Guid @requestId, object @values)
						{
							return global::System.Threading.Tasks.Task.FromResult(default(T)!);
						}
						public global::System.Threading.Tasks.Task Send(global::System.Guid @requestId, T @message)
						{
							return global::System.Threading.Tasks.Task.CompletedTask;
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MockTests.IRequestT_Rock_Create.g.cs", createGeneratedCode),
				("MockTests.IRequestT_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}
}