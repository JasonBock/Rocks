using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class GenericsGeneratorTests
{
	[Test]
	public static async Task CreateWithGenericAttributeAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockCreate<IService<int, string>>]
			
			#nullable enable

			public interface IService<T, TReturn>
			{
				TReturn Service(T data);
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			internal sealed class IServiceOfint_stringCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<int, string>, string>
				{
					public global::Rocks.Argument<int> @data { get; set; }
				}
				private global::Rocks.Handlers<global::IServiceOfint_stringCreateExpectations.Handler0>? @handlers0;
				#pragma warning restore CS8618
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IService<int, string>
				{
					public Mock(global::IServiceOfint_stringCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public string Service(int @data)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@data.IsValid(@data!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@data!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
					}
					
					private global::IServiceOfint_stringCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IServiceOfint_stringCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::IServiceOfint_stringCreateExpectations.Adornments.AdornmentsForHandler0 Service(global::Rocks.Argument<int> @data)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::IServiceOfint_stringCreateExpectations.Handler0
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::IServiceOfint_stringCreateExpectations Expectations { get; }
				}
				
				internal global::IServiceOfint_stringCreateExpectations.MethodExpectations Methods { get; }
				
				internal IServiceOfint_stringCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IService<int, string> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIServiceOfint_string<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIServiceOfint_string<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::IServiceOfint_stringCreateExpectations.Handler0, global::System.Func<int, string>, string>, IAdornmentsForIServiceOfint_string<AdornmentsForHandler0>
					{ 
						public AdornmentsForHandler0(global::IServiceOfint_stringCreateExpectations.Handler0 handler)
							: base(handler) { }				
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "IServiceint, string_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task CreateWithNonGenericAttributeAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockCreate(typeof(IService<,>))]
			
			#nullable enable

			public interface IService<T, TReturn>
			{
				TReturn Service(T data);
			}
			""";

		var generatedCode = "";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "MockTests.IService_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task GenerateCreateWithEventsAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<IGenericsAndEvent>]
	
			public interface IGenericsAndEvent
			{
				int Work<T>(T value);
				int ConstrainedWork<T>(T value) where T : class, new();
				event EventHandler MyEvent;
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			internal sealed class IGenericsAndEventCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				internal sealed class Handler0<T>
					: global::Rocks.Handler<global::System.Func<T, int>, int>
				{
					public global::Rocks.Argument<T> @value { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers0;
				internal sealed class Handler1<T>
					: global::Rocks.Handler<global::System.Func<T, int>, int>
					where T : class, new()
				{
					public global::Rocks.Argument<T> @value { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers1;
				#pragma warning restore CS8618
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IGenericsAndEvent, global::Rocks.IRaiseEvents
				{
					public Mock(global::IGenericsAndEventCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public int Work<T>(T @value)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers0)
							{
								if (@genericHandler is global::IGenericsAndEventCreateExpectations.Handler0<T> @handler)
								{
									if (@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@value!) : @handler.ReturnValue;
										@handler.RaiseEvents(this);
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public int ConstrainedWork<T>(T @value)
						where T : class, new()
					{
						if (this.Expectations.handlers1 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers1)
							{
								if (@genericHandler is global::IGenericsAndEventCreateExpectations.Handler1<T> @handler)
								{
									if (@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@value!) : @handler.ReturnValue;
										@handler.RaiseEvents(this);
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(1)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
					}
					
					#pragma warning disable CS0067
					public event global::System.EventHandler? MyEvent;
					#pragma warning restore CS0067
					
					void global::Rocks.IRaiseEvents.Raise(string @fieldName, object @args)
					{
						var @thisType = this.GetType();
						var @eventDelegate = (global::System.MulticastDelegate)thisType.GetField(@fieldName, 
							global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.NonPublic)!.GetValue(this)!;
						
						if (@eventDelegate is not null)
						{
							foreach (var @handler in @eventDelegate.GetInvocationList())
							{
								@handler.Method.Invoke(@handler.Target, new object[]{this, @args});
							}
						}
					}
					
					private global::IGenericsAndEventCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IGenericsAndEventCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::IGenericsAndEventCreateExpectations.Adornments.AdornmentsForHandler0<T> Work<T>(global::Rocks.Argument<T> @value)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@value);
						
						var @handler = new global::IGenericsAndEventCreateExpectations.Handler0<T>
						{
							@value = @value,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal global::IGenericsAndEventCreateExpectations.Adornments.AdornmentsForHandler1<T> ConstrainedWork<T>(global::Rocks.Argument<T> @value) where T : class, new()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@value);
						
						var @handler = new global::IGenericsAndEventCreateExpectations.Handler1<T>
						{
							@value = @value,
						};
						
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(@handler); }
						else { this.Expectations.handlers1.Add(@handler); }
						return new(@handler);
					}
					
					private global::IGenericsAndEventCreateExpectations Expectations { get; }
				}
				
				internal global::IGenericsAndEventCreateExpectations.MethodExpectations Methods { get; }
				
				internal IGenericsAndEventCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IGenericsAndEvent Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIGenericsAndEvent<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIGenericsAndEvent<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0<T>
						: global::Rocks.Adornments<AdornmentsForHandler0<T>, global::IGenericsAndEventCreateExpectations.Handler0<T>, global::System.Func<T, int>, int>, IAdornmentsForIGenericsAndEvent<AdornmentsForHandler0<T>>
					{ 
						public AdornmentsForHandler0(global::IGenericsAndEventCreateExpectations.Handler0<T> handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler1<T>
						: global::Rocks.Adornments<AdornmentsForHandler1<T>, global::IGenericsAndEventCreateExpectations.Handler1<T>, global::System.Func<T, int>, int>, IAdornmentsForIGenericsAndEvent<AdornmentsForHandler1<T>> where T : class, new()
					{ 
						public AdornmentsForHandler1(global::IGenericsAndEventCreateExpectations.Handler1<T> handler)
							: base(handler) { }				
					}
				}
			}
			
			internal static class IGenericsAndEventAdornmentsEventExtensions
			{
				internal static TAdornments RaiseMyEvent<TAdornments>(this TAdornments self, global::System.EventArgs args) where TAdornments : global::IGenericsAndEventCreateExpectations.Adornments.IAdornmentsForIGenericsAndEvent<TAdornments> => 
					self.AddRaiseEvent(new("MyEvent", args));
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "IGenericsAndEvent_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task GenerateCreateWithGenericAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockCreate<IService<int, string>>]

			#nullable enable

			public interface IService<T, TReturn>
			{
				TReturn Service(T data);
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			internal sealed class IServiceOfint_stringCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<int, string>, string>
				{
					public global::Rocks.Argument<int> @data { get; set; }
				}
				private global::Rocks.Handlers<global::IServiceOfint_stringCreateExpectations.Handler0>? @handlers0;
				#pragma warning restore CS8618
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IService<int, string>
				{
					public Mock(global::IServiceOfint_stringCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public string Service(int @data)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@data.IsValid(@data!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@data!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
					}
					
					private global::IServiceOfint_stringCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IServiceOfint_stringCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::IServiceOfint_stringCreateExpectations.Adornments.AdornmentsForHandler0 Service(global::Rocks.Argument<int> @data)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::IServiceOfint_stringCreateExpectations.Handler0
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::IServiceOfint_stringCreateExpectations Expectations { get; }
				}
				
				internal global::IServiceOfint_stringCreateExpectations.MethodExpectations Methods { get; }
				
				internal IServiceOfint_stringCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IService<int, string> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIServiceOfint_string<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIServiceOfint_string<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::IServiceOfint_stringCreateExpectations.Handler0, global::System.Func<int, string>, string>, IAdornmentsForIServiceOfint_string<AdornmentsForHandler0>
					{ 
						public AdornmentsForHandler0(global::IServiceOfint_stringCreateExpectations.Handler0 handler)
							: base(handler) { }				
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "IServiceint, string_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task GenerateWhenGenericParameterNameChangesAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockCreate<M<object>>]

			#nullable enable

			public abstract class Proxy<A>
			{
				public abstract Proxy<B> Bind<B>(Func<B> f);
			}      

			public class M<A>
				: Proxy<A>
			{
				public override Proxy<S> Bind<S>(Func<S> f) => new M<S>();
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			internal sealed class MOfobjectCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::MOfobjectCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::MOfobjectCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::MOfobjectCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler4<S>
					: global::Rocks.Handler<global::System.Func<global::System.Func<S>, global::Proxy<S>>, global::Proxy<S>>
				{
					public global::Rocks.Argument<global::System.Func<S>> @f { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers4;
				#pragma warning restore CS8618
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::M<object>
				{
					public Mock(global::MOfobjectCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(4)]
					public override global::Proxy<S> Bind<S>(global::System.Func<S> @f)
					{
						if (this.Expectations.handlers4 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers4)
							{
								if (@genericHandler is global::MOfobjectCreateExpectations.Handler4<S> @handler)
								{
									if (@handler.@f.IsValid(@f!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@f!) : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(4)}");
						}
						else
						{
							return base.Bind<S>(f: @f!);
						}
					}
					
					private global::MOfobjectCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::MOfobjectCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::MOfobjectCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::MOfobjectCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::MOfobjectCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::MOfobjectCreateExpectations.Handler1();
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::MOfobjectCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::MOfobjectCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal global::MOfobjectCreateExpectations.Adornments.AdornmentsForHandler4<S> Bind<S>(global::Rocks.Argument<global::System.Func<S>> @f)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@f);
						
						var @handler = new global::MOfobjectCreateExpectations.Handler4<S>
						{
							@f = @f,
						};
						
						if (this.Expectations.handlers4 is null ) { this.Expectations.handlers4 = new(@handler); }
						else { this.Expectations.handlers4.Add(@handler); }
						return new(@handler);
					}
					
					private global::MOfobjectCreateExpectations Expectations { get; }
				}
				
				internal global::MOfobjectCreateExpectations.MethodExpectations Methods { get; }
				
				internal MOfobjectCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::M<object> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForMOfobject<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForMOfobject<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::MOfobjectCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForMOfobject<AdornmentsForHandler0>
					{ 
						public AdornmentsForHandler0(global::MOfobjectCreateExpectations.Handler0 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::MOfobjectCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForMOfobject<AdornmentsForHandler1>
					{ 
						public AdornmentsForHandler1(global::MOfobjectCreateExpectations.Handler1 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::MOfobjectCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForMOfobject<AdornmentsForHandler2>
					{ 
						public AdornmentsForHandler2(global::MOfobjectCreateExpectations.Handler2 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler4<S>
						: global::Rocks.Adornments<AdornmentsForHandler4<S>, global::MOfobjectCreateExpectations.Handler4<S>, global::System.Func<global::System.Func<S>, global::Proxy<S>>, global::Proxy<S>>, IAdornmentsForMOfobject<AdornmentsForHandler4<S>>
					{ 
						public AdornmentsForHandler4(global::MOfobjectCreateExpectations.Handler4<S> handler)
							: base(handler) { }				
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "Mobject_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task GenerateWhenMemberHasOpenGenericsAndMultipleExpectationsAreSetAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<GenericContainer>]

			#nullable enable

			public class ReferenceTypeOne { }
			public class ReferenceTypeTwo { }

			public class ReferencedContainer<T> { }
			
			public class GenericContainer
			{
				public virtual ReferencedContainer<T> SetThings<T>() where T : class => new();
				public virtual TReturn Run<TReturn>() where TReturn : new() => new();
			}			
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			internal sealed class GenericContainerCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::GenericContainerCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::GenericContainerCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::GenericContainerCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3<T>
					: global::Rocks.Handler<global::System.Func<global::ReferencedContainer<T>>, global::ReferencedContainer<T>>
					where T : class
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers3;
				internal sealed class Handler4<TReturn>
					: global::Rocks.Handler<global::System.Func<TReturn>, TReturn>
					where TReturn : new()
				{ }
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers4;
				#pragma warning restore CS8618
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers4 is not null) { failures.AddRange(this.Verify(this.handlers4, 4)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::GenericContainer
				{
					public Mock(global::GenericContainerCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3)]
					public override global::ReferencedContainer<T> SetThings<T>()
						where T : class
					{
						if (this.Expectations.handlers3 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers3)
							{
								if (@genericHandler is global::GenericContainerCreateExpectations.Handler3<T> @handler)
								{
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback() : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(3)}");
						}
						else
						{
							return base.SetThings<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(4)]
					public override TReturn Run<TReturn>()
					{
						if (this.Expectations.handlers4 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers4)
							{
								if (@genericHandler is global::GenericContainerCreateExpectations.Handler4<TReturn> @handler)
								{
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback() : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(4)}");
						}
						else
						{
							return base.Run<TReturn>();
						}
					}
					
					private global::GenericContainerCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::GenericContainerCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::GenericContainerCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::GenericContainerCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::GenericContainerCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::GenericContainerCreateExpectations.Handler1();
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::GenericContainerCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::GenericContainerCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal global::GenericContainerCreateExpectations.Adornments.AdornmentsForHandler3<T> SetThings<T>() where T : class
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::GenericContainerCreateExpectations.Handler3<T>();
						if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(handler); }
						else { this.Expectations.handlers3.Add(handler); }
						return new(handler);
					}
					
					internal global::GenericContainerCreateExpectations.Adornments.AdornmentsForHandler4<TReturn> Run<TReturn>() where TReturn : new()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::GenericContainerCreateExpectations.Handler4<TReturn>();
						if (this.Expectations.handlers4 is null ) { this.Expectations.handlers4 = new(handler); }
						else { this.Expectations.handlers4.Add(handler); }
						return new(handler);
					}
					
					private global::GenericContainerCreateExpectations Expectations { get; }
				}
				
				internal global::GenericContainerCreateExpectations.MethodExpectations Methods { get; }
				
				internal GenericContainerCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::GenericContainer Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForGenericContainer<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForGenericContainer<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::GenericContainerCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForGenericContainer<AdornmentsForHandler0>
					{ 
						public AdornmentsForHandler0(global::GenericContainerCreateExpectations.Handler0 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::GenericContainerCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForGenericContainer<AdornmentsForHandler1>
					{ 
						public AdornmentsForHandler1(global::GenericContainerCreateExpectations.Handler1 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::GenericContainerCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForGenericContainer<AdornmentsForHandler2>
					{ 
						public AdornmentsForHandler2(global::GenericContainerCreateExpectations.Handler2 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler3<T>
						: global::Rocks.Adornments<AdornmentsForHandler3<T>, global::GenericContainerCreateExpectations.Handler3<T>, global::System.Func<global::ReferencedContainer<T>>, global::ReferencedContainer<T>>, IAdornmentsForGenericContainer<AdornmentsForHandler3<T>> where T : class
					{ 
						public AdornmentsForHandler3(global::GenericContainerCreateExpectations.Handler3<T> handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler4<TReturn>
						: global::Rocks.Adornments<AdornmentsForHandler4<TReturn>, global::GenericContainerCreateExpectations.Handler4<TReturn>, global::System.Func<TReturn>, TReturn>, IAdornmentsForGenericContainer<AdornmentsForHandler4<TReturn>> where TReturn : new()
					{ 
						public AdornmentsForHandler4(global::GenericContainerCreateExpectations.Handler4<TReturn> handler)
							: base(handler) { }				
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "GenericContainer_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task GenerateWhenEqualsIsDuplicatedAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<Criterion<object>>]

			#nullable enable

			public class Criterion<T> : IEquatable<T>
			{
				public override int GetHashCode() => base.GetHashCode();
				public override bool Equals(object? obj) => base.Equals(obj);
				public bool Equals(T? other) => true;
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			internal sealed class CriterionOfobjectCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::CriterionOfobjectCreateExpectations.Handler2>? @handlers2;
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::CriterionOfobjectCreateExpectations.Handler3>? @handlers3;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::Criterion<object>
				{
					public Mock(global::CriterionOfobjectCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers3 is not null)
						{
							var @handler = this.Expectations.handlers3.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					private global::CriterionOfobjectCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::CriterionOfobjectCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal new global::CriterionOfobjectCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::CriterionOfobjectCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					internal new global::CriterionOfobjectCreateExpectations.Adornments.AdornmentsForHandler3 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::CriterionOfobjectCreateExpectations.Handler3();
						if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(handler); }
						else { this.Expectations.handlers3.Add(handler); }
						return new(handler);
					}
					
					private global::CriterionOfobjectCreateExpectations Expectations { get; }
				}
				
				internal global::CriterionOfobjectCreateExpectations.MethodExpectations Methods { get; }
				
				internal CriterionOfobjectCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::Criterion<object> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForCriterionOfobject<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForCriterionOfobject<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::CriterionOfobjectCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForCriterionOfobject<AdornmentsForHandler2>
					{ 
						public AdornmentsForHandler2(global::CriterionOfobjectCreateExpectations.Handler2 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler3
						: global::Rocks.Adornments<AdornmentsForHandler3, global::CriterionOfobjectCreateExpectations.Handler3, global::System.Func<int>, int>, IAdornmentsForCriterionOfobject<AdornmentsForHandler3>
					{ 
						public AdornmentsForHandler3(global::CriterionOfobjectCreateExpectations.Handler3 handler)
							: base(handler) { }				
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "Criterionobject_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task GenerateWhenClosedGenericOnClassCreatesExactMethodMatchAsync()
	{
		var code =
			"""
			using Rocks;

			[assembly: RockCreate<GeometryValueComparer<object>>]

			#nullable enable

			public abstract class ValueComparer
			{
				public abstract object? Snapshot(object? instance);
			}

			public class ValueComparer<T>
				: ValueComparer
			{
				public override object? Snapshot(object? instance) => null;

				public virtual T Snapshot(T instance) => default!;
			}

			public class GeometryValueComparer<TGeometry>
				: ValueComparer<TGeometry> { }
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			internal sealed class GeometryValueComparerOfobjectCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				private global::Rocks.Handlers<global::GeometryValueComparerOfobjectCreateExpectations.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				private global::Rocks.Handlers<global::GeometryValueComparerOfobjectCreateExpectations.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				private global::Rocks.Handlers<global::GeometryValueComparerOfobjectCreateExpectations.Handler2>? @handlers2;
				#pragma warning restore CS8618
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::GeometryValueComparer<object>
				{
					public Mock(global::GeometryValueComparerOfobjectCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1 is not null)
						{
							var @handler = this.Expectations.handlers1.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2)]
					public override string? ToString()
					{
						if (this.Expectations.handlers2 is not null)
						{
							var @handler = this.Expectations.handlers2.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					private global::GeometryValueComparerOfobjectCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::GeometryValueComparerOfobjectCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::GeometryValueComparerOfobjectCreateExpectations.Adornments.AdornmentsForHandler0 Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var @handler = new global::GeometryValueComparerOfobjectCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal new global::GeometryValueComparerOfobjectCreateExpectations.Adornments.AdornmentsForHandler1 GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::GeometryValueComparerOfobjectCreateExpectations.Handler1();
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(handler); }
						else { this.Expectations.handlers1.Add(handler); }
						return new(handler);
					}
					
					internal new global::GeometryValueComparerOfobjectCreateExpectations.Adornments.AdornmentsForHandler2 ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::GeometryValueComparerOfobjectCreateExpectations.Handler2();
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(handler); }
						else { this.Expectations.handlers2.Add(handler); }
						return new(handler);
					}
					
					private global::GeometryValueComparerOfobjectCreateExpectations Expectations { get; }
				}
				
				internal global::GeometryValueComparerOfobjectCreateExpectations.MethodExpectations Methods { get; }
				
				internal GeometryValueComparerOfobjectCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::GeometryValueComparer<object> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForGeometryValueComparerOfobject<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForGeometryValueComparerOfobject<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::GeometryValueComparerOfobjectCreateExpectations.Handler0, global::System.Func<object?, bool>, bool>, IAdornmentsForGeometryValueComparerOfobject<AdornmentsForHandler0>
					{ 
						public AdornmentsForHandler0(global::GeometryValueComparerOfobjectCreateExpectations.Handler0 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::GeometryValueComparerOfobjectCreateExpectations.Handler1, global::System.Func<int>, int>, IAdornmentsForGeometryValueComparerOfobject<AdornmentsForHandler1>
					{ 
						public AdornmentsForHandler1(global::GeometryValueComparerOfobjectCreateExpectations.Handler1 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::GeometryValueComparerOfobjectCreateExpectations.Handler2, global::System.Func<string?>, string?>, IAdornmentsForGeometryValueComparerOfobject<AdornmentsForHandler2>
					{ 
						public AdornmentsForHandler2(global::GeometryValueComparerOfobjectCreateExpectations.Handler2 handler)
							: base(handler) { }				
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "GeometryValueComparerobject_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task GenerateWhenClosedGenericOnInterfaceCreatesExactMethodMatchAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			using System.Threading.Tasks;
			
			[assembly: RockCreate<MockTests.IRequestClient<object>>]

			namespace MockTests
			{
				public interface RequestHandle<T>
					 where T : class { }

				public interface IRequestClient<TRequest>
					 where TRequest : class
				{
					 RequestHandle<TRequest> Create(TRequest message);

					 RequestHandle<TRequest> Create(object values);			
				}			
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			namespace MockTests
			{
				internal sealed class IRequestClientOfobjectCreateExpectations
					: global::Rocks.Expectations
				{
					#pragma warning disable CS8618
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Func<object, global::MockTests.RequestHandle<object>>, global::MockTests.RequestHandle<object>>
					{
						public global::Rocks.Argument<object> @message { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.IRequestClientOfobjectCreateExpectations.Handler0>? @handlers0;
					#pragma warning restore CS8618
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.IRequestClient<object>
					{
						public Mock(global::MockTests.IRequestClientOfobjectCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0)]
						public global::MockTests.RequestHandle<object> Create(object @message)
						{
							if (this.Expectations.handlers0 is not null)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@message.IsValid(@message!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@message!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
						}
						
						private global::MockTests.IRequestClientOfobjectCreateExpectations Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.IRequestClientOfobjectCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::MockTests.IRequestClientOfobjectCreateExpectations.Adornments.AdornmentsForHandler0 Create(global::Rocks.Argument<object> @message)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@message);
							
							var @handler = new global::MockTests.IRequestClientOfobjectCreateExpectations.Handler0
							{
								@message = @message,
							};
							
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						
						private global::MockTests.IRequestClientOfobjectCreateExpectations Expectations { get; }
					}
					
					internal global::MockTests.IRequestClientOfobjectCreateExpectations.MethodExpectations Methods { get; }
					
					internal IRequestClientOfobjectCreateExpectations() =>
						(this.Methods) = (new(this));
					
					internal global::MockTests.IRequestClient<object> Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForIRequestClientOfobject<TAdornments>
							: global::Rocks.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForIRequestClientOfobject<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::Rocks.Adornments<AdornmentsForHandler0, global::MockTests.IRequestClientOfobjectCreateExpectations.Handler0, global::System.Func<object, global::MockTests.RequestHandle<object>>, global::MockTests.RequestHandle<object>>, IAdornmentsForIRequestClientOfobject<AdornmentsForHandler0>
						{ 
							public AdornmentsForHandler0(global::MockTests.IRequestClientOfobjectCreateExpectations.Handler0 handler)
								: base(handler) { }				
						}
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "MockTests.IRequestClientobject_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task GenerateWhenClosedGenericCreatesMethodMatchDifferByReturnTypeAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			using System.Threading.Tasks;
			
			[assembly: RockCreate<MockTests.IRequest<object>>]

			namespace MockTests
			{
				public interface IRequest<T>
					where T : class
				{
					Task<T> Send(Guid requestId, object values);
					Task Send(Guid requestId, T message);
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			namespace MockTests
			{
				internal sealed class IRequestOfobjectCreateExpectations
					: global::Rocks.Expectations
				{
					#pragma warning disable CS8618
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Func<global::System.Guid, object, global::System.Threading.Tasks.Task<object>>, global::System.Threading.Tasks.Task<object>>
					{
						public global::Rocks.Argument<global::System.Guid> @requestId { get; set; }
						public global::Rocks.Argument<object> @values { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.IRequestOfobjectCreateExpectations.Handler0>? @handlers0;
					internal sealed class Handler1
						: global::Rocks.Handler<global::System.Func<global::System.Guid, object, global::System.Threading.Tasks.Task>, global::System.Threading.Tasks.Task>
					{
						public global::Rocks.Argument<global::System.Guid> @requestId { get; set; }
						public global::Rocks.Argument<object> @message { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.IRequestOfobjectCreateExpectations.Handler1>? @handlers1;
					#pragma warning restore CS8618
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
							if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.IRequest<object>
					{
						public Mock(global::MockTests.IRequestOfobjectCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0)]
						public global::System.Threading.Tasks.Task<object> Send(global::System.Guid @requestId, object @values)
						{
							if (this.Expectations.handlers0 is not null)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@requestId.IsValid(@requestId!) &&
										@handler.@values.IsValid(@values!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@requestId!, @values!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
						}
						
						[global::Rocks.MemberIdentifier(1)]
						global::System.Threading.Tasks.Task global::MockTests.IRequest<object>.Send(global::System.Guid @requestId, object @message)
						{
							if (this.Expectations.handlers1 is not null)
							{
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.@requestId.IsValid(@requestId!) &&
										@handler.@message.IsValid(@message!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@requestId!, @message!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(1)}");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
						}
						
						private global::MockTests.IRequestOfobjectCreateExpectations Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.IRequestOfobjectCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::MockTests.IRequestOfobjectCreateExpectations.Adornments.AdornmentsForHandler0 Send(global::Rocks.Argument<global::System.Guid> @requestId, global::Rocks.Argument<object> @values)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@requestId);
							global::System.ArgumentNullException.ThrowIfNull(@values);
							
							var @handler = new global::MockTests.IRequestOfobjectCreateExpectations.Handler0
							{
								@requestId = @requestId,
								@values = @values,
							};
							
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						
						private global::MockTests.IRequestOfobjectCreateExpectations Expectations { get; }
					}
					internal sealed class ExplicitMethodExpectationsForIRequestOfobject
					{
						internal ExplicitMethodExpectationsForIRequestOfobject(global::MockTests.IRequestOfobjectCreateExpectations expectations) =>
							this.Expectations = expectations;
					
						internal global::MockTests.IRequestOfobjectCreateExpectations.Adornments.AdornmentsForHandler1 Send(global::Rocks.Argument<global::System.Guid> @requestId, global::Rocks.Argument<object> @message)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@requestId);
							global::System.ArgumentNullException.ThrowIfNull(@message);
							
							var @handler = new global::MockTests.IRequestOfobjectCreateExpectations.Handler1
							{
								@requestId = @requestId,
								@message = @message,
							};
							
							if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(@handler); }
							else { this.Expectations.handlers1.Add(@handler); }
							return new(@handler);
						}
						
						private global::MockTests.IRequestOfobjectCreateExpectations Expectations { get; }
					}
					
					internal global::MockTests.IRequestOfobjectCreateExpectations.MethodExpectations Methods { get; }
					internal global::MockTests.IRequestOfobjectCreateExpectations.ExplicitMethodExpectationsForIRequestOfobject ExplicitMethodsForIRequestOfobject { get; }
					
					internal IRequestOfobjectCreateExpectations() =>
						(this.Methods, this.ExplicitMethodsForIRequestOfobject) = (new(this), new(this));
					
					internal global::MockTests.IRequest<object> Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForIRequestOfobject<TAdornments>
							: global::Rocks.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForIRequestOfobject<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::Rocks.Adornments<AdornmentsForHandler0, global::MockTests.IRequestOfobjectCreateExpectations.Handler0, global::System.Func<global::System.Guid, object, global::System.Threading.Tasks.Task<object>>, global::System.Threading.Tasks.Task<object>>, IAdornmentsForIRequestOfobject<AdornmentsForHandler0>
						{ 
							public AdornmentsForHandler0(global::MockTests.IRequestOfobjectCreateExpectations.Handler0 handler)
								: base(handler) { }				
						}
						public sealed class AdornmentsForHandler1
							: global::Rocks.Adornments<AdornmentsForHandler1, global::MockTests.IRequestOfobjectCreateExpectations.Handler1, global::System.Func<global::System.Guid, object, global::System.Threading.Tasks.Task>, global::System.Threading.Tasks.Task>, IAdornmentsForIRequestOfobject<AdornmentsForHandler1>
						{ 
							public AdornmentsForHandler1(global::MockTests.IRequestOfobjectCreateExpectations.Handler1 handler)
								: base(handler) { }				
						}
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "MockTests.IRequestobject_Rock_Create.g.cs", generatedCode)],
			[]);
	}
}