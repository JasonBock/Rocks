using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class GenericsGeneratorTests
{
	[Test]
	public static async Task GenerateCreateWithGenericAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockCreate<IService<int, string>>]

			#nullable enable

			public interface IService<T, TReturn>
			{
				TReturn Service(T data);
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal sealed class IServiceOfint_stringCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<int, string>, string>
				{
					public global::Rocks.Argument<int> @data { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private readonly global::System.Collections.Generic.List<global::IServiceOfint_stringCreateExpectations.Handler0> @handlers0 = new();
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						failures.AddRange(this.Verify(handlers0));
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class RockIServiceOfint_string
					: global::IService<int, string>
				{
					public RockIServiceOfint_string(global::IServiceOfint_stringCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "string Service(int @data)")]
					public string Service(int @data)
					{
						if (this.Expectations.handlers0.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@data.IsValid(@data!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@data!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for string Service(int @data)");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for string Service(int @data)");
					}
					
					private global::IServiceOfint_stringCreateExpectations Expectations { get; }
				}
				
				internal sealed class IServiceOfint_stringMethodExpectations
				{
					internal IServiceOfint_stringMethodExpectations(global::IServiceOfint_stringCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::IServiceOfint_stringCreateExpectations.Handler0, global::System.Func<int, string>, string> Service(global::Rocks.Argument<int> @data)
					{
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var handler = new global::IServiceOfint_stringCreateExpectations.Handler0
						{
							@data = @data,
						};
						
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					private global::IServiceOfint_stringCreateExpectations Expectations { get; }
				}
				
				internal global::IServiceOfint_stringCreateExpectations.IServiceOfint_stringMethodExpectations Methods { get; }
				
				internal IServiceOfint_stringCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IService<int, string> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new RockIServiceOfint_string(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IServiceint, string_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWhenGenericParameterNameChangesAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockCreate<M<object>>]

			#nullable enable

			public abstract class Proxy<A>
			{
				public abstract Proxy<B> Bind<B>(Func<B> f);
			}      

			public class M<A>
				: Proxy<A>
			{
				public override Proxy<S> Bind<S>(Func<S> f) => new M<S>();
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal sealed class MOfobjectCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler4<S>
					: global::Rocks.Handler<global::System.Func<global::System.Func<S>, global::Proxy<S>>, global::Proxy<S>>
				{
					public global::Rocks.Argument<global::System.Func<S>> @f { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private readonly global::System.Collections.Generic.List<global::MOfobjectCreateExpectations.Handler0> @handlers0 = new();
				private readonly global::System.Collections.Generic.List<global::MOfobjectCreateExpectations.Handler1> @handlers1 = new();
				private readonly global::System.Collections.Generic.List<global::MOfobjectCreateExpectations.Handler2> @handlers2 = new();
				private readonly global::System.Collections.Generic.List<global::Rocks.Handler> @handlers4 = new();
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						failures.AddRange(this.Verify(handlers0));
						failures.AddRange(this.Verify(handlers1));
						failures.AddRange(this.Verify(handlers2));
						failures.AddRange(this.Verify(handlers4));
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class RockMOfobject
					: global::M<object>
				{
					public RockMOfobject(global::MOfobjectCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(4, "global::Proxy<S> Bind<S>(global::System.Func<S> @f)")]
					public override global::Proxy<S> Bind<S>(global::System.Func<S> @f)
					{
						if (this.Expectations.handlers4.Count > 0)
						{
							foreach (var @genericHandler in this.Expectations.handlers4)
							{
								if (@genericHandler is global::MOfobjectCreateExpectations.Handler4<S> @handler)
								{
									if (@handler.@f.IsValid(@f!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@f!) : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for global::Proxy<S> Bind<S>(global::System.Func<S> @f)");
						}
						else
						{
							return base.Bind<S>(f: @f!);
						}
					}
					
					private global::MOfobjectCreateExpectations Expectations { get; }
				}
				
				internal sealed class MOfobjectMethodExpectations
				{
					internal MOfobjectMethodExpectations(global::MOfobjectCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::MOfobjectCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::MOfobjectCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::MOfobjectCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						var handler = new global::MOfobjectCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::MOfobjectCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						var handler = new global::MOfobjectCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::MOfobjectCreateExpectations.Handler4<S>, global::System.Func<global::System.Func<S>, global::Proxy<S>>, global::Proxy<S>> Bind<S>(global::Rocks.Argument<global::System.Func<S>> @f)
					{
						global::System.ArgumentNullException.ThrowIfNull(@f);
						
						var handler = new global::MOfobjectCreateExpectations.Handler4<S>
						{
							@f = @f,
						};
						
						this.Expectations.handlers4.Add(handler);
						return new(handler);
					}
					
					private global::MOfobjectCreateExpectations Expectations { get; }
				}
				
				internal global::MOfobjectCreateExpectations.MOfobjectMethodExpectations Methods { get; }
				
				internal MOfobjectCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::M<object> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new RockMOfobject(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "Mobject_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWhenMemberHasOpenGenericsAndMultipleExpectationsAreSetAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<GenericContainer>]

			#nullable enable

			public class ReferenceTypeOne { }
			public class ReferenceTypeTwo { }

			public class ReferencedContainer<T> { }
			
			public class GenericContainer
			{
				public virtual ReferencedContainer<T> SetThings<T>() where T : class => new();
				public virtual TReturn Run<TReturn>() where TReturn : new() => new();
			}			
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal sealed class GenericContainerCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler3<T>
					: global::Rocks.Handler<global::System.Func<global::ReferencedContainer<T>>, global::ReferencedContainer<T>>
					where T : class
				{ }
				
				internal sealed class Handler4<TReturn>
					: global::Rocks.Handler<global::System.Func<TReturn>, TReturn>
					where TReturn : new()
				{ }
				
				#pragma warning restore CS8618
				
				private readonly global::System.Collections.Generic.List<global::GenericContainerCreateExpectations.Handler0> @handlers0 = new();
				private readonly global::System.Collections.Generic.List<global::GenericContainerCreateExpectations.Handler1> @handlers1 = new();
				private readonly global::System.Collections.Generic.List<global::GenericContainerCreateExpectations.Handler2> @handlers2 = new();
				private readonly global::System.Collections.Generic.List<global::Rocks.Handler> @handlers3 = new();
				private readonly global::System.Collections.Generic.List<global::Rocks.Handler> @handlers4 = new();
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						failures.AddRange(this.Verify(handlers0));
						failures.AddRange(this.Verify(handlers1));
						failures.AddRange(this.Verify(handlers2));
						failures.AddRange(this.Verify(handlers3));
						failures.AddRange(this.Verify(handlers4));
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class RockGenericContainer
					: global::GenericContainer
				{
					public RockGenericContainer(global::GenericContainerCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "global::ReferencedContainer<T> SetThings<T>()")]
					public override global::ReferencedContainer<T> SetThings<T>()
						where T : class
					{
						if (this.Expectations.handlers3.Count > 0)
						{
							foreach (var @genericHandler in this.Expectations.handlers3)
							{
								if (@genericHandler is global::GenericContainerCreateExpectations.Handler3<T> @handler)
								{
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback() : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for global::ReferencedContainer<T> SetThings<T>()");
						}
						else
						{
							return base.SetThings<T>();
						}
					}
					
					[global::Rocks.MemberIdentifier(4, "TReturn Run<TReturn>()")]
					public override TReturn Run<TReturn>()
					{
						if (this.Expectations.handlers4.Count > 0)
						{
							foreach (var @genericHandler in this.Expectations.handlers4)
							{
								if (@genericHandler is global::GenericContainerCreateExpectations.Handler4<TReturn> @handler)
								{
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback() : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for TReturn Run<TReturn>()");
						}
						else
						{
							return base.Run<TReturn>();
						}
					}
					
					private global::GenericContainerCreateExpectations Expectations { get; }
				}
				
				internal sealed class GenericContainerMethodExpectations
				{
					internal GenericContainerMethodExpectations(global::GenericContainerCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::GenericContainerCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::GenericContainerCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::GenericContainerCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						var handler = new global::GenericContainerCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::GenericContainerCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						var handler = new global::GenericContainerCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::GenericContainerCreateExpectations.Handler3<T>, global::System.Func<global::ReferencedContainer<T>>, global::ReferencedContainer<T>> SetThings<T>() where T : class
					{
						var handler = new global::GenericContainerCreateExpectations.Handler3<T>();
						this.Expectations.handlers3.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.Adornments<global::GenericContainerCreateExpectations.Handler4<TReturn>, global::System.Func<TReturn>, TReturn> Run<TReturn>() where TReturn : new()
					{
						var handler = new global::GenericContainerCreateExpectations.Handler4<TReturn>();
						this.Expectations.handlers4.Add(handler);
						return new(handler);
					}
					
					private global::GenericContainerCreateExpectations Expectations { get; }
				}
				
				internal global::GenericContainerCreateExpectations.GenericContainerMethodExpectations Methods { get; }
				
				internal GenericContainerCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::GenericContainer Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new RockGenericContainer(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "GenericContainer_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWhenEqualsIsDuplicatedAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<Criterion<object>>]

			#nullable enable

			public class Criterion<T> : IEquatable<T>
			{
				public override int GetHashCode() => base.GetHashCode();
				public override bool Equals(object? obj) => base.Equals(obj);
				public bool Equals(T? other) => true;
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal sealed class CriterionOfobjectCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				private readonly global::System.Collections.Generic.List<global::CriterionOfobjectCreateExpectations.Handler2> @handlers2 = new();
				private readonly global::System.Collections.Generic.List<global::CriterionOfobjectCreateExpectations.Handler3> @handlers3 = new();
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						failures.AddRange(this.Verify(handlers2));
						failures.AddRange(this.Verify(handlers3));
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class RockCriterionOfobject
					: global::Criterion<object>
				{
					public RockCriterionOfobject(global::CriterionOfobjectCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers3.Count > 0)
						{
							var @handler = this.Expectations.handlers3[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					private global::CriterionOfobjectCreateExpectations Expectations { get; }
				}
				
				internal sealed class CriterionOfobjectMethodExpectations
				{
					internal CriterionOfobjectMethodExpectations(global::CriterionOfobjectCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal new global::Rocks.Adornments<global::CriterionOfobjectCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						var handler = new global::CriterionOfobjectCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::CriterionOfobjectCreateExpectations.Handler3, global::System.Func<int>, int> GetHashCode()
					{
						var handler = new global::CriterionOfobjectCreateExpectations.Handler3();
						this.Expectations.handlers3.Add(handler);
						return new(handler);
					}
					
					private global::CriterionOfobjectCreateExpectations Expectations { get; }
				}
				
				internal global::CriterionOfobjectCreateExpectations.CriterionOfobjectMethodExpectations Methods { get; }
				
				internal CriterionOfobjectCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::Criterion<object> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new RockCriterionOfobject(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "Criterionobject_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWhenClosedGenericOnClassCreatesExactMethodMatchAsync()
	{
		var code =
			"""
			using Rocks;

			[assembly: RockCreate<GeometryValueComparer<object>>]

			#nullable enable

			public abstract class ValueComparer
			{
				public abstract object? Snapshot(object? instance);
			}

			public class ValueComparer<T>
				: ValueComparer
			{
				public override object? Snapshot(object? instance) => null;

				public virtual T Snapshot(T instance) => default!;
			}

			public class GeometryValueComparer<TGeometry>
				: ValueComparer<TGeometry> { }
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal sealed class GeometryValueComparerOfobjectCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				#pragma warning restore CS8618
				
				private readonly global::System.Collections.Generic.List<global::GeometryValueComparerOfobjectCreateExpectations.Handler0> @handlers0 = new();
				private readonly global::System.Collections.Generic.List<global::GeometryValueComparerOfobjectCreateExpectations.Handler1> @handlers1 = new();
				private readonly global::System.Collections.Generic.List<global::GeometryValueComparerOfobjectCreateExpectations.Handler2> @handlers2 = new();
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						failures.AddRange(this.Verify(handlers0));
						failures.AddRange(this.Verify(handlers1));
						failures.AddRange(this.Verify(handlers2));
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class RockGeometryValueComparerOfobject
					: global::GeometryValueComparer<object>
				{
					public RockGeometryValueComparerOfobject(global::GeometryValueComparerOfobjectCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					private global::GeometryValueComparerOfobjectCreateExpectations Expectations { get; }
				}
				
				internal sealed class GeometryValueComparerOfobjectMethodExpectations
				{
					internal GeometryValueComparerOfobjectMethodExpectations(global::GeometryValueComparerOfobjectCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::GeometryValueComparerOfobjectCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::GeometryValueComparerOfobjectCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::GeometryValueComparerOfobjectCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						var handler = new global::GeometryValueComparerOfobjectCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::GeometryValueComparerOfobjectCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						var handler = new global::GeometryValueComparerOfobjectCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					private global::GeometryValueComparerOfobjectCreateExpectations Expectations { get; }
				}
				
				internal global::GeometryValueComparerOfobjectCreateExpectations.GeometryValueComparerOfobjectMethodExpectations Methods { get; }
				
				internal GeometryValueComparerOfobjectCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::GeometryValueComparer<object> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new RockGeometryValueComparerOfobject(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "GeometryValueComparerobject_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWhenClosedGenericOnInterfaceCreatesExactMethodMatchAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			using System.Threading.Tasks;
			
			[assembly: RockCreate<MockTests.IRequestClient<object>>]

			namespace MockTests
			{
				public interface RequestHandle<T>
					 where T : class { }

				public interface IRequestClient<TRequest>
					 where TRequest : class
				{
					 RequestHandle<TRequest> Create(TRequest message);

					 RequestHandle<TRequest> Create(object values);			
				}			
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			namespace MockTests
			{
				internal sealed class IRequestClientOfobjectCreateExpectations
					: global::Rocks.Expectations
				{
					#pragma warning disable CS8618
					
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Func<object, global::MockTests.RequestHandle<object>>, global::MockTests.RequestHandle<object>>
					{
						public global::Rocks.Argument<object> @message { get; set; }
					}
					
					#pragma warning restore CS8618
					
					private readonly global::System.Collections.Generic.List<global::MockTests.IRequestClientOfobjectCreateExpectations.Handler0> @handlers0 = new();
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							failures.AddRange(this.Verify(handlers0));
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class RockIRequestClientOfobject
						: global::MockTests.IRequestClient<object>
					{
						public RockIRequestClientOfobject(global::MockTests.IRequestClientOfobjectCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0, "global::MockTests.RequestHandle<object> Create(object @message)")]
						public global::MockTests.RequestHandle<object> Create(object @message)
						{
							if (this.Expectations.handlers0.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@message.IsValid(@message!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@message!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for global::MockTests.RequestHandle<object> Create(object @message)");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::MockTests.RequestHandle<object> Create(object @message)");
						}
						
						private global::MockTests.IRequestClientOfobjectCreateExpectations Expectations { get; }
					}
					
					internal sealed class IRequestClientOfobjectMethodExpectations
					{
						internal IRequestClientOfobjectMethodExpectations(global::MockTests.IRequestClientOfobjectCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::MockTests.IRequestClientOfobjectCreateExpectations.Handler0, global::System.Func<object, global::MockTests.RequestHandle<object>>, global::MockTests.RequestHandle<object>> Create(global::Rocks.Argument<object> @message)
						{
							global::System.ArgumentNullException.ThrowIfNull(@message);
							
							var handler = new global::MockTests.IRequestClientOfobjectCreateExpectations.Handler0
							{
								@message = @message,
							};
							
							this.Expectations.handlers0.Add(handler);
							return new(handler);
						}
						
						private global::MockTests.IRequestClientOfobjectCreateExpectations Expectations { get; }
					}
					
					internal global::MockTests.IRequestClientOfobjectCreateExpectations.IRequestClientOfobjectMethodExpectations Methods { get; }
					
					internal IRequestClientOfobjectCreateExpectations() =>
						(this.Methods) = (new(this));
					
					internal global::MockTests.IRequestClient<object> Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new RockIRequestClientOfobject(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MockTests.IRequestClientobject_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWhenClosedGenericCreatesMethodMatchDifferByReturnTypeAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			using System.Threading.Tasks;
			
			[assembly: RockCreate<MockTests.IRequest<object>>]

			namespace MockTests
			{
				public interface IRequest<T>
					where T : class
				{
					Task<T> Send(Guid requestId, object values);
					Task Send(Guid requestId, T message);
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			namespace MockTests
			{
				internal sealed class IRequestOfobjectCreateExpectations
					: global::Rocks.Expectations
				{
					#pragma warning disable CS8618
					
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Func<global::System.Guid, object, global::System.Threading.Tasks.Task<object>>, global::System.Threading.Tasks.Task<object>>
					{
						public global::Rocks.Argument<global::System.Guid> @requestId { get; set; }
						public global::Rocks.Argument<object> @values { get; set; }
					}
					
					internal sealed class Handler1
						: global::Rocks.Handler<global::System.Func<global::System.Guid, object, global::System.Threading.Tasks.Task>, global::System.Threading.Tasks.Task>
					{
						public global::Rocks.Argument<global::System.Guid> @requestId { get; set; }
						public global::Rocks.Argument<object> @message { get; set; }
					}
					
					#pragma warning restore CS8618
					
					private readonly global::System.Collections.Generic.List<global::MockTests.IRequestOfobjectCreateExpectations.Handler0> @handlers0 = new();
					private readonly global::System.Collections.Generic.List<global::MockTests.IRequestOfobjectCreateExpectations.Handler1> @handlers1 = new();
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							failures.AddRange(this.Verify(handlers0));
							failures.AddRange(this.Verify(handlers1));
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class RockIRequestOfobject
						: global::MockTests.IRequest<object>
					{
						public RockIRequestOfobject(global::MockTests.IRequestOfobjectCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0, "global::System.Threading.Tasks.Task<object> Send(global::System.Guid @requestId, object @values)")]
						public global::System.Threading.Tasks.Task<object> Send(global::System.Guid @requestId, object @values)
						{
							if (this.Expectations.handlers0.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@requestId.IsValid(@requestId!) &&
										@handler.@values.IsValid(@values!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@requestId!, @values!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for global::System.Threading.Tasks.Task<object> Send(global::System.Guid @requestId, object @values)");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::System.Threading.Tasks.Task<object> Send(global::System.Guid @requestId, object @values)");
						}
						
						[global::Rocks.MemberIdentifier(1, "global::System.Threading.Tasks.Task global::MockTests.IRequest<object>.Send(global::System.Guid @requestId, object @message)")]
						global::System.Threading.Tasks.Task global::MockTests.IRequest<object>.Send(global::System.Guid @requestId, object @message)
						{
							if (this.Expectations.handlers1.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.@requestId.IsValid(@requestId!) &&
										@handler.@message.IsValid(@message!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@requestId!, @message!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for global::System.Threading.Tasks.Task global::MockTests.IRequest<object>.Send(global::System.Guid @requestId, object @message)");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::System.Threading.Tasks.Task global::MockTests.IRequest<object>.Send(global::System.Guid @requestId, object @message)");
						}
						
						private global::MockTests.IRequestOfobjectCreateExpectations Expectations { get; }
					}
					
					internal sealed class IRequestOfobjectMethodExpectations
					{
						internal IRequestOfobjectMethodExpectations(global::MockTests.IRequestOfobjectCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::MockTests.IRequestOfobjectCreateExpectations.Handler0, global::System.Func<global::System.Guid, object, global::System.Threading.Tasks.Task<object>>, global::System.Threading.Tasks.Task<object>> Send(global::Rocks.Argument<global::System.Guid> @requestId, global::Rocks.Argument<object> @values)
						{
							global::System.ArgumentNullException.ThrowIfNull(@requestId);
							global::System.ArgumentNullException.ThrowIfNull(@values);
							
							var handler = new global::MockTests.IRequestOfobjectCreateExpectations.Handler0
							{
								@requestId = @requestId,
								@values = @values,
							};
							
							this.Expectations.handlers0.Add(handler);
							return new(handler);
						}
						
						private global::MockTests.IRequestOfobjectCreateExpectations Expectations { get; }
					}
					internal sealed class IRequestOfobjectExplicitMethodExpectationsForIRequestOfobject
					{
						internal IRequestOfobjectExplicitMethodExpectationsForIRequestOfobject(global::MockTests.IRequestOfobjectCreateExpectations expectations) =>
							this.Expectations = expectations;
					
						internal global::Rocks.Adornments<global::MockTests.IRequestOfobjectCreateExpectations.Handler1, global::System.Func<global::System.Guid, object, global::System.Threading.Tasks.Task>, global::System.Threading.Tasks.Task> Send(global::Rocks.Argument<global::System.Guid> @requestId, global::Rocks.Argument<object> @message)
						{
							global::System.ArgumentNullException.ThrowIfNull(@requestId);
							global::System.ArgumentNullException.ThrowIfNull(@message);
							
							var handler = new global::MockTests.IRequestOfobjectCreateExpectations.Handler1
							{
								@requestId = @requestId,
								@message = @message,
							};
							
							this.Expectations.handlers1.Add(handler);
							return new(handler);
						}
						
						private global::MockTests.IRequestOfobjectCreateExpectations Expectations { get; }
					}
					
					internal global::MockTests.IRequestOfobjectCreateExpectations.IRequestOfobjectMethodExpectations Methods { get; }
					internal global::MockTests.IRequestOfobjectCreateExpectations.IRequestOfobjectExplicitMethodExpectationsForIRequestOfobject ExplicitMethodsForIRequestOfobject { get; }
					
					internal IRequestOfobjectCreateExpectations() =>
						(this.Methods, this.ExplicitMethodsForIRequestOfobject) = (new(this), new(this));
					
					internal global::MockTests.IRequest<object> Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new RockIRequestOfobject(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MockTests.IRequestobject_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}
}