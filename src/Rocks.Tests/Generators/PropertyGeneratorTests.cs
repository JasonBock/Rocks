using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class PropertyGeneratorTests
{
	[Test]
	public static async Task CreateWithNewDefinitionAsync()
	{
		var code =
			"""
			using Rocks;

			[assembly: RockCreate<IMessagePublishTopologyConfigurator>]

			public interface IMessagePublishTopology
			{
				bool Exclude { get; }
			}

			public interface IMessagePublishTopologyConfigurator :
				IMessagePublishTopology
			{
				new bool Exclude { set; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class IMessagePublishTopologyConfiguratorCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Action<bool>>
				{
					public global::Rocks.Argument<bool> @value { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<bool>, bool>
				{ }
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler1>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IMessagePublishTopologyConfigurator
				{
					public Mock(global::IMessagePublishTopologyConfiguratorCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "set_Exclude(value)")]
					public bool Exclude
					{
						set
						{
							if (this.Expectations.handlers0?.Count > 0)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_Exclude(value)");
										}
										
										break;
									}
								}
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for set_Exclude(value)");
							}
						}
					}
					[global::Rocks.MemberIdentifier(1, "global::IMessagePublishTopology.get_Exclude()")]
					bool global::IMessagePublishTopology.Exclude
					{
						get
						{
							if (this.Expectations.handlers1?.Count > 0)
							{
								var @handler = this.Expectations.handlers1[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::IMessagePublishTopology.get_Exclude())");
						}
					}
					
					private global::IMessagePublishTopologyConfiguratorCreateExpectations Expectations { get; }
				}
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::IMessagePublishTopologyConfiguratorCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler0, global::System.Action<bool>> Exclude(global::Rocks.Argument<bool> @value)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler0
							{
								value = @value,
							};
						
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
							this.Expectations.handlers0.Add(handler);
							return new(handler);
						}
						private global::IMessagePublishTopologyConfiguratorCreateExpectations Expectations { get; }
					}
					
					internal PropertyExpectations(global::IMessagePublishTopologyConfiguratorCreateExpectations expectations) =>
						(this.Setters) = (new(expectations));
					
					internal global::IMessagePublishTopologyConfiguratorCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				internal sealed class ExplicitPropertyExpectationsForIMessagePublishTopology
				{
					internal sealed class ExplicitPropertyGetterExpectationsForIMessagePublishTopology
					{
						internal ExplicitPropertyGetterExpectationsForIMessagePublishTopology(global::IMessagePublishTopologyConfiguratorCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler1, global::System.Func<bool>, bool> Exclude()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
							var handler = new global::IMessagePublishTopologyConfiguratorCreateExpectations.Handler1();
							this.Expectations.handlers1.Add(handler);
							return new(handler);
						}
						private global::IMessagePublishTopologyConfiguratorCreateExpectations Expectations { get; }
					}
					
					internal ExplicitPropertyExpectationsForIMessagePublishTopology(global::IMessagePublishTopologyConfiguratorCreateExpectations expectations) =>
						(this.Getters) = (new(expectations));
					
					internal global::IMessagePublishTopologyConfiguratorCreateExpectations.ExplicitPropertyExpectationsForIMessagePublishTopology.ExplicitPropertyGetterExpectationsForIMessagePublishTopology Getters { get; }
				}
				
				internal global::IMessagePublishTopologyConfiguratorCreateExpectations.PropertyExpectations Properties { get; }
				internal global::IMessagePublishTopologyConfiguratorCreateExpectations.ExplicitPropertyExpectationsForIMessagePublishTopology ExplicitPropertiesForIMessagePublishTopology { get; }
				
				internal IMessagePublishTopologyConfiguratorCreateExpectations() =>
					(this.Properties, this.ExplicitPropertiesForIMessagePublishTopology) = (new(this), new(this));
				
				internal global::IMessagePublishTopologyConfigurator Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IMessagePublishTopologyConfigurator_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task CreateWithMultiplePrivatePublicPropertyAsync()
	{
		var code =
			"""
			using System;
			using Rocks;

			[assembly: RockCreate<PrivatePublicProperties>]

			#nullable enable

			public class PrivatePublicProperties
			{
				public virtual string? PrivateGetPublicSet1 { private get; set; }
				public virtual string? PrivateGetPublicSet2 { private get; set; }
				public virtual string? PrivateGetPublicSet3 { private get; set; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class PrivatePublicPropertiesCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Argument<string?> @value { get; set; }
				}
				
				internal sealed class Handler5
					: global::Rocks.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Argument<string?> @value { get; set; }
				}
				
				internal sealed class Handler7
					: global::Rocks.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Argument<string?> @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::PrivatePublicPropertiesCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::PrivatePublicPropertiesCreateExpectations.Handler1>? @handlers1;
				private global::System.Collections.Generic.List<global::PrivatePublicPropertiesCreateExpectations.Handler2>? @handlers2;
				private global::System.Collections.Generic.List<global::PrivatePublicPropertiesCreateExpectations.Handler3>? @handlers3;
				private global::System.Collections.Generic.List<global::PrivatePublicPropertiesCreateExpectations.Handler5>? @handlers5;
				private global::System.Collections.Generic.List<global::PrivatePublicPropertiesCreateExpectations.Handler7>? @handlers7;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers5?.Count > 0) { failures.AddRange(this.Verify(this.handlers5, 5)); }
						if (this.handlers7?.Count > 0) { failures.AddRange(this.Verify(this.handlers7, 7)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::PrivatePublicProperties
				{
					public Mock(global::PrivatePublicPropertiesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1?.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2?.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "set_PrivateGetPublicSet1(value)")]
					public override string? PrivateGetPublicSet1
					{
						set
						{
							if (this.Expectations.handlers3?.Count > 0)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers3)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_PrivateGetPublicSet1(value)");
										}
										
										break;
									}
								}
							}
							else
							{
								base.PrivateGetPublicSet1 = value!;
							}
						}
					}
					[global::Rocks.MemberIdentifier(5, "set_PrivateGetPublicSet2(value)")]
					public override string? PrivateGetPublicSet2
					{
						set
						{
							if (this.Expectations.handlers5?.Count > 0)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers5)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_PrivateGetPublicSet2(value)");
										}
										
										break;
									}
								}
							}
							else
							{
								base.PrivateGetPublicSet2 = value!;
							}
						}
					}
					[global::Rocks.MemberIdentifier(7, "set_PrivateGetPublicSet3(value)")]
					public override string? PrivateGetPublicSet3
					{
						set
						{
							if (this.Expectations.handlers7?.Count > 0)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers7)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_PrivateGetPublicSet3(value)");
										}
										
										break;
									}
								}
							}
							else
							{
								base.PrivateGetPublicSet3 = value!;
							}
						}
					}
					
					private global::PrivatePublicPropertiesCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::PrivatePublicPropertiesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::PrivatePublicPropertiesCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::PrivatePublicPropertiesCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::PrivatePublicPropertiesCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
						var handler = new global::PrivatePublicPropertiesCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::PrivatePublicPropertiesCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
						var handler = new global::PrivatePublicPropertiesCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					private global::PrivatePublicPropertiesCreateExpectations Expectations { get; }
				}
				
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::PrivatePublicPropertiesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::PrivatePublicPropertiesCreateExpectations.Handler3, global::System.Action<string?>> PrivateGetPublicSet1(global::Rocks.Argument<string?> @value)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::PrivatePublicPropertiesCreateExpectations.Handler3
							{
								value = @value,
							};
						
							if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(); }
							this.Expectations.handlers3.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::PrivatePublicPropertiesCreateExpectations.Handler5, global::System.Action<string?>> PrivateGetPublicSet2(global::Rocks.Argument<string?> @value)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::PrivatePublicPropertiesCreateExpectations.Handler5
							{
								value = @value,
							};
						
							if (this.Expectations.handlers5 is null ) { this.Expectations.handlers5 = new(); }
							this.Expectations.handlers5.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::PrivatePublicPropertiesCreateExpectations.Handler7, global::System.Action<string?>> PrivateGetPublicSet3(global::Rocks.Argument<string?> @value)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::PrivatePublicPropertiesCreateExpectations.Handler7
							{
								value = @value,
							};
						
							if (this.Expectations.handlers7 is null ) { this.Expectations.handlers7 = new(); }
							this.Expectations.handlers7.Add(handler);
							return new(handler);
						}
						private global::PrivatePublicPropertiesCreateExpectations Expectations { get; }
					}
					
					internal PropertyExpectations(global::PrivatePublicPropertiesCreateExpectations expectations) =>
						(this.Setters) = (new(expectations));
					
					internal global::PrivatePublicPropertiesCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				
				internal global::PrivatePublicPropertiesCreateExpectations.MethodExpectations Methods { get; }
				internal global::PrivatePublicPropertiesCreateExpectations.PropertyExpectations Properties { get; }
				
				internal PrivatePublicPropertiesCreateExpectations() =>
					(this.Methods, this.Properties) = (new(this), new(this));
				
				internal global::PrivatePublicProperties Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "PrivatePublicProperties_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task CreateWithPrivatePublicPropertyAsync()
	{
		var code =
			"""
			using System;
			using Rocks;

			[assembly: RockCreate<PrivatePublicProperty>]

			#nullable enable

			public class PrivatePublicProperty
			{
				public virtual string? PrivateGetPublicSet { private get; set; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class PrivatePublicPropertyCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Argument<string?> @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::PrivatePublicPropertyCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::PrivatePublicPropertyCreateExpectations.Handler1>? @handlers1;
				private global::System.Collections.Generic.List<global::PrivatePublicPropertyCreateExpectations.Handler2>? @handlers2;
				private global::System.Collections.Generic.List<global::PrivatePublicPropertyCreateExpectations.Handler3>? @handlers3;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3, 3)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::PrivatePublicProperty
				{
					public Mock(global::PrivatePublicPropertyCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1?.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2?.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "set_PrivateGetPublicSet(value)")]
					public override string? PrivateGetPublicSet
					{
						set
						{
							if (this.Expectations.handlers3?.Count > 0)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers3)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_PrivateGetPublicSet(value)");
										}
										
										break;
									}
								}
							}
							else
							{
								base.PrivateGetPublicSet = value!;
							}
						}
					}
					
					private global::PrivatePublicPropertyCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::PrivatePublicPropertyCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::PrivatePublicPropertyCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::PrivatePublicPropertyCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::PrivatePublicPropertyCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
						var handler = new global::PrivatePublicPropertyCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::PrivatePublicPropertyCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
						var handler = new global::PrivatePublicPropertyCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					private global::PrivatePublicPropertyCreateExpectations Expectations { get; }
				}
				
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::PrivatePublicPropertyCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::PrivatePublicPropertyCreateExpectations.Handler3, global::System.Action<string?>> PrivateGetPublicSet(global::Rocks.Argument<string?> @value)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::PrivatePublicPropertyCreateExpectations.Handler3
							{
								value = @value,
							};
						
							if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(); }
							this.Expectations.handlers3.Add(handler);
							return new(handler);
						}
						private global::PrivatePublicPropertyCreateExpectations Expectations { get; }
					}
					
					internal PropertyExpectations(global::PrivatePublicPropertyCreateExpectations expectations) =>
						(this.Setters) = (new(expectations));
					
					internal global::PrivatePublicPropertyCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				
				internal global::PrivatePublicPropertyCreateExpectations.MethodExpectations Methods { get; }
				internal global::PrivatePublicPropertyCreateExpectations.PropertyExpectations Properties { get; }
				
				internal PrivatePublicPropertyCreateExpectations() =>
					(this.Methods, this.Properties) = (new(this), new(this));
				
				internal global::PrivatePublicProperty Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "PrivatePublicProperty_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task CreateWithMixedIndexerVisibilityAsync()
	{
		var code =
			"""
			using System;
			using Rocks;

			[assembly: RockCreate<MixedIndexers>]

			#nullable enable

			public class MixedIndexers
			{
				public virtual string? this[int index] { get => string.Empty; private set { } }
				public virtual string? this[long index] { get => string.Empty; protected set { } }
				public virtual string? this[Guid index] { private get => string.Empty; set { } }
				public virtual string? this[string index] { protected get => string.Empty; set { } }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class MixedIndexersCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Func<int, string?>, string?>
				{
					public global::Rocks.Argument<int> @index { get; set; }
				}
				
				internal sealed class Handler5
					: global::Rocks.Handler<global::System.Func<long, string?>, string?>
				{
					public global::Rocks.Argument<long> @index { get; set; }
				}
				
				internal sealed class Handler6
					: global::Rocks.Handler<global::System.Action<long, string?>>
				{
					public global::Rocks.Argument<long> @index { get; set; }
					public global::Rocks.Argument<string?> @value { get; set; }
				}
				
				internal sealed class Handler7
					: global::Rocks.Handler<global::System.Action<global::System.Guid, string?>>
				{
					public global::Rocks.Argument<global::System.Guid> @index { get; set; }
					public global::Rocks.Argument<string?> @value { get; set; }
				}
				
				internal sealed class Handler9
					: global::Rocks.Handler<global::System.Func<string, string?>, string?>
				{
					public global::Rocks.Argument<string> @index { get; set; }
				}
				
				internal sealed class Handler10
					: global::Rocks.Handler<global::System.Action<string, string?>>
				{
					public global::Rocks.Argument<string> @index { get; set; }
					public global::Rocks.Argument<string?> @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::MixedIndexersCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::MixedIndexersCreateExpectations.Handler1>? @handlers1;
				private global::System.Collections.Generic.List<global::MixedIndexersCreateExpectations.Handler2>? @handlers2;
				private global::System.Collections.Generic.List<global::MixedIndexersCreateExpectations.Handler3>? @handlers3;
				private global::System.Collections.Generic.List<global::MixedIndexersCreateExpectations.Handler5>? @handlers5;
				private global::System.Collections.Generic.List<global::MixedIndexersCreateExpectations.Handler6>? @handlers6;
				private global::System.Collections.Generic.List<global::MixedIndexersCreateExpectations.Handler7>? @handlers7;
				private global::System.Collections.Generic.List<global::MixedIndexersCreateExpectations.Handler9>? @handlers9;
				private global::System.Collections.Generic.List<global::MixedIndexersCreateExpectations.Handler10>? @handlers10;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers5?.Count > 0) { failures.AddRange(this.Verify(this.handlers5, 5)); }
						if (this.handlers6?.Count > 0) { failures.AddRange(this.Verify(this.handlers6, 6)); }
						if (this.handlers7?.Count > 0) { failures.AddRange(this.Verify(this.handlers7, 7)); }
						if (this.handlers9?.Count > 0) { failures.AddRange(this.Verify(this.handlers9, 9)); }
						if (this.handlers10?.Count > 0) { failures.AddRange(this.Verify(this.handlers10, 10)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::MixedIndexers
				{
					public Mock(global::MixedIndexersCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1?.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2?.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "this[int @index]")]
					public override string? this[int @index]
					{
						get
						{
							if (this.Expectations.handlers3?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers3)
								{
									if (@handler.@index.IsValid(@index!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@index!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[int @index]");
							}
							else
							{
								return base[index: @index!];
							}
						}
					}
					[global::Rocks.MemberIdentifier(5, "this[long @index]")]
					[global::Rocks.MemberIdentifier(6, "this[long @index]")]
					public override string? this[long @index]
					{
						get
						{
							if (this.Expectations.handlers5?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers5)
								{
									if (@handler.@index.IsValid(@index!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@index!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[long @index]");
							}
							else
							{
								return base[index: @index!];
							}
						}
						protected set
						{
							if (this.Expectations.handlers6?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers6)
								{
									if (@handler.@index.IsValid(@index!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@index!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[long @index]");
							}
							else
							{
								base[index: @index!] = @value!;
							}
						}
					}
					[global::Rocks.MemberIdentifier(7, "this[global::System.Guid @index]")]
					public override string? this[global::System.Guid @index]
					{
						set
						{
							if (this.Expectations.handlers7?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers7)
								{
									if (@handler.@index.IsValid(@index!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@index!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[global::System.Guid @index]");
							}
							else
							{
								base[index: @index!] = @value!;
							}
						}
					}
					[global::Rocks.MemberIdentifier(9, "this[string @index]")]
					[global::Rocks.MemberIdentifier(10, "this[string @index]")]
					public override string? this[string @index]
					{
						protected get
						{
							if (this.Expectations.handlers9?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers9)
								{
									if (@handler.@index.IsValid(@index!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@index!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[string @index]");
							}
							else
							{
								return base[index: @index!];
							}
						}
						set
						{
							if (this.Expectations.handlers10?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers10)
								{
									if (@handler.@index.IsValid(@index!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@index!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[string @index]");
							}
							else
							{
								base[index: @index!] = @value!;
							}
						}
					}
					
					private global::MixedIndexersCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::MixedIndexersCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::MixedIndexersCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::MixedIndexersCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::MixedIndexersCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
						var handler = new global::MixedIndexersCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::MixedIndexersCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
						var handler = new global::MixedIndexersCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					private global::MixedIndexersCreateExpectations Expectations { get; }
				}
				
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerGetterExpectations
					{
						internal IndexerGetterExpectations(global::MixedIndexersCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::MixedIndexersCreateExpectations.Handler3, global::System.Func<int, string?>, string?> This(global::Rocks.Argument<int> @index)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							
							var handler = new global::MixedIndexersCreateExpectations.Handler3
							{
								@index = @index,
							};
							
							if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(); }
							this.Expectations.handlers3.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::MixedIndexersCreateExpectations.Handler5, global::System.Func<long, string?>, string?> This(global::Rocks.Argument<long> @index)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							
							var handler = new global::MixedIndexersCreateExpectations.Handler5
							{
								@index = @index,
							};
							
							if (this.Expectations.handlers5 is null ) { this.Expectations.handlers5 = new(); }
							this.Expectations.handlers5.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::MixedIndexersCreateExpectations.Handler9, global::System.Func<string, string?>, string?> This(global::Rocks.Argument<string> @index)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							
							var handler = new global::MixedIndexersCreateExpectations.Handler9
							{
								@index = @index,
							};
							
							if (this.Expectations.handlers9 is null ) { this.Expectations.handlers9 = new(); }
							this.Expectations.handlers9.Add(handler);
							return new(handler);
						}
						private global::MixedIndexersCreateExpectations Expectations { get; }
					}
					
					internal sealed class IndexerSetterExpectations
					{
						internal IndexerSetterExpectations(global::MixedIndexersCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::MixedIndexersCreateExpectations.Handler6, global::System.Action<long, string?>> This(global::Rocks.Argument<string?> @value, global::Rocks.Argument<long> @index)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var handler = new global::MixedIndexersCreateExpectations.Handler6
							{
								@index = @index,
								@value = @value,
							};
							
							if (this.Expectations.handlers6 is null ) { this.Expectations.handlers6 = new(); }
							this.Expectations.handlers6.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::MixedIndexersCreateExpectations.Handler7, global::System.Action<global::System.Guid, string?>> This(global::Rocks.Argument<string?> @value, global::Rocks.Argument<global::System.Guid> @index)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var handler = new global::MixedIndexersCreateExpectations.Handler7
							{
								@index = @index,
								@value = @value,
							};
							
							if (this.Expectations.handlers7 is null ) { this.Expectations.handlers7 = new(); }
							this.Expectations.handlers7.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::MixedIndexersCreateExpectations.Handler10, global::System.Action<string, string?>> This(global::Rocks.Argument<string?> @value, global::Rocks.Argument<string> @index)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var handler = new global::MixedIndexersCreateExpectations.Handler10
							{
								@index = @index,
								@value = @value,
							};
							
							if (this.Expectations.handlers10 is null ) { this.Expectations.handlers10 = new(); }
							this.Expectations.handlers10.Add(handler);
							return new(handler);
						}
						private global::MixedIndexersCreateExpectations Expectations { get; }
					}
					
					internal IndexerExpectations(global::MixedIndexersCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::MixedIndexersCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
					internal global::MixedIndexersCreateExpectations.IndexerExpectations.IndexerSetterExpectations Setters { get; }
				}
				
				internal global::MixedIndexersCreateExpectations.MethodExpectations Methods { get; }
				internal global::MixedIndexersCreateExpectations.IndexerExpectations Indexers { get; }
				
				internal MixedIndexersCreateExpectations() =>
					(this.Methods, this.Indexers) = (new(this), new(this));
				
				internal global::MixedIndexers Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MixedIndexers_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task CreateWithMixedPropertyVisibilityAsync()
	{
		var code =
			"""
			using System;
			using Rocks;

			[assembly: RockCreate<MixedProperties>]

			#nullable enable

			public class MixedProperties
			{
				public virtual string? PublicGetPrivateSet { get; private set; }
				public virtual string? PublicGetProtectedSet { get; protected set; }
				public virtual string? PrivateGetPublicSet { private get; set; }
				public virtual string? ProtectedGetPublicSet { protected get; set; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class MixedPropertiesCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler5
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler6
					: global::Rocks.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Argument<string?> @value { get; set; }
				}
				
				internal sealed class Handler7
					: global::Rocks.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Argument<string?> @value { get; set; }
				}
				
				internal sealed class Handler9
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler10
					: global::Rocks.Handler<global::System.Action<string?>>
				{
					public global::Rocks.Argument<string?> @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::MixedPropertiesCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::MixedPropertiesCreateExpectations.Handler1>? @handlers1;
				private global::System.Collections.Generic.List<global::MixedPropertiesCreateExpectations.Handler2>? @handlers2;
				private global::System.Collections.Generic.List<global::MixedPropertiesCreateExpectations.Handler3>? @handlers3;
				private global::System.Collections.Generic.List<global::MixedPropertiesCreateExpectations.Handler5>? @handlers5;
				private global::System.Collections.Generic.List<global::MixedPropertiesCreateExpectations.Handler6>? @handlers6;
				private global::System.Collections.Generic.List<global::MixedPropertiesCreateExpectations.Handler7>? @handlers7;
				private global::System.Collections.Generic.List<global::MixedPropertiesCreateExpectations.Handler9>? @handlers9;
				private global::System.Collections.Generic.List<global::MixedPropertiesCreateExpectations.Handler10>? @handlers10;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers5?.Count > 0) { failures.AddRange(this.Verify(this.handlers5, 5)); }
						if (this.handlers6?.Count > 0) { failures.AddRange(this.Verify(this.handlers6, 6)); }
						if (this.handlers7?.Count > 0) { failures.AddRange(this.Verify(this.handlers7, 7)); }
						if (this.handlers9?.Count > 0) { failures.AddRange(this.Verify(this.handlers9, 9)); }
						if (this.handlers10?.Count > 0) { failures.AddRange(this.Verify(this.handlers10, 10)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::MixedProperties
				{
					public Mock(global::MixedPropertiesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1?.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2?.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "get_PublicGetPrivateSet()")]
					public override string? PublicGetPrivateSet
					{
						get
						{
							if (this.Expectations.handlers3?.Count > 0)
							{
								var @handler = this.Expectations.handlers3[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.PublicGetPrivateSet;
							}
						}
					}
					[global::Rocks.MemberIdentifier(5, "get_PublicGetProtectedSet()")]
					[global::Rocks.MemberIdentifier(6, "set_PublicGetProtectedSet(value)")]
					public override string? PublicGetProtectedSet
					{
						get
						{
							if (this.Expectations.handlers5?.Count > 0)
							{
								var @handler = this.Expectations.handlers5[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.PublicGetProtectedSet;
							}
						}
						protected set
						{
							if (this.Expectations.handlers6?.Count > 0)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers6)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_PublicGetProtectedSet(value)");
										}
										
										break;
									}
								}
							}
							else
							{
								base.PublicGetProtectedSet = value!;
							}
						}
					}
					[global::Rocks.MemberIdentifier(7, "set_PrivateGetPublicSet(value)")]
					public override string? PrivateGetPublicSet
					{
						set
						{
							if (this.Expectations.handlers7?.Count > 0)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers7)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_PrivateGetPublicSet(value)");
										}
										
										break;
									}
								}
							}
							else
							{
								base.PrivateGetPublicSet = value!;
							}
						}
					}
					[global::Rocks.MemberIdentifier(9, "get_ProtectedGetPublicSet()")]
					[global::Rocks.MemberIdentifier(10, "set_ProtectedGetPublicSet(value)")]
					public override string? ProtectedGetPublicSet
					{
						protected get
						{
							if (this.Expectations.handlers9?.Count > 0)
							{
								var @handler = this.Expectations.handlers9[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.ProtectedGetPublicSet;
							}
						}
						set
						{
							if (this.Expectations.handlers10?.Count > 0)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers10)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_ProtectedGetPublicSet(value)");
										}
										
										break;
									}
								}
							}
							else
							{
								base.ProtectedGetPublicSet = value!;
							}
						}
					}
					
					private global::MixedPropertiesCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::MixedPropertiesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::MixedPropertiesCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::MixedPropertiesCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::MixedPropertiesCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
						var handler = new global::MixedPropertiesCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::MixedPropertiesCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
						var handler = new global::MixedPropertiesCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					private global::MixedPropertiesCreateExpectations Expectations { get; }
				}
				
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertyGetterExpectations
					{
						internal PropertyGetterExpectations(global::MixedPropertiesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::MixedPropertiesCreateExpectations.Handler3, global::System.Func<string?>, string?> PublicGetPrivateSet()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(); }
							var handler = new global::MixedPropertiesCreateExpectations.Handler3();
							this.Expectations.handlers3.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::MixedPropertiesCreateExpectations.Handler5, global::System.Func<string?>, string?> PublicGetProtectedSet()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							if (this.Expectations.handlers5 is null ) { this.Expectations.handlers5 = new(); }
							var handler = new global::MixedPropertiesCreateExpectations.Handler5();
							this.Expectations.handlers5.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::MixedPropertiesCreateExpectations.Handler9, global::System.Func<string?>, string?> ProtectedGetPublicSet()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							if (this.Expectations.handlers9 is null ) { this.Expectations.handlers9 = new(); }
							var handler = new global::MixedPropertiesCreateExpectations.Handler9();
							this.Expectations.handlers9.Add(handler);
							return new(handler);
						}
						private global::MixedPropertiesCreateExpectations Expectations { get; }
					}
					
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::MixedPropertiesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::MixedPropertiesCreateExpectations.Handler6, global::System.Action<string?>> PublicGetProtectedSet(global::Rocks.Argument<string?> @value)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::MixedPropertiesCreateExpectations.Handler6
							{
								value = @value,
							};
						
							if (this.Expectations.handlers6 is null ) { this.Expectations.handlers6 = new(); }
							this.Expectations.handlers6.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::MixedPropertiesCreateExpectations.Handler7, global::System.Action<string?>> PrivateGetPublicSet(global::Rocks.Argument<string?> @value)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::MixedPropertiesCreateExpectations.Handler7
							{
								value = @value,
							};
						
							if (this.Expectations.handlers7 is null ) { this.Expectations.handlers7 = new(); }
							this.Expectations.handlers7.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::MixedPropertiesCreateExpectations.Handler10, global::System.Action<string?>> ProtectedGetPublicSet(global::Rocks.Argument<string?> @value)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::MixedPropertiesCreateExpectations.Handler10
							{
								value = @value,
							};
						
							if (this.Expectations.handlers10 is null ) { this.Expectations.handlers10 = new(); }
							this.Expectations.handlers10.Add(handler);
							return new(handler);
						}
						private global::MixedPropertiesCreateExpectations Expectations { get; }
					}
					
					internal PropertyExpectations(global::MixedPropertiesCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::MixedPropertiesCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
					internal global::MixedPropertiesCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				
				internal global::MixedPropertiesCreateExpectations.MethodExpectations Methods { get; }
				internal global::MixedPropertiesCreateExpectations.PropertyExpectations Properties { get; }
				
				internal MixedPropertiesCreateExpectations() =>
					(this.Methods, this.Properties) = (new(this), new(this));
				
				internal global::MixedProperties Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MixedProperties_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task MakeWithMixedVisibilityAsync()
	{
		var code =
			"""
			using System;
			using Rocks;

			[assembly: RockMake<MixedProperties>]
			
			#nullable enable
			
			public class MixedProperties
			{
				public virtual string? PublicGetPrivateSet { get; private set; }
				public virtual string? PublicGetProtectedSet { get; protected set; }
				public virtual string? PrivateGetPublicSet { private get; set; }
				public virtual string? ProtectedGetPublicSet { protected get; set; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8775
			#nullable enable
			
			internal sealed class MixedPropertiesMakeExpectations
			{
				internal global::MixedProperties Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::MixedProperties
				{
					public Mock()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					public override string? PublicGetPrivateSet
					{
						get => default!;
					}
					public override string? PublicGetProtectedSet
					{
						get => default!;
						protected set { }
					}
					public override string? PrivateGetPublicSet
					{
						set { }
					}
					public override string? ProtectedGetPublicSet
					{
						protected get => default!;
						set { }
					}
				}
			}
			
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MixedProperties_Rock_Make.g.cs", generatedCode) },
			[]);
	}
}