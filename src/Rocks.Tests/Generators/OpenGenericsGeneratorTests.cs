using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class OpenGenericsGeneratorTests
{
	[Test]
	public static async Task CreateAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockCreate(typeof(IService<,>))]
			
			#nullable enable

			public interface IService<T, TReturn>
			{
				TReturn Service(T data);
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			internal sealed class IServiceCreateExpectations<T, TReturn>
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<T, TReturn>, TReturn>
				{
					public global::Rocks.Argument<T> @data { get; set; }
				}
				private global::Rocks.Handlers<global::IServiceCreateExpectations<T, TReturn>.Handler0>? @handlers0;
				#pragma warning restore CS8618
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IService<T, TReturn>
				{
					public Mock(global::IServiceCreateExpectations<T, TReturn> @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public TReturn Service(T @data)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@data.IsValid(@data!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@data!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
					}
					
					private global::IServiceCreateExpectations<T, TReturn> Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IServiceCreateExpectations<T, TReturn> expectations) =>
						this.Expectations = expectations;
					
					internal global::IServiceCreateExpectations<T, TReturn>.Adornments.AdornmentsForHandler0 Service(global::Rocks.Argument<T> @data)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::IServiceCreateExpectations<T, TReturn>.Handler0
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::IServiceCreateExpectations<T, TReturn> Expectations { get; }
				}
				
				internal global::IServiceCreateExpectations<T, TReturn>.MethodExpectations Methods { get; }
				
				internal IServiceCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IService<T, TReturn> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIService<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIService<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::IServiceCreateExpectations<T, TReturn>.Handler0, global::System.Func<T, TReturn>, TReturn>, IAdornmentsForIService<AdornmentsForHandler0>
					{ 
						public AdornmentsForHandler0(global::IServiceCreateExpectations<T, TReturn>.Handler0 handler)
							: base(handler) { }				
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "IServiceT, TReturn_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task MakeAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockMake(typeof(IService<,>))]
			
			#nullable enable

			public interface IService<T, TReturn>
			{
				TReturn Service(T data);
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8775
			#nullable enable
			
			internal sealed class IServiceMakeExpectations<T, TReturn>
			{
				internal global::IService<T, TReturn> Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IService<T, TReturn>
				{
					public Mock()
					{
					}
					
					public TReturn Service(T @data)
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "IServiceT, TReturn_Rock_Make.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task CreateWithPropertiesAndIndexersAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockCreate(typeof(IService<,>))]
			
			#nullable enable

			public interface IService<T, TReturn>
			{
				T Data { get; set; }
				TReturn this[TReturn index] { get; set; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			internal sealed class IServiceCreateExpectations<T, TReturn>
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<T>, T>
				{ }
				private global::Rocks.Handlers<global::IServiceCreateExpectations<T, TReturn>.Handler0>? @handlers0;
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Action<T>>
				{
					public global::Rocks.Argument<T> @value { get; set; }
				}
				private global::Rocks.Handlers<global::IServiceCreateExpectations<T, TReturn>.Handler1>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<TReturn, TReturn>, TReturn>
				{
					public global::Rocks.Argument<TReturn> @index { get; set; }
				}
				private global::Rocks.Handlers<global::IServiceCreateExpectations<T, TReturn>.Handler2>? @handlers2;
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Action<TReturn, TReturn>>
				{
					public global::Rocks.Argument<TReturn> @index { get; set; }
					public global::Rocks.Argument<TReturn> @value { get; set; }
				}
				private global::Rocks.Handlers<global::IServiceCreateExpectations<T, TReturn>.Handler3>? @handlers3;
				#pragma warning restore CS8618
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3 is not null) { failures.AddRange(this.Verify(this.handlers3, 3)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IService<T, TReturn>
				{
					public Mock(global::IServiceCreateExpectations<T, TReturn> @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, global::Rocks.PropertyAccessor.Get)]
					[global::Rocks.MemberIdentifier(1, global::Rocks.PropertyAccessor.Set)]
					public T Data
					{
						get
						{
							if (this.Expectations.handlers0 is not null)
							{
								var @handler = this.Expectations.handlers0.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)})");
						}
						set
						{
							if (this.Expectations.handlers1 is not null)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(1)}");
										}
										
										break;
									}
								}
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
							}
						}
					}
					
					[global::Rocks.MemberIdentifier(2, global::Rocks.PropertyAccessor.Get)]
					[global::Rocks.MemberIdentifier(3, global::Rocks.PropertyAccessor.Set)]
					public TReturn this[TReturn @index]
					{
						get
						{
							if (this.Expectations.handlers2 is not null)
							{
								foreach (var @handler in this.Expectations.handlers2)
								{
									if (@handler.@index.IsValid(@index!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@index!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(2)}");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(2)})");
						}
						set
						{
							if (this.Expectations.handlers3 is not null)
							{
								foreach (var @handler in this.Expectations.handlers3)
								{
									if (@handler.@index.IsValid(@index!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@index!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(3)}");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(3)}");
						}
					}
					
					private global::IServiceCreateExpectations<T, TReturn> Expectations { get; }
				}
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertyGetterExpectations
					{
						internal PropertyGetterExpectations(global::IServiceCreateExpectations<T, TReturn> expectations) =>
							this.Expectations = expectations;
						
						internal global::IServiceCreateExpectations<T, TReturn>.Adornments.AdornmentsForHandler0 Data()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::IServiceCreateExpectations<T, TReturn>.Handler0();
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(handler); }
							else { this.Expectations.handlers0.Add(handler); }
							return new(handler);
						}
						private global::IServiceCreateExpectations<T, TReturn> Expectations { get; }
					}
					
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::IServiceCreateExpectations<T, TReturn> expectations) =>
							this.Expectations = expectations;
						
						internal global::IServiceCreateExpectations<T, TReturn>.Adornments.AdornmentsForHandler1 Data(global::Rocks.Argument<T> @value)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::IServiceCreateExpectations<T, TReturn>.Handler1
							{
								value = @value,
							};
						
							if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(handler); }
							else { this.Expectations.handlers1.Add(handler); }
							return new(handler);
						}
						private global::IServiceCreateExpectations<T, TReturn> Expectations { get; }
					}
					
					internal PropertyExpectations(global::IServiceCreateExpectations<T, TReturn> expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::IServiceCreateExpectations<T, TReturn>.PropertyExpectations.PropertyGetterExpectations Getters { get; }
					internal global::IServiceCreateExpectations<T, TReturn>.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerGetterExpectations
					{
						internal IndexerGetterExpectations(global::IServiceCreateExpectations<T, TReturn> expectations) =>
							this.Expectations = expectations;
						
						internal global::IServiceCreateExpectations<T, TReturn>.Adornments.AdornmentsForHandler2 This(global::Rocks.Argument<TReturn> @index)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							
							var @handler = new global::IServiceCreateExpectations<T, TReturn>.Handler2
							{
								@index = @index,
							};
							
							if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(@handler); }
							else { this.Expectations.handlers2.Add(@handler); }
							return new(@handler);
						}
						private global::IServiceCreateExpectations<T, TReturn> Expectations { get; }
					}
					
					internal sealed class IndexerSetterExpectations
					{
						internal IndexerSetterExpectations(global::IServiceCreateExpectations<T, TReturn> expectations) =>
							this.Expectations = expectations;
						
						internal global::IServiceCreateExpectations<T, TReturn>.Adornments.AdornmentsForHandler3 This(global::Rocks.Argument<TReturn> @value, global::Rocks.Argument<TReturn> @index)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var @handler = new global::IServiceCreateExpectations<T, TReturn>.Handler3
							{
								@index = @index,
								@value = @value,
							};
							
							if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(@handler); }
							else { this.Expectations.handlers3.Add(@handler); }
							return new(@handler);
						}
						private global::IServiceCreateExpectations<T, TReturn> Expectations { get; }
					}
					
					internal IndexerExpectations(global::IServiceCreateExpectations<T, TReturn> expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::IServiceCreateExpectations<T, TReturn>.IndexerExpectations.IndexerGetterExpectations Getters { get; }
					internal global::IServiceCreateExpectations<T, TReturn>.IndexerExpectations.IndexerSetterExpectations Setters { get; }
				}
				
				internal global::IServiceCreateExpectations<T, TReturn>.PropertyExpectations Properties { get; }
				internal global::IServiceCreateExpectations<T, TReturn>.IndexerExpectations Indexers { get; }
				
				internal IServiceCreateExpectations() =>
					(this.Properties, this.Indexers) = (new(this), new(this));
				
				internal global::IService<T, TReturn> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIService<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIService<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::IServiceCreateExpectations<T, TReturn>.Handler0, global::System.Func<T>, T>, IAdornmentsForIService<AdornmentsForHandler0>
					{ 
						public AdornmentsForHandler0(global::IServiceCreateExpectations<T, TReturn>.Handler0 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler1
						: global::Rocks.Adornments<AdornmentsForHandler1, global::IServiceCreateExpectations<T, TReturn>.Handler1, global::System.Action<T>>, IAdornmentsForIService<AdornmentsForHandler1>
					{ 
						public AdornmentsForHandler1(global::IServiceCreateExpectations<T, TReturn>.Handler1 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::IServiceCreateExpectations<T, TReturn>.Handler2, global::System.Func<TReturn, TReturn>, TReturn>, IAdornmentsForIService<AdornmentsForHandler2>
					{ 
						public AdornmentsForHandler2(global::IServiceCreateExpectations<T, TReturn>.Handler2 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler3
						: global::Rocks.Adornments<AdornmentsForHandler3, global::IServiceCreateExpectations<T, TReturn>.Handler3, global::System.Action<TReturn, TReturn>>, IAdornmentsForIService<AdornmentsForHandler3>
					{ 
						public AdornmentsForHandler3(global::IServiceCreateExpectations<T, TReturn>.Handler3 handler)
							: base(handler) { }				
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "IServiceT, TReturn_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task CreateWithConstraintsAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockCreate(typeof(IService<,>))]
			
			#nullable enable

			public interface IService<T, TReturn>
				where T : class
				where TReturn : struct
			{
				TReturn Service(T data);
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			internal sealed class IServiceCreateExpectations<T, TReturn>
				: global::Rocks.Expectations
				where T : class
				where TReturn : struct
			{
				#pragma warning disable CS8618
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<T, TReturn>, TReturn>
				{
					public global::Rocks.Argument<T> @data { get; set; }
				}
				private global::Rocks.Handlers<global::IServiceCreateExpectations<T, TReturn>.Handler0>? @handlers0;
				#pragma warning restore CS8618
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IService<T, TReturn>
				{
					public Mock(global::IServiceCreateExpectations<T, TReturn> @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public TReturn Service(T @data)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@data.IsValid(@data!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@data!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
					}
					
					private global::IServiceCreateExpectations<T, TReturn> Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IServiceCreateExpectations<T, TReturn> expectations) =>
						this.Expectations = expectations;
					
					internal global::IServiceCreateExpectations<T, TReturn>.Adornments.AdornmentsForHandler0 Service(global::Rocks.Argument<T> @data)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::IServiceCreateExpectations<T, TReturn>.Handler0
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					private global::IServiceCreateExpectations<T, TReturn> Expectations { get; }
				}
				
				internal global::IServiceCreateExpectations<T, TReturn>.MethodExpectations Methods { get; }
				
				internal IServiceCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IService<T, TReturn> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIService<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIService<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::IServiceCreateExpectations<T, TReturn>.Handler0, global::System.Func<T, TReturn>, TReturn>, IAdornmentsForIService<AdornmentsForHandler0>
					{ 
						public AdornmentsForHandler0(global::IServiceCreateExpectations<T, TReturn>.Handler0 handler)
							: base(handler) { }				
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "IServiceT, TReturn_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task MakeWithConstraintsAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockMake(typeof(IService<,>))]
			
			#nullable enable

			public interface IService<T, TReturn>
				where T : class
				where TReturn : struct
			{
				TReturn Service(T data);
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8775
			#nullable enable
			
			internal sealed class IServiceMakeExpectations<T, TReturn>
				where T : class
				where TReturn : struct
			{
				internal global::IService<T, TReturn> Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IService<T, TReturn>
				{
					public Mock()
					{
					}
					
					public TReturn Service(T @data)
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "IServiceT, TReturn_Rock_Make.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task CreateWithNameCollisionsInTypeParametersAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			using System.Threading.Tasks;
						
			[assembly: RockCreate(typeof(IExceptionConsumeContext<>))]
			
			#nullable enable

			public interface IStory
			{
				string GetContent();
			}

			public interface IContext
			{
				Task RespondAsync<T>(T message);
			}

			public interface IConsumeContext<out TStory>
				: IContext
				where TStory : class, IStory
			{
				Task SetCompleted();
			}

			public interface IExceptionConsumeContext<out T>
				: IConsumeContext<T>
				where T : class, IStory
			{
				Exception Exception { get; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			internal sealed class IExceptionConsumeContextCreateExpectations<T>
				: global::Rocks.Expectations
				where T : class, global::IStory
			{
				#pragma warning disable CS8618
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<global::System.Threading.Tasks.Task>, global::System.Threading.Tasks.Task>
				{ }
				private global::Rocks.Handlers<global::IExceptionConsumeContextCreateExpectations<T>.Handler0>? @handlers0;
				internal sealed class Handler1<T1>
					: global::Rocks.Handler<global::System.Func<T1, global::System.Threading.Tasks.Task>, global::System.Threading.Tasks.Task>
				{
					public global::Rocks.Argument<T1> @message { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers1;
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<global::System.Exception>, global::System.Exception>
				{ }
				private global::Rocks.Handlers<global::IExceptionConsumeContextCreateExpectations<T>.Handler2>? @handlers2;
				#pragma warning restore CS8618
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2 is not null) { failures.AddRange(this.Verify(this.handlers2, 2)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IExceptionConsumeContext<T>
				{
					public Mock(global::IExceptionConsumeContextCreateExpectations<T> @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public global::System.Threading.Tasks.Task SetCompleted()
					{
						if (this.Expectations.handlers0 is not null)
						{
							var @handler = this.Expectations.handlers0.First;
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public global::System.Threading.Tasks.Task RespondAsync<T1>(T1 @message)
					{
						if (this.Expectations.handlers1 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers1)
							{
								if (@genericHandler is global::IExceptionConsumeContextCreateExpectations<T>.Handler1<T1> @handler)
								{
									if (@handler.@message.IsValid(@message!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@message!) : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(1)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
					}
					
					[global::Rocks.MemberIdentifier(2, global::Rocks.PropertyAccessor.Get)]
					public global::System.Exception Exception
					{
						get
						{
							if (this.Expectations.handlers2 is not null)
							{
								var @handler = this.Expectations.handlers2.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(2)})");
						}
					}
					
					private global::IExceptionConsumeContextCreateExpectations<T> Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IExceptionConsumeContextCreateExpectations<T> expectations) =>
						this.Expectations = expectations;
					
					internal global::IExceptionConsumeContextCreateExpectations<T>.Adornments.AdornmentsForHandler0 SetCompleted()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						var handler = new global::IExceptionConsumeContextCreateExpectations<T>.Handler0();
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(handler); }
						else { this.Expectations.handlers0.Add(handler); }
						return new(handler);
					}
					
					internal global::IExceptionConsumeContextCreateExpectations<T>.Adornments.AdornmentsForHandler1<T1> RespondAsync<T1>(global::Rocks.Argument<T1> @message)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@message);
						
						var @handler = new global::IExceptionConsumeContextCreateExpectations<T>.Handler1<T1>
						{
							@message = @message,
						};
						
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(@handler); }
						else { this.Expectations.handlers1.Add(@handler); }
						return new(@handler);
					}
					
					private global::IExceptionConsumeContextCreateExpectations<T> Expectations { get; }
				}
				
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertyGetterExpectations
					{
						internal PropertyGetterExpectations(global::IExceptionConsumeContextCreateExpectations<T> expectations) =>
							this.Expectations = expectations;
						
						internal global::IExceptionConsumeContextCreateExpectations<T>.Adornments.AdornmentsForHandler2 Exception()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::IExceptionConsumeContextCreateExpectations<T>.Handler2();
							if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(handler); }
							else { this.Expectations.handlers2.Add(handler); }
							return new(handler);
						}
						private global::IExceptionConsumeContextCreateExpectations<T> Expectations { get; }
					}
					
					
					internal PropertyExpectations(global::IExceptionConsumeContextCreateExpectations<T> expectations) =>
						(this.Getters) = (new(expectations));
					
					internal global::IExceptionConsumeContextCreateExpectations<T>.PropertyExpectations.PropertyGetterExpectations Getters { get; }
				}
				
				internal global::IExceptionConsumeContextCreateExpectations<T>.MethodExpectations Methods { get; }
				internal global::IExceptionConsumeContextCreateExpectations<T>.PropertyExpectations Properties { get; }
				
				internal IExceptionConsumeContextCreateExpectations() =>
					(this.Methods, this.Properties) = (new(this), new(this));
				
				internal global::IExceptionConsumeContext<T> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIExceptionConsumeContext<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIExceptionConsumeContext<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::IExceptionConsumeContextCreateExpectations<T>.Handler0, global::System.Func<global::System.Threading.Tasks.Task>, global::System.Threading.Tasks.Task>, IAdornmentsForIExceptionConsumeContext<AdornmentsForHandler0>
					{ 
						public AdornmentsForHandler0(global::IExceptionConsumeContextCreateExpectations<T>.Handler0 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler1<T1>
						: global::Rocks.Adornments<AdornmentsForHandler1<T1>, global::IExceptionConsumeContextCreateExpectations<T>.Handler1<T1>, global::System.Func<T1, global::System.Threading.Tasks.Task>, global::System.Threading.Tasks.Task>, IAdornmentsForIExceptionConsumeContext<AdornmentsForHandler1<T1>>
					{ 
						public AdornmentsForHandler1(global::IExceptionConsumeContextCreateExpectations<T>.Handler1<T1> handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler2
						: global::Rocks.Adornments<AdornmentsForHandler2, global::IExceptionConsumeContextCreateExpectations<T>.Handler2, global::System.Func<global::System.Exception>, global::System.Exception>, IAdornmentsForIExceptionConsumeContext<AdornmentsForHandler2>
					{ 
						public AdornmentsForHandler2(global::IExceptionConsumeContextCreateExpectations<T>.Handler2 handler)
							: base(handler) { }				
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "IExceptionConsumeContextT_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task MakeWithNameCollisionsInTypeParametersAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			using System.Threading.Tasks;
						
			[assembly: RockMake(typeof(IExceptionConsumeContext<>))]
			
			#nullable enable

			public interface IStory
			{
				string GetContent();
			}

			public interface IContext
			{
				Task RespondAsync<T>(T message);
			}

			public interface IConsumeContext<out TStory>
				: IContext
				where TStory : class, IStory
			{
				Task SetCompleted();
			}

			public interface IExceptionConsumeContext<out T>
				: IConsumeContext<T>
				where T : class, IStory
			{
				Exception Exception { get; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8775
			#nullable enable
			
			internal sealed class IExceptionConsumeContextMakeExpectations<T>
				where T : class, global::IStory
			{
				internal global::IExceptionConsumeContext<T> Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IExceptionConsumeContext<T>
				{
					public Mock()
					{
					}
					
					public global::System.Threading.Tasks.Task SetCompleted()
					{
						return global::System.Threading.Tasks.Task.CompletedTask;
					}
					public global::System.Threading.Tasks.Task RespondAsync<T1>(T1 @message)
					{
						return global::System.Threading.Tasks.Task.CompletedTask;
					}
					public global::System.Exception Exception
					{
						get => default!;
					}
				}
			}
			
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "IExceptionConsumeContextT_Rock_Make.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task CreateWhenConstraintsAndTypeCollisionExistAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockCreate(typeof(IService<>))]
			
			#nullable enable

			public interface IValues
			{
				string Obtain<T>(T key) where T : class;
			}

			public interface IService<T>
				: IValues
			{
				string Service(T data);
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			
			internal sealed class IServiceCreateExpectations<T>
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<T, string>, string>
				{
					public global::Rocks.Argument<T> @data { get; set; }
				}
				private global::Rocks.Handlers<global::IServiceCreateExpectations<T>.Handler0>? @handlers0;
				internal sealed class Handler1<T1>
					: global::Rocks.Handler<global::System.Func<T1, string>, string>
					where T1 : class
				{
					public global::Rocks.Argument<T1> @key { get; set; }
				}
				private global::Rocks.Handlers<global::Rocks.Handler>? @handlers1;
				#pragma warning restore CS8618
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IService<T>
				{
					public Mock(global::IServiceCreateExpectations<T> @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0)]
					public string Service(T @data)
					{
						if (this.Expectations.handlers0 is not null)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@data.IsValid(@data!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@data!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
					}
					
					[global::Rocks.MemberIdentifier(1)]
					public string Obtain<T1>(T1 @key)
						where T1 : class
					{
						if (this.Expectations.handlers1 is not null)
						{
							foreach (var @genericHandler in this.Expectations.handlers1)
							{
								if (@genericHandler is global::IServiceCreateExpectations<T>.Handler1<T1> @handler)
								{
									if (@handler.@key.IsValid(@key!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@key!) : @handler.ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(1)}");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
					}
					
					private global::IServiceCreateExpectations<T> Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IServiceCreateExpectations<T> expectations) =>
						this.Expectations = expectations;
					
					internal global::IServiceCreateExpectations<T>.Adornments.AdornmentsForHandler0 Service(global::Rocks.Argument<T> @data)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@data);
						
						var @handler = new global::IServiceCreateExpectations<T>.Handler0
						{
							@data = @data,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(@handler); }
						else { this.Expectations.handlers0.Add(@handler); }
						return new(@handler);
					}
					
					internal global::IServiceCreateExpectations<T>.Adornments.AdornmentsForHandler1<T1> Obtain<T1>(global::Rocks.Argument<T1> @key) where T1 : class
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@key);
						
						var @handler = new global::IServiceCreateExpectations<T>.Handler1<T1>
						{
							@key = @key,
						};
						
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(@handler); }
						else { this.Expectations.handlers1.Add(@handler); }
						return new(@handler);
					}
					
					private global::IServiceCreateExpectations<T> Expectations { get; }
				}
				
				internal global::IServiceCreateExpectations<T>.MethodExpectations Methods { get; }
				
				internal IServiceCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IService<T> Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				internal static class Adornments
				{
					public interface IAdornmentsForIService<TAdornments>
						: global::Rocks.IAdornments<TAdornments>
						where TAdornments : IAdornmentsForIService<TAdornments>
					{ }
					
					public sealed class AdornmentsForHandler0
						: global::Rocks.Adornments<AdornmentsForHandler0, global::IServiceCreateExpectations<T>.Handler0, global::System.Func<T, string>, string>, IAdornmentsForIService<AdornmentsForHandler0>
					{ 
						public AdornmentsForHandler0(global::IServiceCreateExpectations<T>.Handler0 handler)
							: base(handler) { }				
					}
					public sealed class AdornmentsForHandler1<T1>
						: global::Rocks.Adornments<AdornmentsForHandler1<T1>, global::IServiceCreateExpectations<T>.Handler1<T1>, global::System.Func<T1, string>, string>, IAdornmentsForIService<AdornmentsForHandler1<T1>> where T1 : class
					{ 
						public AdornmentsForHandler1(global::IServiceCreateExpectations<T>.Handler1<T1> handler)
							: base(handler) { }				
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "IServiceT_Rock_Create.g.cs", generatedCode)],
			[]);
	}

	[Test]
	public static async Task MakeWhenConstraintsAndTypeCollisionExistAsync()
	{
		var code =
		  """
			using Rocks;
			using System;
			
			[assembly: RockMake(typeof(IService<>))]
			
			#nullable enable

			public interface IValues
			{
				string Obtain<T>(T key) where T : class;
			}

			public interface IService<T>
				: IValues
			{
				string Service(T data);
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8775
			#nullable enable
			
			internal sealed class IServiceMakeExpectations<T>
			{
				internal global::IService<T> Instance()
				{
					return new Mock();
				}
				
				private sealed class Mock
					: global::IService<T>
				{
					public Mock()
					{
					}
					
					public string Service(T @data)
					{
						return default!;
					}
					public string Obtain<T1>(T1 @key)
						where T1 : class
					{
						return default!;
					}
				}
			}
			
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			[(typeof(RockAttributeGenerator), "IServiceT_Rock_Make.g.cs", generatedCode)],
			[]);
	}
}