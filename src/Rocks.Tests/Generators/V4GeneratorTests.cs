using Microsoft.CodeAnalysis.Testing;
using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class V4GeneratorTests
{
	[Test]
	public static async Task GenerateReadOnlyPropertyAsync()
	{
		var code =
			"""
			using Rocks;

			[assembly: RockCreate<IHaveLotsOfMembers>]

			public interface IHaveLotsOfMembers
			{
				int SomeProp { get; }
				int SomeProp1 { get; }
				int SomeMethod();
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal sealed class IHaveLotsOfMembersCreateExpectations
				: global::Rocks.Expectations.ExpectationsV4
			{
				internal sealed class Handler0
					: global::Rocks.HandlerV4<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler1
					: global::Rocks.HandlerV4<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.HandlerV4<global::System.Func<int>, int>
				{ }
				
				private readonly global::System.Collections.Generic.List<global::IHaveLotsOfMembersCreateExpectations.Handler0> @handlers0 = new();
				private readonly global::System.Collections.Generic.List<global::IHaveLotsOfMembersCreateExpectations.Handler1> @handlers1 = new();
				private readonly global::System.Collections.Generic.List<global::IHaveLotsOfMembersCreateExpectations.Handler2> @handlers2 = new();
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						failures.AddRange(this.Verify(handlers0));
						failures.AddRange(this.Verify(handlers1));
						failures.AddRange(this.Verify(handlers2));
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class RockIHaveLotsOfMembers
					: global::IHaveLotsOfMembers
				{
					public RockIHaveLotsOfMembers(global::IHaveLotsOfMembersCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "int SomeMethod()")]
					public int SomeMethod()
					{
						if (this.Expectations.handlers0.Count > 0)
						{
							var @handler = this.Expectations.handlers0[0];
							@handler.CallCount++;
							var @result = @handler.Callback?.Invoke() ?? @handler.ReturnValue;
							return @result!;
						}
						
						throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for int SomeMethod()");
					}
					
					[global::Rocks.MemberIdentifier(1, "get_SomeProp()")]
					public int SomeProp
					{
						get
						{
							if (this.Expectations.handlers1.Count > 0)
							{
								var @handler = this.Expectations.handlers1[0];
								@handler.CallCount++;
								var @result = @handler.Callback?.Invoke() ?? @handler.ReturnValue;
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for get_SomeProp())");
						}
					}
					[global::Rocks.MemberIdentifier(2, "get_SomeProp1()")]
					public int SomeProp1
					{
						get
						{
							if (this.Expectations.handlers2.Count > 0)
							{
								var @handler = this.Expectations.handlers2[0];
								@handler.CallCount++;
								var @result = @handler.Callback?.Invoke() ?? @handler.ReturnValue;
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for get_SomeProp1())");
						}
					}
					
					private global::IHaveLotsOfMembersCreateExpectations Expectations { get; }
				}
				
				internal sealed class IHaveLotsOfMembersMethodExpectations
				{
					internal IHaveLotsOfMembersMethodExpectations(global::IHaveLotsOfMembersCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.AdornmentsV4<global::IHaveLotsOfMembersCreateExpectations.Handler0, global::System.Func<int>, int> SomeMethod()
					{
						var handler = new global::IHaveLotsOfMembersCreateExpectations.Handler0();
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					private global::IHaveLotsOfMembersCreateExpectations Expectations { get; }
				}
				
				internal sealed class IHaveLotsOfMembersPropertyExpectations
				{
					internal sealed class IHaveLotsOfMembersPropertyGetterExpectations
					{
						internal IHaveLotsOfMembersPropertyGetterExpectations(global::IHaveLotsOfMembersCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.AdornmentsV4<global::IHaveLotsOfMembersCreateExpectations.Handler1, global::System.Func<int>, int> SomeProp()
						{
							var handler = new global::IHaveLotsOfMembersCreateExpectations.Handler1();
							this.Expectations.handlers1.Add(handler);
							return new(handler);
						}
						internal global::Rocks.AdornmentsV4<global::IHaveLotsOfMembersCreateExpectations.Handler2, global::System.Func<int>, int> SomeProp1()
						{
							var handler = new global::IHaveLotsOfMembersCreateExpectations.Handler2();
							this.Expectations.handlers2.Add(handler);
							return new(handler);
						}
						private global::IHaveLotsOfMembersCreateExpectations Expectations { get; }
					}
					
					
					internal IHaveLotsOfMembersPropertyExpectations(global::IHaveLotsOfMembersCreateExpectations expectations) =>
						(this.Getters) = (new(expectations));
					
					internal global::IHaveLotsOfMembersCreateExpectations.IHaveLotsOfMembersPropertyExpectations.IHaveLotsOfMembersPropertyGetterExpectations Getters { get; }
				}
				
				
				internal global::IHaveLotsOfMembersCreateExpectations.IHaveLotsOfMembersMethodExpectations Methods { get; }
				internal global::IHaveLotsOfMembersCreateExpectations.IHaveLotsOfMembersPropertyExpectations Properties { get; }
				
				internal IHaveLotsOfMembersCreateExpectations() =>
					(this.Methods, this.Properties) = (new(this), new(this));
				
				internal global::IHaveLotsOfMembers Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new RockIHaveLotsOfMembers(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IHaveLotsOfMembers_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateOldWayAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			public sealed class Holder { }

			public interface ITest
			{
				void NoArgumentsNoReturn();
				void ArgumentsNoReturn(Holder holder, string value);

				int NoArgumentsReturn();
				int ArgumentsReturn(Holder holder, string value);
			
				Guid Data { get; set; }

				Holder this[long index] { get; set; }

				event EventHandler Test;
			}

			public static class Mocker
			{
				public static void Go() => Rock.Create<ITest>();
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal static class CreateExpectationsOfITestExtensions
			{
				internal static global::Rocks.Expectations.MethodExpectations<global::ITest> Methods(this global::Rocks.Expectations.Expectations<global::ITest> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.PropertyExpectations<global::ITest> Properties(this global::Rocks.Expectations.Expectations<global::ITest> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.PropertyGetterExpectations<global::ITest> Getters(this global::Rocks.Expectations.PropertyExpectations<global::ITest> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.PropertySetterExpectations<global::ITest> Setters(this global::Rocks.Expectations.PropertyExpectations<global::ITest> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.IndexerExpectations<global::ITest> Indexers(this global::Rocks.Expectations.Expectations<global::ITest> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.IndexerGetterExpectations<global::ITest> Getters(this global::Rocks.Expectations.IndexerExpectations<global::ITest> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.IndexerSetterExpectations<global::ITest> Setters(this global::Rocks.Expectations.IndexerExpectations<global::ITest> @self) =>
					new(@self);
				
				internal static global::ITest Instance(this global::Rocks.Expectations.Expectations<global::ITest> @self)
				{
					if (!@self.WasInstanceInvoked)
					{
						@self.WasInstanceInvoked = true;
						var @mock = new RockITest(@self);
						@self.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				private sealed class RockITest
					: global::ITest, global::Rocks.IRaiseEvents
				{
					private readonly global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<global::Rocks.HandlerInformation>> handlers;
					
					public RockITest(global::Rocks.Expectations.Expectations<global::ITest> @expectations)
					{
						this.handlers = @expectations.Handlers;
					}
					
					[global::Rocks.MemberIdentifier(0, "void NoArgumentsNoReturn()")]
					public void NoArgumentsNoReturn()
					{
						if (this.handlers.TryGetValue(0, out var @methodHandlers))
						{
							var @methodHandler = @methodHandlers[0];
							@methodHandler.IncrementCallCount();
							if (@methodHandler.Method is not null)
							{
								((global::System.Action)@methodHandler.Method)();
							}
							
							@methodHandler.RaiseEvents(this);
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void NoArgumentsNoReturn()");
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "void ArgumentsNoReturn(global::Holder @holder, string @value)")]
					public void ArgumentsNoReturn(global::Holder @holder, string @value)
					{
						if (this.handlers.TryGetValue(1, out var @methodHandlers))
						{
							var @foundMatch = false;
							
							foreach (var @methodHandler in @methodHandlers)
							{
								if (((global::Rocks.Argument<global::Holder>)@methodHandler.Expectations[0]).IsValid(@holder!) &&
									((global::Rocks.Argument<string>)@methodHandler.Expectations[1]).IsValid(@value!))
								{
									@foundMatch = true;
									
									@methodHandler.IncrementCallCount();
									if (@methodHandler.Method is not null)
									{
										((global::System.Action<global::Holder, string>)@methodHandler.Method)(@holder!, @value!);
									}
									
									@methodHandler.RaiseEvents(this);
									break;
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void ArgumentsNoReturn(global::Holder @holder, string @value)");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void ArgumentsNoReturn(global::Holder @holder, string @value)");
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "int NoArgumentsReturn()")]
					public int NoArgumentsReturn()
					{
						if (this.handlers.TryGetValue(2, out var @methodHandlers))
						{
							var @methodHandler = @methodHandlers[0];
							@methodHandler.IncrementCallCount();
							var @result = @methodHandler.Method is not null ?
								((global::System.Func<int>)@methodHandler.Method)() :
								((global::Rocks.HandlerInformation<int>)@methodHandler).ReturnValue;
							@methodHandler.RaiseEvents(this);
							return @result!;
						}
						
						throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for int NoArgumentsReturn()");
					}
					
					[global::Rocks.MemberIdentifier(3, "int ArgumentsReturn(global::Holder @holder, string @value)")]
					public int ArgumentsReturn(global::Holder @holder, string @value)
					{
						if (this.handlers.TryGetValue(3, out var @methodHandlers))
						{
							foreach (var @methodHandler in @methodHandlers)
							{
								if (((global::Rocks.Argument<global::Holder>)@methodHandler.Expectations[0]).IsValid(@holder!) &&
									((global::Rocks.Argument<string>)@methodHandler.Expectations[1]).IsValid(@value!))
								{
									@methodHandler.IncrementCallCount();
									var @result = @methodHandler.Method is not null ?
										((global::System.Func<global::Holder, string, int>)@methodHandler.Method)(@holder!, @value!) :
										((global::Rocks.HandlerInformation<int>)@methodHandler).ReturnValue;
									@methodHandler.RaiseEvents(this);
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for int ArgumentsReturn(global::Holder @holder, string @value)");
						}
						
						throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for int ArgumentsReturn(global::Holder @holder, string @value)");
					}
					
					[global::Rocks.MemberIdentifier(4, "get_Data()")]
					[global::Rocks.MemberIdentifier(5, "set_Data(value)")]
					public global::System.Guid Data
					{
						get
						{
							if (this.handlers.TryGetValue(4, out var @methodHandlers))
							{
								var @methodHandler = @methodHandlers[0];
								@methodHandler.IncrementCallCount();
								var @result = @methodHandler.Method is not null ?
									((global::System.Func<global::System.Guid>)@methodHandler.Method)() :
									((global::Rocks.HandlerInformation<global::System.Guid>)@methodHandler).ReturnValue;
								@methodHandler.RaiseEvents(this);
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for get_Data())");
						}
						set
						{
							if (this.handlers.TryGetValue(5, out var @methodHandlers))
							{
								var @foundMatch = false;
								foreach (var @methodHandler in @methodHandlers)
								{
									if (((global::Rocks.Argument<global::System.Guid>)@methodHandler.Expectations[0]).IsValid(value!))
									{
										@methodHandler.IncrementCallCount();
										@foundMatch = true;
										
										if (@methodHandler.Method is not null)
										{
											((global::System.Action<global::System.Guid>)@methodHandler.Method)(value!);
										}
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_Data(value)");
										}
										
										@methodHandler.RaiseEvents(this);
										break;
									}
								}
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for set_Data(value)");
							}
						}
					}
					[global::Rocks.MemberIdentifier(6, "this[long @index]")]
					[global::Rocks.MemberIdentifier(7, "this[long @index]")]
					public global::Holder this[long @index]
					{
						get
						{
							if (this.handlers.TryGetValue(6, out var @methodHandlers))
							{
								foreach (var @methodHandler in @methodHandlers)
								{
									if (((global::Rocks.Argument<long>)@methodHandler.Expectations[0]).IsValid(@index!))
									{
										@methodHandler.IncrementCallCount();
										var @result = @methodHandler.Method is not null ?
											((global::System.Func<long, global::Holder>)@methodHandler.Method)(@index!) :
											((global::Rocks.HandlerInformation<global::Holder>)@methodHandler).ReturnValue;
										@methodHandler.RaiseEvents(this);
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[long @index]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[long @index])");
						}
						set
						{
							if (this.handlers.TryGetValue(7, out var @methodHandlers))
							{
								foreach (var @methodHandler in @methodHandlers)
								{
									if (((global::Rocks.Argument<long>)@methodHandler.Expectations[0]).IsValid(@index!) &&
										((global::Rocks.Argument<global::Holder>)@methodHandler.Expectations[1]).IsValid(@value!))
									{
										@methodHandler.IncrementCallCount();
										if (@methodHandler.Method is not null)
										{
											((global::System.Action<long, global::Holder>)@methodHandler.Method)(@index!, @value!);
										}
										
										@methodHandler.RaiseEvents(this);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[long @index]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[long @index])");
						}
					}
					
					#pragma warning disable CS0067
					public event global::System.EventHandler? Test;
					#pragma warning restore CS0067
					
					void global::Rocks.IRaiseEvents.Raise(string @fieldName, object @args)
					{
						var @thisType = this.GetType();
						var @eventDelegate = (global::System.MulticastDelegate)thisType.GetField(@fieldName, 
							global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.NonPublic)!.GetValue(this)!;
						
						if (@eventDelegate is not null)
						{
							foreach (var @handler in @eventDelegate.GetInvocationList())
							{
								@handler.Method.Invoke(@handler.Target, new object[]{this, @args});
							}
						}
					}
				}
			}
			
			internal static class MethodExpectationsOfITestExtensions
			{
				internal static global::Rocks.MethodAdornments<global::ITest, global::System.Action> NoArgumentsNoReturn(this global::Rocks.Expectations.MethodExpectations<global::ITest> @self) =>
					new global::Rocks.MethodAdornments<global::ITest, global::System.Action>(@self.Add(0, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
				internal static global::Rocks.MethodAdornments<global::ITest, global::System.Action<global::Holder, string>> ArgumentsNoReturn(this global::Rocks.Expectations.MethodExpectations<global::ITest> @self, global::Rocks.Argument<global::Holder> @holder, global::Rocks.Argument<string> @value)
				{
					global::System.ArgumentNullException.ThrowIfNull(@holder);
					global::System.ArgumentNullException.ThrowIfNull(@value);
					return new global::Rocks.MethodAdornments<global::ITest, global::System.Action<global::Holder, string>>(@self.Add(1, new global::System.Collections.Generic.List<global::Rocks.Argument>(2) { @holder, @value }));
				}
				internal static global::Rocks.MethodAdornments<global::ITest, global::System.Func<int>, int> NoArgumentsReturn(this global::Rocks.Expectations.MethodExpectations<global::ITest> @self) =>
					new global::Rocks.MethodAdornments<global::ITest, global::System.Func<int>, int>(@self.Add<int>(2, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
				internal static global::Rocks.MethodAdornments<global::ITest, global::System.Func<global::Holder, string, int>, int> ArgumentsReturn(this global::Rocks.Expectations.MethodExpectations<global::ITest> @self, global::Rocks.Argument<global::Holder> @holder, global::Rocks.Argument<string> @value)
				{
					global::System.ArgumentNullException.ThrowIfNull(@holder);
					global::System.ArgumentNullException.ThrowIfNull(@value);
					return new global::Rocks.MethodAdornments<global::ITest, global::System.Func<global::Holder, string, int>, int>(@self.Add<int>(3, new global::System.Collections.Generic.List<global::Rocks.Argument>(2) { @holder, @value }));
				}
			}
			
			internal static class PropertyGetterExpectationsOfITestExtensions
			{
				internal static global::Rocks.PropertyAdornments<global::ITest, global::System.Func<global::System.Guid>, global::System.Guid> Data(this global::Rocks.Expectations.PropertyGetterExpectations<global::ITest> @self) =>
					new global::Rocks.PropertyAdornments<global::ITest, global::System.Func<global::System.Guid>, global::System.Guid>(@self.Add<global::System.Guid>(4, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
			}
			internal static class PropertySetterExpectationsOfITestExtensions
			{
				internal static global::Rocks.PropertyAdornments<global::ITest, global::System.Action<global::System.Guid>> Data(this global::Rocks.Expectations.PropertySetterExpectations<global::ITest> @self, global::Rocks.Argument<global::System.Guid> @value) =>
					new global::Rocks.PropertyAdornments<global::ITest, global::System.Action<global::System.Guid>>(@self.Add(5, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @value }));
			}
			internal static class IndexerGetterExpectationsOfITestExtensions
			{
				internal static global::Rocks.IndexerAdornments<global::ITest, global::System.Func<long, global::Holder>, global::Holder> This(this global::Rocks.Expectations.IndexerGetterExpectations<global::ITest> @self, global::Rocks.Argument<long> @index)
				{
					global::System.ArgumentNullException.ThrowIfNull(@index);
					return new global::Rocks.IndexerAdornments<global::ITest, global::System.Func<long, global::Holder>, global::Holder>(@self.Add<global::Holder>(6, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @index }));
				}
			}
			internal static class IndexerSetterExpectationsOfITestExtensions
			{
				internal static global::Rocks.IndexerAdornments<global::ITest, global::System.Action<long, global::Holder>> This(this global::Rocks.Expectations.IndexerSetterExpectations<global::ITest> @self, global::Rocks.Argument<global::Holder> @value, global::Rocks.Argument<long> @index)
				{
					global::System.ArgumentNullException.ThrowIfNull(@index);
					global::System.ArgumentNullException.ThrowIfNull(@value);
					return new global::Rocks.IndexerAdornments<global::ITest, global::System.Action<long, global::Holder>>(self.Add(7, new global::System.Collections.Generic.List<global::Rocks.Argument>(2) { @index, @value }));
				}
			}
			
			internal static class MethodAdornmentsOfITestExtensions
			{
				internal static global::Rocks.MethodAdornments<global::ITest, TCallback, TReturn> RaisesTest<TCallback, TReturn>(this global::Rocks.MethodAdornments<global::ITest, TCallback, TReturn> @self, global::System.EventArgs @args)
					where TCallback : global::System.Delegate
				{
					@self.Handler.AddRaiseEvent(new("Test", @args));
					return @self;
				}
				internal static global::Rocks.MethodAdornments<global::ITest, TCallback> RaisesTest<TCallback>(this global::Rocks.MethodAdornments<global::ITest, TCallback> @self, global::System.EventArgs @args)
					where TCallback : global::System.Delegate
				{
					@self.Handler.AddRaiseEvent(new("Test", @args));
					return @self;
				}
			}
			
			internal static class PropertyAdornmentsOfITestExtensions
			{
				internal static global::Rocks.PropertyAdornments<global::ITest, TCallback, TReturn> RaisesTest<TCallback, TReturn>(this global::Rocks.PropertyAdornments<global::ITest, TCallback, TReturn> @self, global::System.EventArgs @args)
					where TCallback : global::System.Delegate
				{
					@self.Handler.AddRaiseEvent(new("Test", @args));
					return @self;
				}
				internal static global::Rocks.PropertyAdornments<global::ITest, TCallback> RaisesTest<TCallback>(this global::Rocks.PropertyAdornments<global::ITest, TCallback> @self, global::System.EventArgs @args)
					where TCallback : global::System.Delegate
				{
					@self.Handler.AddRaiseEvent(new("Test", @args));
					return @self;
				}
			}
			
			internal static class IndexerAdornmentsOfITestExtensions
			{
				internal static global::Rocks.IndexerAdornments<global::ITest, TCallback, TReturn> RaisesTest<TCallback, TReturn>(this global::Rocks.IndexerAdornments<global::ITest, TCallback, TReturn> @self, global::System.EventArgs @args)
					where TCallback : global::System.Delegate
				{
					@self.Handler.AddRaiseEvent(new("Test", @args));
					return @self;
				}
				internal static global::Rocks.IndexerAdornments<global::ITest, TCallback> RaisesTest<TCallback>(this global::Rocks.IndexerAdornments<global::ITest, TCallback> @self, global::System.EventArgs @args)
					where TCallback : global::System.Delegate
				{
					@self.Handler.AddRaiseEvent(new("Test", @args));
					return @self;
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockCreateGenerator>(code,
			new[] { (typeof(RockCreateGenerator), "ITest_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWithInterfaceAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<ITest>()]

			public sealed class Holder { }

			public interface ITest
			{
				void NoArgumentsNoReturn();
				void ArgumentsNoReturn(Holder holder, string value);

				int NoArgumentsReturn();
				int ArgumentsReturn(Holder holder, string value);
			
				Guid Data { get; set; }

				Holder this[long index] { get; set; }

				event EventHandler Test;
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal sealed class ITestCreateExpectations
				: global::Rocks.Expectations.ExpectationsV4
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.HandlerV4<global::System.Action>
				{ }
				
				internal sealed class Handler1
					: global::Rocks.HandlerV4<global::System.Action<global::Holder, string>>
				{
					public global::Rocks.Argument<global::Holder> holder { get; set; }
					public global::Rocks.Argument<string> value { get; set; }
				}
				
				internal sealed class Handler2
					: global::Rocks.HandlerV4<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.HandlerV4<global::System.Func<global::Holder, string, int>, int>
				{
					public global::Rocks.Argument<global::Holder> holder { get; set; }
					public global::Rocks.Argument<string> value { get; set; }
				}
				
				internal sealed class Handler4
					: global::Rocks.HandlerV4<global::System.Func<global::System.Guid>, global::System.Guid>
				{ }
				
				internal sealed class Handler5
					: global::Rocks.HandlerV4<global::System.Action<global::System.Guid>>
				{
					public global::Rocks.Argument<global::System.Guid> value { get; set; }
				}
				
				internal sealed class Handler6
					: global::Rocks.HandlerV4<global::System.Func<long, global::Holder>, global::Holder>
				{
					public global::Rocks.Argument<long> index { get; set; }
				}
				
				internal sealed class Handler7
					: global::Rocks.HandlerV4<global::System.Action<long, global::Holder>>
				{
					public global::Rocks.Argument<long> index { get; set; }
					public global::Rocks.Argument<global::Holder> value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private readonly global::System.Collections.Generic.List<global::ITestCreateExpectations.Handler0> @handlers0 = new();
				private readonly global::System.Collections.Generic.List<global::ITestCreateExpectations.Handler1> @handlers1 = new();
				private readonly global::System.Collections.Generic.List<global::ITestCreateExpectations.Handler2> @handlers2 = new();
				private readonly global::System.Collections.Generic.List<global::ITestCreateExpectations.Handler3> @handlers3 = new();
				private readonly global::System.Collections.Generic.List<global::ITestCreateExpectations.Handler4> @handlers4 = new();
				private readonly global::System.Collections.Generic.List<global::ITestCreateExpectations.Handler5> @handlers5 = new();
				private readonly global::System.Collections.Generic.List<global::ITestCreateExpectations.Handler6> @handlers6 = new();
				private readonly global::System.Collections.Generic.List<global::ITestCreateExpectations.Handler7> @handlers7 = new();
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						failures.AddRange(this.Verify(handlers0));
						failures.AddRange(this.Verify(handlers1));
						failures.AddRange(this.Verify(handlers2));
						failures.AddRange(this.Verify(handlers3));
						failures.AddRange(this.Verify(handlers4));
						failures.AddRange(this.Verify(handlers5));
						failures.AddRange(this.Verify(handlers6));
						failures.AddRange(this.Verify(handlers7));
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class RockITest
					: global::ITest, global::Rocks.IRaiseEvents
				{
					public RockITest(global::ITestCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "void NoArgumentsNoReturn()")]
					public void NoArgumentsNoReturn()
					{
						if (this.Expectations.handlers0.Count > 0)
						{
							var @handler = this.Expectations.handlers0[0];
							@handler.CallCount++;
							@handler.Callback?.Invoke();
							@handler.RaiseEvents(this);
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void NoArgumentsNoReturn()");
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "void ArgumentsNoReturn(global::Holder @holder, string @value)")]
					public void ArgumentsNoReturn(global::Holder @holder, string @value)
					{
						if (this.Expectations.handlers1.Count > 0)
						{
							var @foundMatch = false;
							
							foreach (var @handler in this.Expectations.handlers1)
							{
								if (@handler.holder.IsValid(@holder!) &&
									@handler.value.IsValid(@value!))
								{
									@foundMatch = true;
									
									@handler.CallCount++;
									@handler.Callback?.Invoke(@holder!, @value!);
									@handler.RaiseEvents(this);
									break;
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void ArgumentsNoReturn(global::Holder @holder, string @value)");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void ArgumentsNoReturn(global::Holder @holder, string @value)");
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "int NoArgumentsReturn()")]
					public int NoArgumentsReturn()
					{
						if (this.Expectations.handlers2.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback?.Invoke() ?? @handler.ReturnValue;
							@handler.RaiseEvents(this);
							return @result!;
						}
						
						throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for int NoArgumentsReturn()");
					}
					
					[global::Rocks.MemberIdentifier(3, "int ArgumentsReturn(global::Holder @holder, string @value)")]
					public int ArgumentsReturn(global::Holder @holder, string @value)
					{
						if (this.Expectations.handlers3.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers3)
							{
								if (@handler.holder.IsValid(@holder!) &&
									@handler.value.IsValid(@value!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback?.Invoke(@holder!, @value!) ?? @handler.ReturnValue;
									@handler.RaiseEvents(this);
									return @result!;
								}
							}
						}
						
						throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for int ArgumentsReturn(global::Holder @holder, string @value)");
					}
					
					[global::Rocks.MemberIdentifier(4, "get_Data()")]
					[global::Rocks.MemberIdentifier(5, "set_Data(value)")]
					public global::System.Guid Data
					{
						get
						{
							if (this.Expectations.handlers4.Count > 0)
							{
								var @handler = this.Expectations.handlers4[0];
								@handler.CallCount++;
								var @result = @handler.Callback?.Invoke() ?? @handler.ReturnValue;
								@handler.RaiseEvents(this);
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for get_Data())");
						}
						set
						{
							if (this.Expectations.handlers5.Count > 0)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers5)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_Data(value)");
										}
										
										@handler.RaiseEvents(this);
										break;
									}
								}
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for set_Data(value)");
							}
						}
					}
					
					[global::Rocks.MemberIdentifier(6, "this[long @index]")]
					[global::Rocks.MemberIdentifier(7, "this[long @index]")]
					public global::Holder this[long @index]
					{
						get
						{
							if (this.Expectations.handlers6.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers6)
								{
									if (@handler.index.IsValid(@index!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback?.Invoke(@index!) ?? @handler.ReturnValue;
										@handler.RaiseEvents(this);
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[long @index]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[long @index])");
						}
						set
						{
							if (this.Expectations.handlers7.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers7)
								{
									if (@handler.index.IsValid(@index!) &&
										@handler.value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@index!, @value!);
										@handler.RaiseEvents(this);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[long @index]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[long @index])");
						}
					}
					
					#pragma warning disable CS0067
					public event global::System.EventHandler? Test;
					#pragma warning restore CS0067
					
					void global::Rocks.IRaiseEvents.Raise(string @fieldName, object @args)
					{
						var @thisType = this.GetType();
						var @eventDelegate = (global::System.MulticastDelegate)thisType.GetField(@fieldName, 
							global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.NonPublic)!.GetValue(this)!;
						
						if (@eventDelegate is not null)
						{
							foreach (var @handler in @eventDelegate.GetInvocationList())
							{
								@handler.Method.Invoke(@handler.Target, new object[]{this, @args});
							}
						}
					}
					
					private global::ITestCreateExpectations Expectations { get; }
				}
				
				internal sealed class ITestMethodExpectations
				{
					internal ITestMethodExpectations(global::ITestCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.AdornmentsV4<global::ITestCreateExpectations.Handler0, global::System.Action> NoArgumentsNoReturn()
					{
						var handler = new global::ITestCreateExpectations.Handler0();
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.AdornmentsV4<global::ITestCreateExpectations.Handler1, global::System.Action<global::Holder, string>> ArgumentsNoReturn(global::Rocks.Argument<global::Holder> @holder, global::Rocks.Argument<string> @value)
					{
						global::System.ArgumentNullException.ThrowIfNull(@holder);
						global::System.ArgumentNullException.ThrowIfNull(@value);
						
						var handler = new global::ITestCreateExpectations.Handler1
						{
							holder = @holder,
							value = @value,
						};
						
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.AdornmentsV4<global::ITestCreateExpectations.Handler2, global::System.Func<int>, int> NoArgumentsReturn()
					{
						var handler = new global::ITestCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.AdornmentsV4<global::ITestCreateExpectations.Handler3, global::System.Func<global::Holder, string, int>, int> ArgumentsReturn(global::Rocks.Argument<global::Holder> @holder, global::Rocks.Argument<string> @value)
					{
						global::System.ArgumentNullException.ThrowIfNull(@holder);
						global::System.ArgumentNullException.ThrowIfNull(@value);
						
						var handler = new global::ITestCreateExpectations.Handler3
						{
							holder = @holder,
							value = @value,
						};
						
						this.Expectations.handlers3.Add(handler);
						return new(handler);
					}
					
					private global::ITestCreateExpectations Expectations { get; }
				}
				
				internal sealed class ITestPropertyExpectations
				{
					internal sealed class ITestPropertyGetterExpectations
					{
						internal ITestPropertyGetterExpectations(global::ITestCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.AdornmentsV4<global::ITestCreateExpectations.Handler4, global::System.Func<global::System.Guid>, global::System.Guid> Data()
						{
							var handler = new global::ITestCreateExpectations.Handler4();
							this.Expectations.handlers4.Add(handler);
							return new(handler);
						}
						private global::ITestCreateExpectations Expectations { get; }
					}
					
					internal sealed class ITestPropertySetterExpectations
					{
						internal ITestPropertySetterExpectations(global::ITestCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.AdornmentsV4<global::ITestCreateExpectations.Handler5, global::System.Action<global::System.Guid>> Data(global::Rocks.Argument<global::System.Guid> @value)
						{
							var handler = new global::ITestCreateExpectations.Handler5
							{
								value = @value,
							};
						
							this.Expectations.handlers5.Add(handler);
							return new(handler);
						}
						private global::ITestCreateExpectations Expectations { get; }
					}
					
					internal ITestPropertyExpectations(global::ITestCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::ITestCreateExpectations.ITestPropertyExpectations.ITestPropertyGetterExpectations Getters { get; }
					internal global::ITestCreateExpectations.ITestPropertyExpectations.ITestPropertySetterExpectations Setters { get; }
				}
				
				internal sealed class ITestIndexerExpectations
				{
					internal sealed class ITestIndexerGetterExpectations
					{
						internal ITestIndexerGetterExpectations(global::ITestCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.AdornmentsV4<global::ITestCreateExpectations.Handler6, global::System.Func<long, global::Holder>, global::Holder> This(global::Rocks.Argument<long> @index)
						{
							global::System.ArgumentNullException.ThrowIfNull(@index);
							
							var handler = new global::ITestCreateExpectations.Handler6
							{
								index = @index,
							};
							
							this.Expectations.handlers6.Add(handler);
							return new(handler);
						}
						private global::ITestCreateExpectations Expectations { get; }
					}
					
					internal sealed class ITestIndexerSetterExpectations
					{
						internal ITestIndexerSetterExpectations(global::ITestCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.AdornmentsV4<global::ITestCreateExpectations.Handler7, global::System.Action<long, global::Holder>> This(global::Rocks.Argument<global::Holder> @value, global::Rocks.Argument<long> @index)
						{
							global::System.ArgumentNullException.ThrowIfNull(@index);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var handler = new global::ITestCreateExpectations.Handler7
							{
								index = @index,
								value = @value,
							};
							
							this.Expectations.handlers7.Add(handler);
							return new(handler);
						}
						private global::ITestCreateExpectations Expectations { get; }
					}
					
					internal ITestIndexerExpectations(global::ITestCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::ITestCreateExpectations.ITestIndexerExpectations.ITestIndexerGetterExpectations Getters { get; }
					internal global::ITestCreateExpectations.ITestIndexerExpectations.ITestIndexerSetterExpectations Setters { get; }
				}
				
				internal global::ITestCreateExpectations.ITestMethodExpectations Methods { get; }
				internal global::ITestCreateExpectations.ITestPropertyExpectations Properties { get; }
				internal global::ITestCreateExpectations.ITestIndexerExpectations Indexers { get; }
				
				internal ITestCreateExpectations() =>
					(this.Methods, this.Properties, this.Indexers) = (new(this), new(this), new(this));
				
				internal global::ITest Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new RockITest(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "ITest_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}
}