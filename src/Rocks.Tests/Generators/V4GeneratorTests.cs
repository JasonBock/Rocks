using Microsoft.CodeAnalysis.Testing;
using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class V4GeneratorTests
{
	[Test]
	public static async Task GenerateWithInterfaceAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: Rock<ITest>(BuildType.Create)]

			public sealed class Holder { }

			public interface ITest
			{
				void Work();
				int Process(string value);

				Guid Data { get; set; }

				Holder this[long index] { get; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal sealed class ITestCreateExpectations
				: global::Rocks.Expectations
			{
				internal sealed class Handler0
					: global::Rocks.HandlerV4<global::System.Action>
				{ }
				
				internal sealed class Handler1
					: global::Rocks.HandlerV4<global::System.Func<string, int>, int>
				{
					#pragma warning disable CS8618
					public global::Rocks.Argument<string> value { get; set; }
					#pragma warning restore CS8618
				}
				
				internal sealed class Handler2
					: global::Rocks.HandlerV4<global::System.Func<global::System.Guid>, global::System.Guid>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.HandlerV4<global::System.Action<global::System.Guid>>
				{
					#pragma warning disable CS8618
					public global::Rocks.Argument<global::System.Guid> value { get; set; }
					#pragma warning restore CS8618
				}
				
				internal sealed class Handler4
					: global::Rocks.HandlerV4<global::System.Func<long, global::Holder>, global::Holder>
				{
					#pragma warning disable CS8618
					public global::Rocks.Argument<long> index { get; set; }
					#pragma warning restore CS8618
				}
				
				private readonly global::System.Collections.Generic.List<global::ITestCreateExpectations.Handler0> @handlers0 = new();
				private readonly global::System.Collections.Generic.List<global::ITestCreateExpectations.Handler1> @handlers1 = new();
				private readonly global::System.Collections.Generic.List<global::ITestCreateExpectations.Handler2> @handlers2 = new();
				private readonly global::System.Collections.Generic.List<global::ITestCreateExpectations.Handler4> @handlers4 = new();
				
				internal global::ITestCreateExpectations.ITestMethodExpectations Methods { get; }
				internal global::ITestCreateExpectations.ITestPropertyExpectations Properties { get; }
				internal global::ITestCreateExpectations.ITestIndexerExpectations Indexers { get; }
			}
			
			""";

		await TestAssistants.RunAsync<RockGenerator>(code,
			new[] { (typeof(RockGenerator), "ITest_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}
}