using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Testing;
using Mono.Cecil;
using Mono.Cecil.Cil;
using NUnit.Framework;
using NUnit.Framework.Internal;
using Rocks.Diagnostics;

namespace Rocks.Tests.Generators;

public static class NonPublicMembersGeneratorV4Tests
{
	[Test]
	public static async Task CreateWithInaccesibleTypesUsedOnConstraintsAsync()
	{
		var code =
			"""
			using Rocks;
			
			[assembly: RockCreate<ArgumentMapper>]

			public abstract class ArgumentMapper
			{
				protected interface ISource { }

				protected abstract void NotUsingSource<T>()
					where T : struct, ISource;
			}
			""";

		var diagnostic = new DiagnosticResult(TypeHasInaccessibleAbstractMembersDiagnostic.Id, DiagnosticSeverity.Error)
			.WithSpan(3, 12, 3, 38);
		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			Enumerable.Empty<(Type, string, string)>(),
			new[] { diagnostic }).ConfigureAwait(false);
	}

	[Test]
	public static async Task CreateWithProtectedInternalPropertyAndMixedVisibilityAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockCreate<VisibilityIssues>]

			public abstract class VisibilityIssues
			{
				protected internal virtual bool OwnsHandle { get; protected set; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal sealed class VisibilityIssuesCreateExpectations
				: global::Rocks.Expectations.ExpectationsV4
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.HandlerV4<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.HandlerV4<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.HandlerV4<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.HandlerV4<global::System.Func<bool>, bool>
				{ }
				
				internal sealed class Handler4
					: global::Rocks.HandlerV4<global::System.Action<bool>>
				{
					public global::Rocks.Argument<bool> @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private readonly global::System.Collections.Generic.List<global::VisibilityIssuesCreateExpectations.Handler0> @handlers0 = new();
				private readonly global::System.Collections.Generic.List<global::VisibilityIssuesCreateExpectations.Handler1> @handlers1 = new();
				private readonly global::System.Collections.Generic.List<global::VisibilityIssuesCreateExpectations.Handler2> @handlers2 = new();
				private readonly global::System.Collections.Generic.List<global::VisibilityIssuesCreateExpectations.Handler3> @handlers3 = new();
				private readonly global::System.Collections.Generic.List<global::VisibilityIssuesCreateExpectations.Handler4> @handlers4 = new();
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						failures.AddRange(this.Verify(handlers0));
						failures.AddRange(this.Verify(handlers1));
						failures.AddRange(this.Verify(handlers2));
						failures.AddRange(this.Verify(handlers3));
						failures.AddRange(this.Verify(handlers4));
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class RockVisibilityIssues
					: global::VisibilityIssues
				{
					public RockVisibilityIssues(global::VisibilityIssuesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "get_OwnsHandle()")]
					[global::Rocks.MemberIdentifier(4, "set_OwnsHandle(value)")]
					protected internal override bool OwnsHandle
					{
						get
						{
							if (this.Expectations.handlers3.Count > 0)
							{
								var @handler = this.Expectations.handlers3[0];
								@handler.CallCount++;
								var @result = @handler.Callback?.Invoke() ?? @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.OwnsHandle;
							}
						}
						protected set
						{
							if (this.Expectations.handlers4.Count > 0)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers4)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_OwnsHandle(value)");
										}
										
										break;
									}
								}
							}
							else
							{
								base.OwnsHandle = value!;
							}
						}
					}
					
					private global::VisibilityIssuesCreateExpectations Expectations { get; }
				}
				
				internal sealed class VisibilityIssuesMethodExpectations
				{
					internal VisibilityIssuesMethodExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.AdornmentsV4<global::VisibilityIssuesCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::VisibilityIssuesCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.AdornmentsV4<global::VisibilityIssuesCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						var handler = new global::VisibilityIssuesCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.AdornmentsV4<global::VisibilityIssuesCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						var handler = new global::VisibilityIssuesCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					private global::VisibilityIssuesCreateExpectations Expectations { get; }
				}
				
				internal sealed class VisibilityIssuesPropertyExpectations
				{
					internal sealed class VisibilityIssuesPropertyGetterExpectations
					{
						internal VisibilityIssuesPropertyGetterExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.AdornmentsV4<global::VisibilityIssuesCreateExpectations.Handler3, global::System.Func<bool>, bool> OwnsHandle()
						{
							var handler = new global::VisibilityIssuesCreateExpectations.Handler3();
							this.Expectations.handlers3.Add(handler);
							return new(handler);
						}
						private global::VisibilityIssuesCreateExpectations Expectations { get; }
					}
					
					internal sealed class VisibilityIssuesPropertySetterExpectations
					{
						internal VisibilityIssuesPropertySetterExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.AdornmentsV4<global::VisibilityIssuesCreateExpectations.Handler4, global::System.Action<bool>> OwnsHandle(global::Rocks.Argument<bool> @value)
						{
							var handler = new global::VisibilityIssuesCreateExpectations.Handler4
							{
								value = @value,
							};
						
							this.Expectations.handlers4.Add(handler);
							return new(handler);
						}
						private global::VisibilityIssuesCreateExpectations Expectations { get; }
					}
					
					internal VisibilityIssuesPropertyExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::VisibilityIssuesCreateExpectations.VisibilityIssuesPropertyExpectations.VisibilityIssuesPropertyGetterExpectations Getters { get; }
					internal global::VisibilityIssuesCreateExpectations.VisibilityIssuesPropertyExpectations.VisibilityIssuesPropertySetterExpectations Setters { get; }
				}
				
				internal global::VisibilityIssuesCreateExpectations.VisibilityIssuesMethodExpectations Methods { get; }
				internal global::VisibilityIssuesCreateExpectations.VisibilityIssuesPropertyExpectations Properties { get; }
				
				internal VisibilityIssuesCreateExpectations() =>
					(this.Methods, this.Properties) = (new(this), new(this));
				
				internal global::VisibilityIssues Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new RockVisibilityIssues(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "VisibilityIssues_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}

	[Test]
	public static async Task MakeWithProtectedInternalPropertyAndMixedVisibilityAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockMake<VisibilityIssues>]

			public abstract class VisibilityIssues
			{
				protected internal virtual bool OwnsHandle { get; protected set; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class VisibilityIssuesMakeExpectations
			{
				internal global::VisibilityIssues Instance()
				{
					return new RockVisibilityIssues();
				}
				
				private sealed class RockVisibilityIssues
					: global::VisibilityIssues
				{
					public RockVisibilityIssues()
					{
					}
					
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override string? ToString()
					{
						return default!;
					}
					protected internal override bool OwnsHandle
					{
						get => default!;
						protected set { }
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "VisibilityIssues_Rock_Make.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}

	[Test]
	public static async Task CreateWithInternalAbstractMemberInDifferentAssemblyWithUnreferenceableNameAsync()
	{
		/*
		public abstract class InternalAbstractInvalidMember
		{
			public abstract void Valid();
			internal abstract void 4gbnwbnbspeclmzqvzf8egt7ef2ytrtdMCa();
		}
		*/

		using var assembly = AssemblyDefinition.CreateAssembly(
			new AssemblyNameDefinition("Invalid", Version.Parse("1.0.0.0")),
			"Invalid", ModuleKind.Dll);

		var type = new TypeDefinition("", "InternalAbstractInvalidMember",
			TypeAttributes.AnsiClass | TypeAttributes.BeforeFieldInit | TypeAttributes.Public | TypeAttributes.Abstract,
			assembly.MainModule.TypeSystem.Object);
		assembly.MainModule.Types.Add(type);

		var constructor = new MethodDefinition(".ctor",
			MethodAttributes.Family | MethodAttributes.HideBySig | MethodAttributes.RTSpecialName | MethodAttributes.SpecialName,
			assembly.MainModule.TypeSystem.Void);
		type.Methods.Add(constructor);
		var constructorILProcessor = constructor.Body.GetILProcessor();
		constructorILProcessor.Emit(OpCodes.Ldarg_0);
		constructorILProcessor.Emit(OpCodes.Call,
			assembly.MainModule.ImportReference(new MethodReference(".ctor", type.Module.TypeSystem.Void, type) { HasThis = true }));
		constructorILProcessor.Emit(OpCodes.Ret);

		var validMethod = new MethodDefinition("Valid",
			MethodAttributes.Public | MethodAttributes.HideBySig | MethodAttributes.Virtual | MethodAttributes.Abstract | MethodAttributes.NewSlot,
			assembly.MainModule.TypeSystem.Void);
		type.Methods.Add(validMethod);

		var invalidMethod = new MethodDefinition("4gbnwbnbspeclmzqvzf8egt7ef2ytrtdMCa",
			MethodAttributes.Assembly | MethodAttributes.HideBySig | MethodAttributes.Virtual | MethodAttributes.Abstract | MethodAttributes.NewSlot,
			assembly.MainModule.TypeSystem.Void);
		type.Methods.Add(invalidMethod);

		using var stream = new MemoryStream();
		assembly.Write(stream);
		stream.Position = 0;

		var reference = MetadataReference.CreateFromStream(stream);

		var code =
			"""
			using Rocks;

			[assembly: RockCreate<InternalAbstractInvalidMember>]
			""";

		var diagnostic = new DiagnosticResult(TypeHasInaccessibleAbstractMembersDiagnostic.Id, DiagnosticSeverity.Error)
			.WithSpan(3, 12, 3, 53);
		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			Enumerable.Empty<(Type, string, string)>(),
			new[] { diagnostic },
			additionalReferences: [reference]).ConfigureAwait(false);
	}

	[Test]
	public static async Task CreateWithInternalAbstractMemberInDifferentAssemblyAsync()
	{
		var source =
			"""
			public abstract class InternalAbstractMember
			{
				internal abstract void CannotSee(string a);
			}
			""";
		var sourceReferences = AppDomain.CurrentDomain.GetAssemblies()
			.Where(_ => !_.IsDynamic && !string.IsNullOrWhiteSpace(_.Location))
			.Select(_ => MetadataReference.CreateFromFile(_.Location))
			.Cast<MetadataReference>()
			.ToList();
		var sourceSyntaxTree = CSharpSyntaxTree.ParseText(source);
		var sourceCompilation = CSharpCompilation.Create("internal", new SyntaxTree[] { sourceSyntaxTree },
			sourceReferences,
			new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
		var sourceReference = sourceCompilation.ToMetadataReference()!;
		sourceReferences.Add(sourceReference);

		var code =
			"""
			using Rocks;

			[assembly: RockCreate<InternalAbstractMember>]
			""";

		var diagnostic = new DiagnosticResult(TypeHasInaccessibleAbstractMembersDiagnostic.Id, DiagnosticSeverity.Error)
			.WithSpan(3, 12, 3, 46);
		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			Enumerable.Empty<(Type, string, string)>(),
			new[] { diagnostic },
			additionalReferences: sourceReferences).ConfigureAwait(false);
	}

	[Test]
	public static async Task CreateWithProtectedInternalPropertyAndMixedVisibilityInDifferentAssemblyAsync()
	{
		var source =
			"""
			public abstract class VisibilityIssues
			{
				protected internal virtual bool OwnsHandle { get; protected set; }
			}
			""";
		var sourceReferences = AppDomain.CurrentDomain.GetAssemblies()
			.Where(_ => !_.IsDynamic && !string.IsNullOrWhiteSpace(_.Location))
			.Select(_ => MetadataReference.CreateFromFile(_.Location))
			.Cast<MetadataReference>()
			.ToList();
		var sourceSyntaxTree = CSharpSyntaxTree.ParseText(source);
		var sourceCompilation = CSharpCompilation.Create("internal", new SyntaxTree[] { sourceSyntaxTree },
			sourceReferences,
			new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
		var sourceReference = sourceCompilation.ToMetadataReference()!;
		sourceReferences.Add(sourceReference);

		var code =
			"""
			using Rocks;

			[assembly: RockCreate<VisibilityIssues>]
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal sealed class VisibilityIssuesCreateExpectations
				: global::Rocks.Expectations.ExpectationsV4
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.HandlerV4<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler1
					: global::Rocks.HandlerV4<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler2
					: global::Rocks.HandlerV4<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.HandlerV4<global::System.Func<bool>, bool>
				{ }
				
				internal sealed class Handler4
					: global::Rocks.HandlerV4<global::System.Action<bool>>
				{
					public global::Rocks.Argument<bool> @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private readonly global::System.Collections.Generic.List<global::VisibilityIssuesCreateExpectations.Handler0> @handlers0 = new();
				private readonly global::System.Collections.Generic.List<global::VisibilityIssuesCreateExpectations.Handler1> @handlers1 = new();
				private readonly global::System.Collections.Generic.List<global::VisibilityIssuesCreateExpectations.Handler2> @handlers2 = new();
				private readonly global::System.Collections.Generic.List<global::VisibilityIssuesCreateExpectations.Handler3> @handlers3 = new();
				private readonly global::System.Collections.Generic.List<global::VisibilityIssuesCreateExpectations.Handler4> @handlers4 = new();
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						failures.AddRange(this.Verify(handlers0));
						failures.AddRange(this.Verify(handlers1));
						failures.AddRange(this.Verify(handlers2));
						failures.AddRange(this.Verify(handlers3));
						failures.AddRange(this.Verify(handlers4));
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class RockVisibilityIssues
					: global::VisibilityIssues
				{
					public RockVisibilityIssues(global::VisibilityIssuesCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers0.Count > 0)
						{
							var @handler = this.Expectations.handlers0[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers1.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers1)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers2.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "get_OwnsHandle()")]
					[global::Rocks.MemberIdentifier(4, "set_OwnsHandle(value)")]
					protected override bool OwnsHandle
					{
						get
						{
							if (this.Expectations.handlers3.Count > 0)
							{
								var @handler = this.Expectations.handlers3[0];
								@handler.CallCount++;
								var @result = @handler.Callback?.Invoke() ?? @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.OwnsHandle;
							}
						}
						set
						{
							if (this.Expectations.handlers4.Count > 0)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers4)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_OwnsHandle(value)");
										}
										
										break;
									}
								}
							}
							else
							{
								base.OwnsHandle = value!;
							}
						}
					}
					
					private global::VisibilityIssuesCreateExpectations Expectations { get; }
				}
				
				internal sealed class VisibilityIssuesMethodExpectations
				{
					internal VisibilityIssuesMethodExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal new global::Rocks.AdornmentsV4<global::VisibilityIssuesCreateExpectations.Handler0, global::System.Func<string?>, string?> ToString()
					{
						var handler = new global::VisibilityIssuesCreateExpectations.Handler0();
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.AdornmentsV4<global::VisibilityIssuesCreateExpectations.Handler1, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::VisibilityIssuesCreateExpectations.Handler1
						{
							@obj = @obj,
						};
						
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.AdornmentsV4<global::VisibilityIssuesCreateExpectations.Handler2, global::System.Func<int>, int> GetHashCode()
					{
						var handler = new global::VisibilityIssuesCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					private global::VisibilityIssuesCreateExpectations Expectations { get; }
				}
				
				internal sealed class VisibilityIssuesPropertyExpectations
				{
					internal sealed class VisibilityIssuesPropertyGetterExpectations
					{
						internal VisibilityIssuesPropertyGetterExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.AdornmentsV4<global::VisibilityIssuesCreateExpectations.Handler3, global::System.Func<bool>, bool> OwnsHandle()
						{
							var handler = new global::VisibilityIssuesCreateExpectations.Handler3();
							this.Expectations.handlers3.Add(handler);
							return new(handler);
						}
						private global::VisibilityIssuesCreateExpectations Expectations { get; }
					}
					
					internal sealed class VisibilityIssuesPropertySetterExpectations
					{
						internal VisibilityIssuesPropertySetterExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.AdornmentsV4<global::VisibilityIssuesCreateExpectations.Handler4, global::System.Action<bool>> OwnsHandle(global::Rocks.Argument<bool> @value)
						{
							var handler = new global::VisibilityIssuesCreateExpectations.Handler4
							{
								value = @value,
							};
						
							this.Expectations.handlers4.Add(handler);
							return new(handler);
						}
						private global::VisibilityIssuesCreateExpectations Expectations { get; }
					}
					
					internal VisibilityIssuesPropertyExpectations(global::VisibilityIssuesCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::VisibilityIssuesCreateExpectations.VisibilityIssuesPropertyExpectations.VisibilityIssuesPropertyGetterExpectations Getters { get; }
					internal global::VisibilityIssuesCreateExpectations.VisibilityIssuesPropertyExpectations.VisibilityIssuesPropertySetterExpectations Setters { get; }
				}
				
				internal global::VisibilityIssuesCreateExpectations.VisibilityIssuesMethodExpectations Methods { get; }
				internal global::VisibilityIssuesCreateExpectations.VisibilityIssuesPropertyExpectations Properties { get; }
				
				internal VisibilityIssuesCreateExpectations() =>
					(this.Methods, this.Properties) = (new(this), new(this));
				
				internal global::VisibilityIssues Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new RockVisibilityIssues(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "VisibilityIssues_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>(),
			additionalReferences: sourceReferences).ConfigureAwait(false);
	}

	[Test]
	public static async Task MakeWithProtectedInternalPropertyAndMixedVisibilityInDifferentAssemblyAsync()
	{
		var source =
			"""
			public abstract class VisibilityIssues
			{
				protected internal virtual bool OwnsHandle { get; protected set; }
			}
			""";
		var sourceReferences = AppDomain.CurrentDomain.GetAssemblies()
			.Where(_ => !_.IsDynamic && !string.IsNullOrWhiteSpace(_.Location))
			.Select(_ =>
			{
				var location = _.Location;
				return MetadataReference.CreateFromFile(location);
			})
			.Cast<MetadataReference>()
			.ToList(); var sourceSyntaxTree = CSharpSyntaxTree.ParseText(source);
		var sourceCompilation = CSharpCompilation.Create("internal", new SyntaxTree[] { sourceSyntaxTree },
			sourceReferences,
			new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
		var sourceReference = sourceCompilation.ToMetadataReference()!;
		sourceReferences.Add(sourceReference);

		var code =
			"""
			using Rocks;

			[assembly: RockMake<VisibilityIssues>]
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class VisibilityIssuesMakeExpectations
			{
				internal global::VisibilityIssues Instance()
				{
					return new RockVisibilityIssues();
				}
				
				private sealed class RockVisibilityIssues
					: global::VisibilityIssues
				{
					public RockVisibilityIssues()
					{
					}
					
					public override string? ToString()
					{
						return default!;
					}
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					protected override bool OwnsHandle
					{
						get => default!;
						set { }
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "VisibilityIssues_Rock_Make.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>(),
			additionalReferences: sourceReferences).ConfigureAwait(false);
	}

	[Test]
	public static async Task CreateWithInternalVirtualMembersAsync()
	{
		var sourceCode =
			"""
			using System;

			public class HasInternalVirtual
			{
				public HasInternalVirtual(string key) { }
				internal HasInternalVirtual(int key) { }
			
				public virtual void PublicVirtualMethod() { }
				internal virtual void InternalVirtualMethod() { }

				public virtual string PublicVirtualProperty { get; }
				internal virtual string InternalVirtualProperty { get; }

				public virtual string this[string key] { get => "a"; }
				internal virtual string this[int key] { get => "a"; }

				public virtual event EventHandler PublicVirtualEvent;
				internal virtual event EventHandler PublicVirtualEvent;
			}			
			""";

		var sourceSyntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
		var sourceReferences = AppDomain.CurrentDomain.GetAssemblies()
			.Where(_ => !_.IsDynamic && !string.IsNullOrWhiteSpace(_.Location))
			.Select(_ =>
			{
				var location = _.Location;
				return MetadataReference.CreateFromFile(location);
			})
			.Cast<MetadataReference>()
			.ToList();
		var sourceCompilation = CSharpCompilation.Create("SourceAssembly", new SyntaxTree[] { sourceSyntaxTree },
			sourceReferences, new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
		var sourceReference = sourceCompilation.ToMetadataReference()!;

		sourceReferences.Add(sourceReference);

		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<HasInternalVirtual>]
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal sealed class HasInternalVirtualCreateExpectations
				: global::Rocks.Expectations.ExpectationsV4
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.HandlerV4<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler1
					: global::Rocks.HandlerV4<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler2
					: global::Rocks.HandlerV4<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.HandlerV4<global::System.Action>
				{ }
				
				internal sealed class Handler4
					: global::Rocks.HandlerV4<global::System.Func<string>, string>
				{ }
				
				internal sealed class Handler5
					: global::Rocks.HandlerV4<global::System.Func<string, string>, string>
				{
					public global::Rocks.Argument<string> @key { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private readonly global::System.Collections.Generic.List<global::HasInternalVirtualCreateExpectations.Handler0> @handlers0 = new();
				private readonly global::System.Collections.Generic.List<global::HasInternalVirtualCreateExpectations.Handler1> @handlers1 = new();
				private readonly global::System.Collections.Generic.List<global::HasInternalVirtualCreateExpectations.Handler2> @handlers2 = new();
				private readonly global::System.Collections.Generic.List<global::HasInternalVirtualCreateExpectations.Handler3> @handlers3 = new();
				private readonly global::System.Collections.Generic.List<global::HasInternalVirtualCreateExpectations.Handler4> @handlers4 = new();
				private readonly global::System.Collections.Generic.List<global::HasInternalVirtualCreateExpectations.Handler5> @handlers5 = new();
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						failures.AddRange(this.Verify(handlers0));
						failures.AddRange(this.Verify(handlers1));
						failures.AddRange(this.Verify(handlers2));
						failures.AddRange(this.Verify(handlers3));
						failures.AddRange(this.Verify(handlers4));
						failures.AddRange(this.Verify(handlers5));
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class RockHasInternalVirtual
					: global::HasInternalVirtual, global::Rocks.IRaiseEvents
				{
					public RockHasInternalVirtual(global::HasInternalVirtualCreateExpectations @expectations, string @key)
						: base(@key)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers0.Count > 0)
						{
							var @handler = this.Expectations.handlers0[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							@handler.RaiseEvents(this);
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers1.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers1)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									@handler.RaiseEvents(this);
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers2.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							@handler.RaiseEvents(this);
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "void PublicVirtualMethod()")]
					public override void PublicVirtualMethod()
					{
						if (this.Expectations.handlers3.Count > 0)
						{
							var @handler = this.Expectations.handlers3[0];
							@handler.CallCount++;
							@handler.Callback?.Invoke();
							@handler.RaiseEvents(this);
						}
						else
						{
							base.PublicVirtualMethod();
						}
					}
					
					[global::Rocks.MemberIdentifier(4, "get_PublicVirtualProperty()")]
					public override string PublicVirtualProperty
					{
						get
						{
							if (this.Expectations.handlers4.Count > 0)
							{
								var @handler = this.Expectations.handlers4[0];
								@handler.CallCount++;
								var @result = @handler.Callback?.Invoke() ?? @handler.ReturnValue;
								@handler.RaiseEvents(this);
								return @result!;
							}
							else
							{
								return base.PublicVirtualProperty;
							}
						}
					}
					
					[global::Rocks.MemberIdentifier(5, "this[string @key]")]
					public override string this[string @key]
					{
						get
						{
							if (this.Expectations.handlers5.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers5)
								{
									if (@handler.@key.IsValid(@key!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@key!) : @handler.ReturnValue;
										@handler.RaiseEvents(this);
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[string @key]");
							}
							else
							{
								return base[key: @key!];
							}
						}
					}
					
					#pragma warning disable CS0067
					public override event global::System.EventHandler? PublicVirtualEvent;
					#pragma warning restore CS0067
					
					void global::Rocks.IRaiseEvents.Raise(string @fieldName, object @args)
					{
						var @thisType = this.GetType();
						var @eventDelegate = (global::System.MulticastDelegate)thisType.GetField(@fieldName, 
							global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.NonPublic)!.GetValue(this)!;
						
						if (@eventDelegate is not null)
						{
							foreach (var @handler in @eventDelegate.GetInvocationList())
							{
								@handler.Method.Invoke(@handler.Target, new object[]{this, @args});
							}
						}
					}
					
					private global::HasInternalVirtualCreateExpectations Expectations { get; }
				}
				
				internal sealed class HasInternalVirtualMethodExpectations
				{
					internal HasInternalVirtualMethodExpectations(global::HasInternalVirtualCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal new global::Rocks.AdornmentsV4<global::HasInternalVirtualCreateExpectations.Handler0, global::System.Func<string?>, string?> ToString()
					{
						var handler = new global::HasInternalVirtualCreateExpectations.Handler0();
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.AdornmentsV4<global::HasInternalVirtualCreateExpectations.Handler1, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::HasInternalVirtualCreateExpectations.Handler1
						{
							@obj = @obj,
						};
						
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.AdornmentsV4<global::HasInternalVirtualCreateExpectations.Handler2, global::System.Func<int>, int> GetHashCode()
					{
						var handler = new global::HasInternalVirtualCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					internal global::Rocks.AdornmentsV4<global::HasInternalVirtualCreateExpectations.Handler3, global::System.Action> PublicVirtualMethod()
					{
						var handler = new global::HasInternalVirtualCreateExpectations.Handler3();
						this.Expectations.handlers3.Add(handler);
						return new(handler);
					}
					
					private global::HasInternalVirtualCreateExpectations Expectations { get; }
				}
				
				internal sealed class HasInternalVirtualPropertyExpectations
				{
					internal sealed class HasInternalVirtualPropertyGetterExpectations
					{
						internal HasInternalVirtualPropertyGetterExpectations(global::HasInternalVirtualCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.AdornmentsV4<global::HasInternalVirtualCreateExpectations.Handler4, global::System.Func<string>, string> PublicVirtualProperty()
						{
							var handler = new global::HasInternalVirtualCreateExpectations.Handler4();
							this.Expectations.handlers4.Add(handler);
							return new(handler);
						}
						private global::HasInternalVirtualCreateExpectations Expectations { get; }
					}
					
					
					internal HasInternalVirtualPropertyExpectations(global::HasInternalVirtualCreateExpectations expectations) =>
						(this.Getters) = (new(expectations));
					
					internal global::HasInternalVirtualCreateExpectations.HasInternalVirtualPropertyExpectations.HasInternalVirtualPropertyGetterExpectations Getters { get; }
				}
				internal sealed class HasInternalVirtualIndexerExpectations
				{
					internal sealed class HasInternalVirtualIndexerGetterExpectations
					{
						internal HasInternalVirtualIndexerGetterExpectations(global::HasInternalVirtualCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.AdornmentsV4<global::HasInternalVirtualCreateExpectations.Handler5, global::System.Func<string, string>, string> This(global::Rocks.Argument<string> @key)
						{
							global::System.ArgumentNullException.ThrowIfNull(@key);
							
							var handler = new global::HasInternalVirtualCreateExpectations.Handler5
							{
								@key = @key,
							};
							
							this.Expectations.handlers5.Add(handler);
							return new(handler);
						}
						private global::HasInternalVirtualCreateExpectations Expectations { get; }
					}
					
					
					internal HasInternalVirtualIndexerExpectations(global::HasInternalVirtualCreateExpectations expectations) =>
						(this.Getters) = (new(expectations));
					
					internal global::HasInternalVirtualCreateExpectations.HasInternalVirtualIndexerExpectations.HasInternalVirtualIndexerGetterExpectations Getters { get; }
				}
				
				internal global::HasInternalVirtualCreateExpectations.HasInternalVirtualMethodExpectations Methods { get; }
				internal global::HasInternalVirtualCreateExpectations.HasInternalVirtualPropertyExpectations Properties { get; }
				internal global::HasInternalVirtualCreateExpectations.HasInternalVirtualIndexerExpectations Indexers { get; }
				
				internal HasInternalVirtualCreateExpectations() =>
					(this.Methods, this.Properties, this.Indexers) = (new(this), new(this), new(this));
				
				internal global::HasInternalVirtual Instance(string @key)
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new RockHasInternalVirtual(this, @key);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "HasInternalVirtual_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>(),
			additionalReferences: sourceReferences).ConfigureAwait(false);
	}

	[Test]
	public static async Task MakeWithInternalVirtualMembersAsync()
	{
		var sourceCode =
			"""
			using System;
			
			public class HasInternalVirtual
			{
				public HasInternalVirtual(string key) { }
				internal HasInternalVirtual(int key) { }
			
				public virtual void PublicVirtualMethod() { }
				internal virtual void InternalVirtualMethod() { }

				public virtual string PublicVirtualProperty { get; }
				internal virtual string InternalVirtualProperty { get; }

				public virtual string this[string key] { get => "a"; }
				internal virtual string this[int key] { get => "a"; }

				public virtual event EventHandler PublicVirtualEvent;
				internal virtual event EventHandler PublicVirtualEvent;
			}			
			""";

		var sourceSyntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
		var sourceReferences = AppDomain.CurrentDomain.GetAssemblies()
			.Where(_ => !_.IsDynamic && !string.IsNullOrWhiteSpace(_.Location))
			.Select(_ =>
			{
				var location = _.Location;
				return MetadataReference.CreateFromFile(location);
			})
			.Cast<MetadataReference>()
			.ToList();
		var sourceCompilation = CSharpCompilation.Create("SourceAssembly", new SyntaxTree[] { sourceSyntaxTree },
			sourceReferences, new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
		var sourceReference = sourceCompilation.ToMetadataReference()!;

		sourceReferences.Add(sourceReference);

		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockMake<HasInternalVirtual>]
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class HasInternalVirtualMakeExpectations
			{
				internal global::HasInternalVirtual Instance(string @key)
				{
					return new RockHasInternalVirtual(@key);
				}
				
				private sealed class RockHasInternalVirtual
					: global::HasInternalVirtual
				{
					public RockHasInternalVirtual(string @key)
						: base(@key)
					{
					}
					
					public override string? ToString()
					{
						return default!;
					}
					public override bool Equals(object? @obj)
					{
						return default!;
					}
					public override int GetHashCode()
					{
						return default!;
					}
					public override void PublicVirtualMethod()
					{
					}
					public override string PublicVirtualProperty
					{
						get => default!;
					}
					public override string this[string @key]
					{
						get => default!;
					}
					
					#pragma warning disable CS0067
					public override event global::System.EventHandler? PublicVirtualEvent;
					#pragma warning restore CS0067
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "HasInternalVirtual_Rock_Make.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>(),
			additionalReferences: sourceReferences).ConfigureAwait(false);
	}

	[Test]
	public static async Task CreateWithProtectedVirtualMembersAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<MockTests.Test>]

			namespace MockTests
			{
				public class Test
				{
					protected virtual void ProtectedMethod() { }
					protected virtual string ProtectedProperty { get; set; }
					protected virtual event EventHandler ProtectedEvent;
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			namespace MockTests
			{
				internal sealed class TestCreateExpectations
					: global::Rocks.Expectations.ExpectationsV4
				{
					#pragma warning disable CS8618
					
					internal sealed class Handler0
						: global::Rocks.HandlerV4<global::System.Func<object?, bool>, bool>
					{
						public global::Rocks.Argument<object?> @obj { get; set; }
					}
					
					internal sealed class Handler1
						: global::Rocks.HandlerV4<global::System.Func<int>, int>
					{ }
					
					internal sealed class Handler2
						: global::Rocks.HandlerV4<global::System.Func<string?>, string?>
					{ }
					
					internal sealed class Handler3
						: global::Rocks.HandlerV4<global::System.Action>
					{ }
					
					internal sealed class Handler4
						: global::Rocks.HandlerV4<global::System.Func<string>, string>
					{ }
					
					internal sealed class Handler5
						: global::Rocks.HandlerV4<global::System.Action<string>>
					{
						public global::Rocks.Argument<string> @value { get; set; }
					}
					
					#pragma warning restore CS8618
					
					private readonly global::System.Collections.Generic.List<global::MockTests.TestCreateExpectations.Handler0> @handlers0 = new();
					private readonly global::System.Collections.Generic.List<global::MockTests.TestCreateExpectations.Handler1> @handlers1 = new();
					private readonly global::System.Collections.Generic.List<global::MockTests.TestCreateExpectations.Handler2> @handlers2 = new();
					private readonly global::System.Collections.Generic.List<global::MockTests.TestCreateExpectations.Handler3> @handlers3 = new();
					private readonly global::System.Collections.Generic.List<global::MockTests.TestCreateExpectations.Handler4> @handlers4 = new();
					private readonly global::System.Collections.Generic.List<global::MockTests.TestCreateExpectations.Handler5> @handlers5 = new();
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							failures.AddRange(this.Verify(handlers0));
							failures.AddRange(this.Verify(handlers1));
							failures.AddRange(this.Verify(handlers2));
							failures.AddRange(this.Verify(handlers3));
							failures.AddRange(this.Verify(handlers4));
							failures.AddRange(this.Verify(handlers5));
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class RockTest
						: global::MockTests.Test, global::Rocks.IRaiseEvents
					{
						public RockTest(global::MockTests.TestCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
						public override bool Equals(object? @obj)
						{
							if (this.Expectations.handlers0.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@obj.IsValid(@obj!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@obj!) : @handler.ReturnValue;
										@handler.RaiseEvents(this);
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
							}
							else
							{
								return base.Equals(obj: @obj!);
							}
						}
						
						[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
						public override int GetHashCode()
						{
							if (this.Expectations.handlers1.Count > 0)
							{
								var @handler = this.Expectations.handlers1[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								@handler.RaiseEvents(this);
								return @result!;
							}
							else
							{
								return base.GetHashCode();
							}
						}
						
						[global::Rocks.MemberIdentifier(2, "string? ToString()")]
						public override string? ToString()
						{
							if (this.Expectations.handlers2.Count > 0)
							{
								var @handler = this.Expectations.handlers2[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								@handler.RaiseEvents(this);
								return @result!;
							}
							else
							{
								return base.ToString();
							}
						}
						
						[global::Rocks.MemberIdentifier(3, "void ProtectedMethod()")]
						protected override void ProtectedMethod()
						{
							if (this.Expectations.handlers3.Count > 0)
							{
								var @handler = this.Expectations.handlers3[0];
								@handler.CallCount++;
								@handler.Callback?.Invoke();
								@handler.RaiseEvents(this);
							}
							else
							{
								base.ProtectedMethod();
							}
						}
						
						[global::Rocks.MemberIdentifier(4, "get_ProtectedProperty()")]
						[global::Rocks.MemberIdentifier(5, "set_ProtectedProperty(value)")]
						protected override string ProtectedProperty
						{
							get
							{
								if (this.Expectations.handlers4.Count > 0)
								{
									var @handler = this.Expectations.handlers4[0];
									@handler.CallCount++;
									var @result = @handler.Callback?.Invoke() ?? @handler.ReturnValue;
									@handler.RaiseEvents(this);
									return @result!;
								}
								else
								{
									return base.ProtectedProperty;
								}
							}
							set
							{
								if (this.Expectations.handlers5.Count > 0)
								{
									var @foundMatch = false;
									foreach (var @handler in this.Expectations.handlers5)
									{
										if (@handler.value.IsValid(value!))
										{
											@handler.CallCount++;
											@foundMatch = true;
											@handler.Callback?.Invoke(value!);
											
											if (!@foundMatch)
											{
												throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_ProtectedProperty(value)");
											}
											
											@handler.RaiseEvents(this);
											break;
										}
									}
								}
								else
								{
									base.ProtectedProperty = value!;
								}
							}
						}
						
						#pragma warning disable CS0067
						protected override event global::System.EventHandler? ProtectedEvent;
						#pragma warning restore CS0067
						
						void global::Rocks.IRaiseEvents.Raise(string @fieldName, object @args)
						{
							var @thisType = this.GetType();
							var @eventDelegate = (global::System.MulticastDelegate)thisType.GetField(@fieldName, 
								global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.NonPublic)!.GetValue(this)!;
							
							if (@eventDelegate is not null)
							{
								foreach (var @handler in @eventDelegate.GetInvocationList())
								{
									@handler.Method.Invoke(@handler.Target, new object[]{this, @args});
								}
							}
						}
						
						private global::MockTests.TestCreateExpectations Expectations { get; }
					}
					
					internal sealed class TestMethodExpectations
					{
						internal TestMethodExpectations(global::MockTests.TestCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.AdornmentsV4<global::MockTests.TestCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
						{
							global::System.ArgumentNullException.ThrowIfNull(@obj);
							
							var handler = new global::MockTests.TestCreateExpectations.Handler0
							{
								@obj = @obj,
							};
							
							this.Expectations.handlers0.Add(handler);
							return new(handler);
						}
						
						internal new global::Rocks.AdornmentsV4<global::MockTests.TestCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
						{
							var handler = new global::MockTests.TestCreateExpectations.Handler1();
							this.Expectations.handlers1.Add(handler);
							return new(handler);
						}
						
						internal new global::Rocks.AdornmentsV4<global::MockTests.TestCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
						{
							var handler = new global::MockTests.TestCreateExpectations.Handler2();
							this.Expectations.handlers2.Add(handler);
							return new(handler);
						}
						
						internal global::Rocks.AdornmentsV4<global::MockTests.TestCreateExpectations.Handler3, global::System.Action> ProtectedMethod()
						{
							var handler = new global::MockTests.TestCreateExpectations.Handler3();
							this.Expectations.handlers3.Add(handler);
							return new(handler);
						}
						
						private global::MockTests.TestCreateExpectations Expectations { get; }
					}
					
					internal sealed class TestPropertyExpectations
					{
						internal sealed class TestPropertyGetterExpectations
						{
							internal TestPropertyGetterExpectations(global::MockTests.TestCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::Rocks.AdornmentsV4<global::MockTests.TestCreateExpectations.Handler4, global::System.Func<string>, string> ProtectedProperty()
							{
								var handler = new global::MockTests.TestCreateExpectations.Handler4();
								this.Expectations.handlers4.Add(handler);
								return new(handler);
							}
							private global::MockTests.TestCreateExpectations Expectations { get; }
						}
						
						internal sealed class TestPropertySetterExpectations
						{
							internal TestPropertySetterExpectations(global::MockTests.TestCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::Rocks.AdornmentsV4<global::MockTests.TestCreateExpectations.Handler5, global::System.Action<string>> ProtectedProperty(global::Rocks.Argument<string> @value)
							{
								var handler = new global::MockTests.TestCreateExpectations.Handler5
								{
									value = @value,
								};
							
								this.Expectations.handlers5.Add(handler);
								return new(handler);
							}
							private global::MockTests.TestCreateExpectations Expectations { get; }
						}
						
						internal TestPropertyExpectations(global::MockTests.TestCreateExpectations expectations) =>
							(this.Getters, this.Setters) = (new(expectations), new(expectations));
						
						internal global::MockTests.TestCreateExpectations.TestPropertyExpectations.TestPropertyGetterExpectations Getters { get; }
						internal global::MockTests.TestCreateExpectations.TestPropertyExpectations.TestPropertySetterExpectations Setters { get; }
					}
					
					internal global::MockTests.TestCreateExpectations.TestMethodExpectations Methods { get; }
					internal global::MockTests.TestCreateExpectations.TestPropertyExpectations Properties { get; }
					
					internal TestCreateExpectations() =>
						(this.Methods, this.Properties) = (new(this), new(this));
					
					internal global::MockTests.Test Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new RockTest(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MockTests.Test_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}

	[Test]
	public static async Task CreateWithNonPublicAbstractMembersAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<MockTests.Test>]

			namespace MockTests
			{
				public abstract class Test
				{
					protected abstract void ProtectedMethod();
					protected abstract string ProtectedProperty { get; set; }
					protected abstract event EventHandler ProtectedEvent;
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			namespace MockTests
			{
				internal sealed class TestCreateExpectations
					: global::Rocks.Expectations.ExpectationsV4
				{
					#pragma warning disable CS8618
					
					internal sealed class Handler0
						: global::Rocks.HandlerV4<global::System.Func<object?, bool>, bool>
					{
						public global::Rocks.Argument<object?> @obj { get; set; }
					}
					
					internal sealed class Handler1
						: global::Rocks.HandlerV4<global::System.Func<int>, int>
					{ }
					
					internal sealed class Handler2
						: global::Rocks.HandlerV4<global::System.Func<string?>, string?>
					{ }
					
					internal sealed class Handler3
						: global::Rocks.HandlerV4<global::System.Action>
					{ }
					
					internal sealed class Handler4
						: global::Rocks.HandlerV4<global::System.Func<string>, string>
					{ }
					
					internal sealed class Handler5
						: global::Rocks.HandlerV4<global::System.Action<string>>
					{
						public global::Rocks.Argument<string> @value { get; set; }
					}
					
					#pragma warning restore CS8618
					
					private readonly global::System.Collections.Generic.List<global::MockTests.TestCreateExpectations.Handler0> @handlers0 = new();
					private readonly global::System.Collections.Generic.List<global::MockTests.TestCreateExpectations.Handler1> @handlers1 = new();
					private readonly global::System.Collections.Generic.List<global::MockTests.TestCreateExpectations.Handler2> @handlers2 = new();
					private readonly global::System.Collections.Generic.List<global::MockTests.TestCreateExpectations.Handler3> @handlers3 = new();
					private readonly global::System.Collections.Generic.List<global::MockTests.TestCreateExpectations.Handler4> @handlers4 = new();
					private readonly global::System.Collections.Generic.List<global::MockTests.TestCreateExpectations.Handler5> @handlers5 = new();
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							failures.AddRange(this.Verify(handlers0));
							failures.AddRange(this.Verify(handlers1));
							failures.AddRange(this.Verify(handlers2));
							failures.AddRange(this.Verify(handlers3));
							failures.AddRange(this.Verify(handlers4));
							failures.AddRange(this.Verify(handlers5));
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class RockTest
						: global::MockTests.Test, global::Rocks.IRaiseEvents
					{
						public RockTest(global::MockTests.TestCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
						public override bool Equals(object? @obj)
						{
							if (this.Expectations.handlers0.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@obj.IsValid(@obj!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@obj!) : @handler.ReturnValue;
										@handler.RaiseEvents(this);
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
							}
							else
							{
								return base.Equals(obj: @obj!);
							}
						}
						
						[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
						public override int GetHashCode()
						{
							if (this.Expectations.handlers1.Count > 0)
							{
								var @handler = this.Expectations.handlers1[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								@handler.RaiseEvents(this);
								return @result!;
							}
							else
							{
								return base.GetHashCode();
							}
						}
						
						[global::Rocks.MemberIdentifier(2, "string? ToString()")]
						public override string? ToString()
						{
							if (this.Expectations.handlers2.Count > 0)
							{
								var @handler = this.Expectations.handlers2[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								@handler.RaiseEvents(this);
								return @result!;
							}
							else
							{
								return base.ToString();
							}
						}
						
						[global::Rocks.MemberIdentifier(3, "void ProtectedMethod()")]
						protected override void ProtectedMethod()
						{
							if (this.Expectations.handlers3.Count > 0)
							{
								var @handler = this.Expectations.handlers3[0];
								@handler.CallCount++;
								@handler.Callback?.Invoke();
								@handler.RaiseEvents(this);
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void ProtectedMethod()");
							}
						}
						
						[global::Rocks.MemberIdentifier(4, "get_ProtectedProperty()")]
						[global::Rocks.MemberIdentifier(5, "set_ProtectedProperty(value)")]
						protected override string ProtectedProperty
						{
							get
							{
								if (this.Expectations.handlers4.Count > 0)
								{
									var @handler = this.Expectations.handlers4[0];
									@handler.CallCount++;
									var @result = @handler.Callback?.Invoke() ?? @handler.ReturnValue;
									@handler.RaiseEvents(this);
									return @result!;
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for get_ProtectedProperty())");
							}
							set
							{
								if (this.Expectations.handlers5.Count > 0)
								{
									var @foundMatch = false;
									foreach (var @handler in this.Expectations.handlers5)
									{
										if (@handler.value.IsValid(value!))
										{
											@handler.CallCount++;
											@foundMatch = true;
											@handler.Callback?.Invoke(value!);
											
											if (!@foundMatch)
											{
												throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_ProtectedProperty(value)");
											}
											
											@handler.RaiseEvents(this);
											break;
										}
									}
								}
								else
								{
									throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for set_ProtectedProperty(value)");
								}
							}
						}
						
						#pragma warning disable CS0067
						protected override event global::System.EventHandler? ProtectedEvent;
						#pragma warning restore CS0067
						
						void global::Rocks.IRaiseEvents.Raise(string @fieldName, object @args)
						{
							var @thisType = this.GetType();
							var @eventDelegate = (global::System.MulticastDelegate)thisType.GetField(@fieldName, 
								global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.NonPublic)!.GetValue(this)!;
							
							if (@eventDelegate is not null)
							{
								foreach (var @handler in @eventDelegate.GetInvocationList())
								{
									@handler.Method.Invoke(@handler.Target, new object[]{this, @args});
								}
							}
						}
						
						private global::MockTests.TestCreateExpectations Expectations { get; }
					}
					
					internal sealed class TestMethodExpectations
					{
						internal TestMethodExpectations(global::MockTests.TestCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.AdornmentsV4<global::MockTests.TestCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
						{
							global::System.ArgumentNullException.ThrowIfNull(@obj);
							
							var handler = new global::MockTests.TestCreateExpectations.Handler0
							{
								@obj = @obj,
							};
							
							this.Expectations.handlers0.Add(handler);
							return new(handler);
						}
						
						internal new global::Rocks.AdornmentsV4<global::MockTests.TestCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
						{
							var handler = new global::MockTests.TestCreateExpectations.Handler1();
							this.Expectations.handlers1.Add(handler);
							return new(handler);
						}
						
						internal new global::Rocks.AdornmentsV4<global::MockTests.TestCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
						{
							var handler = new global::MockTests.TestCreateExpectations.Handler2();
							this.Expectations.handlers2.Add(handler);
							return new(handler);
						}
						
						internal global::Rocks.AdornmentsV4<global::MockTests.TestCreateExpectations.Handler3, global::System.Action> ProtectedMethod()
						{
							var handler = new global::MockTests.TestCreateExpectations.Handler3();
							this.Expectations.handlers3.Add(handler);
							return new(handler);
						}
						
						private global::MockTests.TestCreateExpectations Expectations { get; }
					}
					
					internal sealed class TestPropertyExpectations
					{
						internal sealed class TestPropertyGetterExpectations
						{
							internal TestPropertyGetterExpectations(global::MockTests.TestCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::Rocks.AdornmentsV4<global::MockTests.TestCreateExpectations.Handler4, global::System.Func<string>, string> ProtectedProperty()
							{
								var handler = new global::MockTests.TestCreateExpectations.Handler4();
								this.Expectations.handlers4.Add(handler);
								return new(handler);
							}
							private global::MockTests.TestCreateExpectations Expectations { get; }
						}
						
						internal sealed class TestPropertySetterExpectations
						{
							internal TestPropertySetterExpectations(global::MockTests.TestCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::Rocks.AdornmentsV4<global::MockTests.TestCreateExpectations.Handler5, global::System.Action<string>> ProtectedProperty(global::Rocks.Argument<string> @value)
							{
								var handler = new global::MockTests.TestCreateExpectations.Handler5
								{
									value = @value,
								};
							
								this.Expectations.handlers5.Add(handler);
								return new(handler);
							}
							private global::MockTests.TestCreateExpectations Expectations { get; }
						}
						
						internal TestPropertyExpectations(global::MockTests.TestCreateExpectations expectations) =>
							(this.Getters, this.Setters) = (new(expectations), new(expectations));
						
						internal global::MockTests.TestCreateExpectations.TestPropertyExpectations.TestPropertyGetterExpectations Getters { get; }
						internal global::MockTests.TestCreateExpectations.TestPropertyExpectations.TestPropertySetterExpectations Setters { get; }
					}
					
					internal global::MockTests.TestCreateExpectations.TestMethodExpectations Methods { get; }
					internal global::MockTests.TestCreateExpectations.TestPropertyExpectations Properties { get; }
					
					internal TestCreateExpectations() =>
						(this.Methods, this.Properties) = (new(this), new(this));
					
					internal global::MockTests.Test Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new RockTest(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MockTests.Test_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}

	[Test]
	public static async Task MakeWithNonPublicVirtualMenbersAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockMake<MockTests.Test>]

			namespace MockTests
			{
				public abstract class Test
				{
					protected abstract void ProtectedMethod();
					protected abstract string ProtectedProperty { get; set; }
					protected abstract event EventHandler ProtectedEvent;
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			namespace MockTests
			{
				internal sealed class TestMakeExpectations
				{
					internal global::MockTests.Test Instance()
					{
						return new RockTest();
					}
					
					private sealed class RockTest
						: global::MockTests.Test
					{
						public RockTest()
						{
						}
						
						public override bool Equals(object? @obj)
						{
							return default!;
						}
						public override int GetHashCode()
						{
							return default!;
						}
						public override string? ToString()
						{
							return default!;
						}
						protected override void ProtectedMethod()
						{
						}
						protected override string ProtectedProperty
						{
							get => default!;
							set { }
						}
						
						#pragma warning disable CS0067
						protected override event global::System.EventHandler? ProtectedEvent;
						#pragma warning restore CS0067
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MockTests.Test_Rock_Make.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}

	[Test]
	public static async Task MakeWithNonPublicAbstractMembersAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockMake<MockTests.Test>]

			namespace MockTests
			{
				public abstract class Test
				{
					protected virtual void ProtectedMethod() { }
					protected virtual string ProtectedProperty { get; set; }
					protected virtual event EventHandler ProtectedEvent;
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			namespace MockTests
			{
				internal sealed class TestMakeExpectations
				{
					internal global::MockTests.Test Instance()
					{
						return new RockTest();
					}
					
					private sealed class RockTest
						: global::MockTests.Test
					{
						public RockTest()
						{
						}
						
						public override bool Equals(object? @obj)
						{
							return default!;
						}
						public override int GetHashCode()
						{
							return default!;
						}
						public override string? ToString()
						{
							return default!;
						}
						protected override void ProtectedMethod()
						{
						}
						protected override string ProtectedProperty
						{
							get => default!;
							set { }
						}
						
						#pragma warning disable CS0067
						protected override event global::System.EventHandler? ProtectedEvent;
						#pragma warning restore CS0067
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MockTests.Test_Rock_Make.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}
}