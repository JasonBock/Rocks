using Microsoft.CodeAnalysis.Testing;
using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class ProjectedTypesGeneratorV4Tests
{
	[Test]
	public static async Task CreateWithPointersAndGenericsAndUnmanagedConstraintAsync()
	{
		var code =
			"""
			using Rocks;

			[assembly: RockCreate<ISurface>]

			public interface ISurface
			{
				unsafe void Create<T>(T* allocator) where T : unmanaged;
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using ProjectionsForISurface;
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			namespace ProjectionsForISurface
			{
				internal unsafe delegate void CreateCallback_197220541663188455981388668427457375357930643021<T>(T* @allocator) where T : unmanaged;
				internal unsafe delegate bool ArgumentEvaluationForTPointer<T>(T* @value) where T : unmanaged;
				
				internal unsafe sealed class ArgumentForTPointer<T>
					: global::Rocks.Argument where T : unmanaged
				{
					private readonly global::ProjectionsForISurface.ArgumentEvaluationForTPointer<T>? evaluation;
					private readonly T* value;
					private readonly global::Rocks.ValidationState validation;
					
					internal ArgumentForTPointer() => this.validation = global::Rocks.ValidationState.None;
					
					internal ArgumentForTPointer(T* @value)
					{
						this.value = @value;
						this.validation = global::Rocks.ValidationState.Value;
					}
					
					internal ArgumentForTPointer(global::ProjectionsForISurface.ArgumentEvaluationForTPointer<T> @evaluation)
					{
						this.evaluation = @evaluation;
						this.validation = global::Rocks.ValidationState.Evaluation;
					}
					
					public static implicit operator ArgumentForTPointer<T>(T* @value) => new(@value);
					
					public bool IsValid(T* @value) =>
						this.validation switch
						{
							global::Rocks.ValidationState.None => true,
							global::Rocks.ValidationState.Value => @value == this.value,
							global::Rocks.ValidationState.Evaluation => this.evaluation!(@value),
							global::Rocks.ValidationState.DefaultValue => throw new global::System.NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
							_ => throw new global::System.ComponentModel.InvalidEnumArgumentException($"Invalid value for validation: {{this.validation}}")
						};
				}
			}
			
			internal sealed class ISurfaceCreateExpectations
				: global::Rocks.Expectations.ExpectationsV4
			{
				#pragma warning disable CS8618
				
				internal unsafe sealed class Handler0<T>
					: global::Rocks.HandlerV4<global::ProjectionsForISurface.CreateCallback_197220541663188455981388668427457375357930643021<T>>
					where T : unmanaged
				{
					public global::Rocks.PointerArgument<T> @allocator { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private readonly global::System.Collections.Generic.List<global::Rocks.HandlerV4> @handlers0 = new();
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						failures.AddRange(this.Verify(handlers0));
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class RockISurface
					: global::ISurface
				{
					public RockISurface(global::ISurfaceCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "void Create<T>(T* @allocator)")]
					public unsafe void Create<T>(T* @allocator)
						where T : unmanaged
					{
						if (this.Expectations.handlers0.Count > 0)
						{
							var @foundMatch = false;
							
							foreach (var @genericHandler in this.Expectations.handlers0)
							{
								if (@genericHandler is global::ISurfaceCreateExpectations.Handler0<T> @handler)
								{
									if (@handler.@allocator.IsValid(@allocator!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(@allocator!);
										break;
									}
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for unsafe void Create<T>(T* @allocator)");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for unsafe void Create<T>(T* @allocator)");
						}
					}
					
					private global::ISurfaceCreateExpectations Expectations { get; }
				}
				
				internal sealed class ISurfaceMethodExpectations
				{
					internal ISurfaceMethodExpectations(global::ISurfaceCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.AdornmentsV4<global::ISurfaceCreateExpectations.Handler0<T>, global::ProjectionsForISurface.CreateCallback_197220541663188455981388668427457375357930643021<T>> Create<T>(global::Rocks.PointerArgument<T> @allocator) where T : unmanaged
					{
						global::System.ArgumentNullException.ThrowIfNull(@allocator);
						
						var handler = new global::ISurfaceCreateExpectations.Handler0<T>
						{
							@allocator = @allocator,
						};
						
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					private global::ISurfaceCreateExpectations Expectations { get; }
				}
				
				internal global::ISurfaceCreateExpectations.ISurfaceMethodExpectations Methods { get; }
				
				internal ISurfaceCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::ISurface Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new RockISurface(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "ISurface_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}

	[Test]
	public static async Task CreateWithRefLikeTypeWithOpenGenericsAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<IUseSpanWithOpenGeneric>]

			public interface IUseSpanWithOpenGeneric
			{
				 void From<TSourcePixel>(
					  ReadOnlySpan<TSourcePixel> sourcePixels)
					  where TSourcePixel : unmanaged;
			}
			""";

		var generatedCode = "";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IUseSpanWithOpenGeneric_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWithPointersAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockCreate<MockTests.IHavePointers>]

			#nullable enable

			namespace MockTests
			{
				public unsafe interface IHavePointers
				{
					void DelegatePointerParameter(delegate*<int, void> value);
					delegate*<int, void> DelegatePointerReturn();
					void PointerParameter(int* value);
					int* PointerReturn();
				}
			}
			""";

		var generatedCode = "";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MockTests.IHavePointers_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWithRefStructAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: RockCreate<MockTests.IHaveInAndOutSpan>]

			#nullable enable

			namespace MockTests
			{
				public interface IHaveInAndOutSpan
				{
					Span<int> Foo(Span<int> values);
					Span<byte> Values { get; set; }
				}
			}
			""";

		var generatedCode = "";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MockTests.IHaveInAndOutSpan_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}
}