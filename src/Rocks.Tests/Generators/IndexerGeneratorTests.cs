using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class IndexerGeneratorTests
{
	[Test]
	public static async Task CreateWithIndexerAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<AbstractClassIndexerGetterSetter>]

			public abstract class AbstractClassIndexerGetterSetter
			{
				public abstract int this[int a] { get; set; }
				public abstract int this[int a, string b] { get; set; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class AbstractClassIndexerGetterSetterCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
				{
					public global::Rocks.Argument<object?> @obj { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Func<int>, int>
				{ }
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Func<string?>, string?>
				{ }
				
				internal sealed class Handler3
					: global::Rocks.Handler<global::System.Func<int, int>, int>
				{
					public global::Rocks.Argument<int> @a { get; set; }
				}
				
				internal sealed class Handler4
					: global::Rocks.Handler<global::System.Action<int, int>>
				{
					public global::Rocks.Argument<int> @a { get; set; }
					public global::Rocks.Argument<int> @value { get; set; }
				}
				
				internal sealed class Handler5
					: global::Rocks.Handler<global::System.Func<int, string, int>, int>
				{
					public global::Rocks.Argument<int> @a { get; set; }
					public global::Rocks.Argument<string> @b { get; set; }
				}
				
				internal sealed class Handler6
					: global::Rocks.Handler<global::System.Action<int, string, int>>
				{
					public global::Rocks.Argument<int> @a { get; set; }
					public global::Rocks.Argument<string> @b { get; set; }
					public global::Rocks.Argument<int> @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler1>? @handlers1;
				private global::System.Collections.Generic.List<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler2>? @handlers2;
				private global::System.Collections.Generic.List<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler3>? @handlers3;
				private global::System.Collections.Generic.List<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler4>? @handlers4;
				private global::System.Collections.Generic.List<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler5>? @handlers5;
				private global::System.Collections.Generic.List<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler6>? @handlers6;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2, 2)); }
						if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3, 3)); }
						if (this.handlers4?.Count > 0) { failures.AddRange(this.Verify(this.handlers4, 4)); }
						if (this.handlers5?.Count > 0) { failures.AddRange(this.Verify(this.handlers5, 5)); }
						if (this.handlers6?.Count > 0) { failures.AddRange(this.Verify(this.handlers6, 6)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::AbstractClassIndexerGetterSetter
				{
					public Mock(global::AbstractClassIndexerGetterSetterCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@obj.IsValid(@obj!))
								{
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback(@obj!) : @handler.ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(obj: @obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.Expectations.handlers1?.Count > 0)
						{
							var @handler = this.Expectations.handlers1[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.Expectations.handlers2?.Count > 0)
						{
							var @handler = this.Expectations.handlers2[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "this[int @a]")]
					[global::Rocks.MemberIdentifier(4, "this[int @a]")]
					public override int this[int @a]
					{
						get
						{
							if (this.Expectations.handlers3?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers3)
								{
									if (@handler.@a.IsValid(@a!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@a!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[int @a]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[int @a])");
						}
						set
						{
							if (this.Expectations.handlers4?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers4)
								{
									if (@handler.@a.IsValid(@a!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@a!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[int @a]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[int @a])");
						}
					}
					[global::Rocks.MemberIdentifier(5, "this[int @a, string @b]")]
					[global::Rocks.MemberIdentifier(6, "this[int @a, string @b]")]
					public override int this[int @a, string @b]
					{
						get
						{
							if (this.Expectations.handlers5?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers5)
								{
									if (@handler.@a.IsValid(@a!) &&
										@handler.@b.IsValid(@b!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@a!, @b!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[int @a, string @b]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[int @a, string @b])");
						}
						set
						{
							if (this.Expectations.handlers6?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers6)
								{
									if (@handler.@a.IsValid(@a!) &&
										@handler.@b.IsValid(@b!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@a!, @b!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[int @a, string @b]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[int @a, string @b])");
						}
					}
					
					private global::AbstractClassIndexerGetterSetterCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::AbstractClassIndexerGetterSetterCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						
						var handler = new global::AbstractClassIndexerGetterSetterCreateExpectations.Handler0
						{
							@obj = @obj,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
						var handler = new global::AbstractClassIndexerGetterSetterCreateExpectations.Handler1();
						this.Expectations.handlers1.Add(handler);
						return new(handler);
					}
					
					internal new global::Rocks.Adornments<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
						var handler = new global::AbstractClassIndexerGetterSetterCreateExpectations.Handler2();
						this.Expectations.handlers2.Add(handler);
						return new(handler);
					}
					
					private global::AbstractClassIndexerGetterSetterCreateExpectations Expectations { get; }
				}
				
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerGetterExpectations
					{
						internal IndexerGetterExpectations(global::AbstractClassIndexerGetterSetterCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler3, global::System.Func<int, int>, int> This(global::Rocks.Argument<int> @a)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@a);
							
							var handler = new global::AbstractClassIndexerGetterSetterCreateExpectations.Handler3
							{
								@a = @a,
							};
							
							if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(); }
							this.Expectations.handlers3.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler5, global::System.Func<int, string, int>, int> This(global::Rocks.Argument<int> @a, global::Rocks.Argument<string> @b)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@a);
							global::System.ArgumentNullException.ThrowIfNull(@b);
							
							var handler = new global::AbstractClassIndexerGetterSetterCreateExpectations.Handler5
							{
								@a = @a,
								@b = @b,
							};
							
							if (this.Expectations.handlers5 is null ) { this.Expectations.handlers5 = new(); }
							this.Expectations.handlers5.Add(handler);
							return new(handler);
						}
						private global::AbstractClassIndexerGetterSetterCreateExpectations Expectations { get; }
					}
					
					internal sealed class IndexerSetterExpectations
					{
						internal IndexerSetterExpectations(global::AbstractClassIndexerGetterSetterCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler4, global::System.Action<int, int>> This(global::Rocks.Argument<int> @value, global::Rocks.Argument<int> @a)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@a);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var handler = new global::AbstractClassIndexerGetterSetterCreateExpectations.Handler4
							{
								@a = @a,
								@value = @value,
							};
							
							if (this.Expectations.handlers4 is null ) { this.Expectations.handlers4 = new(); }
							this.Expectations.handlers4.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::AbstractClassIndexerGetterSetterCreateExpectations.Handler6, global::System.Action<int, string, int>> This(global::Rocks.Argument<int> @value, global::Rocks.Argument<int> @a, global::Rocks.Argument<string> @b)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@a);
							global::System.ArgumentNullException.ThrowIfNull(@b);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var handler = new global::AbstractClassIndexerGetterSetterCreateExpectations.Handler6
							{
								@a = @a,
								@b = @b,
								@value = @value,
							};
							
							if (this.Expectations.handlers6 is null ) { this.Expectations.handlers6 = new(); }
							this.Expectations.handlers6.Add(handler);
							return new(handler);
						}
						private global::AbstractClassIndexerGetterSetterCreateExpectations Expectations { get; }
					}
					
					internal IndexerExpectations(global::AbstractClassIndexerGetterSetterCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::AbstractClassIndexerGetterSetterCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
					internal global::AbstractClassIndexerGetterSetterCreateExpectations.IndexerExpectations.IndexerSetterExpectations Setters { get; }
				}
				
				internal global::AbstractClassIndexerGetterSetterCreateExpectations.MethodExpectations Methods { get; }
				internal global::AbstractClassIndexerGetterSetterCreateExpectations.IndexerExpectations Indexers { get; }
				
				internal AbstractClassIndexerGetterSetterCreateExpectations() =>
					(this.Methods, this.Indexers) = (new(this), new(this));
				
				internal global::AbstractClassIndexerGetterSetter Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "AbstractClassIndexerGetterSetter_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task CreateWhenIndexerHasOptionalArgumentsAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<IHaveOptionalArguments>]

			public interface IHaveOptionalArguments
			{
				int this[int a, string b = "b"] { get; set; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class IHaveOptionalArgumentsCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Func<int, string, int>, int>
				{
					public global::Rocks.Argument<int> @a { get; set; }
					public global::Rocks.Argument<string> @b { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Action<int, string, int>>
				{
					public global::Rocks.Argument<int> @a { get; set; }
					public global::Rocks.Argument<string> @b { get; set; }
					public global::Rocks.Argument<int> @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::IHaveOptionalArgumentsCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::IHaveOptionalArgumentsCreateExpectations.Handler1>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IHaveOptionalArguments
				{
					public Mock(global::IHaveOptionalArgumentsCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "this[int @a, string @b = \"b\"]")]
					[global::Rocks.MemberIdentifier(1, "this[int @a, string @b = \"b\"]")]
					public int this[int @a, string @b = "b"]
					{
						get
						{
							if (this.Expectations.handlers0?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@a.IsValid(@a!) &&
										@handler.@b.IsValid(@b!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@a!, @b!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[int @a, string @b = \"b\"]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[int @a, string @b = \"b\"])");
						}
						set
						{
							if (this.Expectations.handlers1?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.@a.IsValid(@a!) &&
										@handler.@b.IsValid(@b!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@a!, @b!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[int @a, string @b = \"b\"]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[int @a, string @b = \"b\"])");
						}
					}
					
					private global::IHaveOptionalArgumentsCreateExpectations Expectations { get; }
				}
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerGetterExpectations
					{
						internal IndexerGetterExpectations(global::IHaveOptionalArgumentsCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::IHaveOptionalArgumentsCreateExpectations.Handler0, global::System.Func<int, string, int>, int> This(global::Rocks.Argument<int> @a, global::Rocks.Argument<string> @b)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@a);
							global::System.ArgumentNullException.ThrowIfNull(@b);
							
							var handler = new global::IHaveOptionalArgumentsCreateExpectations.Handler0
							{
								@a = @a,
								@b = @b.Transform("b"),
							};
							
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
							this.Expectations.handlers0.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::IHaveOptionalArgumentsCreateExpectations.Handler0, global::System.Func<int, string, int>, int> This(global::Rocks.Argument<int> @a, string @b = "b") =>
							this.This(@a, global::Rocks.Arg.Is(@b));
						private global::IHaveOptionalArgumentsCreateExpectations Expectations { get; }
					}
					
					internal sealed class IndexerSetterExpectations
					{
						internal IndexerSetterExpectations(global::IHaveOptionalArgumentsCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::IHaveOptionalArgumentsCreateExpectations.Handler1, global::System.Action<int, string, int>> This(global::Rocks.Argument<int> @value, global::Rocks.Argument<int> @a, global::Rocks.Argument<string> @b)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@a);
							global::System.ArgumentNullException.ThrowIfNull(@b);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var handler = new global::IHaveOptionalArgumentsCreateExpectations.Handler1
							{
								@a = @a,
								@b = @b.Transform("b"),
								@value = @value,
							};
							
							if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
							this.Expectations.handlers1.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::IHaveOptionalArgumentsCreateExpectations.Handler1, global::System.Action<int, string, int>> This(global::Rocks.Argument<int> @value, global::Rocks.Argument<int> @a, string @b = "b") =>
							this.This(@value, @a, global::Rocks.Arg.Is(@b));
						private global::IHaveOptionalArgumentsCreateExpectations Expectations { get; }
					}
					
					internal IndexerExpectations(global::IHaveOptionalArgumentsCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::IHaveOptionalArgumentsCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
					internal global::IHaveOptionalArgumentsCreateExpectations.IndexerExpectations.IndexerSetterExpectations Setters { get; }
				}
				
				internal global::IHaveOptionalArgumentsCreateExpectations.IndexerExpectations Indexers { get; }
				
				internal IHaveOptionalArgumentsCreateExpectations() =>
					(this.Indexers) = (new(this));
				
				internal global::IHaveOptionalArguments Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IHaveOptionalArguments_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task CreateWhenTypeHasMultipleIndexersWithInitAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<IHaveIndexersWithInit>]

			public interface IHaveIndexersWithInit
			{
				double this[uint a] { init; }
				string this[int a, string b] { init; }
				int this[string a, int b, Guid c] { init; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class IHaveIndexersWithInitCreateExpectations
				: global::Rocks.Expectations
			{
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::System.Action<uint, double>>
				{
					public global::Rocks.Argument<uint> @a { get; set; }
					public global::Rocks.Argument<double> @value { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::System.Action<int, string, string>>
				{
					public global::Rocks.Argument<int> @a { get; set; }
					public global::Rocks.Argument<string> @b { get; set; }
					public global::Rocks.Argument<string> @value { get; set; }
				}
				
				internal sealed class Handler2
					: global::Rocks.Handler<global::System.Action<string, int, global::System.Guid, int>>
				{
					public global::Rocks.Argument<string> @a { get; set; }
					public global::Rocks.Argument<int> @b { get; set; }
					public global::Rocks.Argument<global::System.Guid> @c { get; set; }
					public global::Rocks.Argument<int> @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::IHaveIndexersWithInitCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::IHaveIndexersWithInitCreateExpectations.Handler1>? @handlers1;
				private global::System.Collections.Generic.List<global::IHaveIndexersWithInitCreateExpectations.Handler2>? @handlers2;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
						if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2, 2)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IHaveIndexersWithInit
				{
					public Mock(global::IHaveIndexersWithInitCreateExpectations @expectations, ConstructorProperties? @constructorProperties)
					{
						this.Expectations = @expectations;
						if (@constructorProperties is not null)
						{
							foreach (var a in ((global::System.Collections.Generic.IEnumerable<uint>)@constructorProperties))
							{
								this[a] = constructorProperties[a];
							}
							foreach ((var a, var b) in ((global::System.Collections.Generic.IEnumerable<(int, string)>)@constructorProperties))
							{
								this[a, b] = constructorProperties[a, b];
							}
							foreach ((var a, var b, var c) in ((global::System.Collections.Generic.IEnumerable<(string, int, global::System.Guid)>)@constructorProperties))
							{
								this[a, b, c] = constructorProperties[a, b, c];
							}
						}
					}
					
					[global::Rocks.MemberIdentifier(0, "this[uint @a]")]
					public double this[uint @a]
					{
						init
						{
							if (this.Expectations.handlers0?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@a.IsValid(@a!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@a!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[uint @a]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[uint @a])");
						}
					}
					[global::Rocks.MemberIdentifier(1, "this[int @a, string @b]")]
					public string this[int @a, string @b]
					{
						init
						{
							if (this.Expectations.handlers1?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.@a.IsValid(@a!) &&
										@handler.@b.IsValid(@b!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@a!, @b!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[int @a, string @b]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[int @a, string @b])");
						}
					}
					[global::Rocks.MemberIdentifier(2, "this[string @a, int @b, global::System.Guid @c]")]
					public int this[string @a, int @b, global::System.Guid @c]
					{
						init
						{
							if (this.Expectations.handlers2?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers2)
								{
									if (@handler.@a.IsValid(@a!) &&
										@handler.@b.IsValid(@b!) &&
										@handler.@c.IsValid(@c!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@a!, @b!, @c!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[string @a, int @b, global::System.Guid @c]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[string @a, int @b, global::System.Guid @c])");
						}
					}
					
					private global::IHaveIndexersWithInitCreateExpectations Expectations { get; }
				}
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerInitializerExpectations
					{
						internal IndexerInitializerExpectations(global::IHaveIndexersWithInitCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::IHaveIndexersWithInitCreateExpectations.Handler0, global::System.Action<uint, double>> This(global::Rocks.Argument<double> @value, global::Rocks.Argument<uint> @a)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@a);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var handler = new global::IHaveIndexersWithInitCreateExpectations.Handler0
							{
								@a = @a,
								@value = @value,
							};
							
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
							this.Expectations.handlers0.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::IHaveIndexersWithInitCreateExpectations.Handler1, global::System.Action<int, string, string>> This(global::Rocks.Argument<string> @value, global::Rocks.Argument<int> @a, global::Rocks.Argument<string> @b)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@a);
							global::System.ArgumentNullException.ThrowIfNull(@b);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var handler = new global::IHaveIndexersWithInitCreateExpectations.Handler1
							{
								@a = @a,
								@b = @b,
								@value = @value,
							};
							
							if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
							this.Expectations.handlers1.Add(handler);
							return new(handler);
						}
						internal global::Rocks.Adornments<global::IHaveIndexersWithInitCreateExpectations.Handler2, global::System.Action<string, int, global::System.Guid, int>> This(global::Rocks.Argument<int> @value, global::Rocks.Argument<string> @a, global::Rocks.Argument<int> @b, global::Rocks.Argument<global::System.Guid> @c)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@a);
							global::System.ArgumentNullException.ThrowIfNull(@b);
							global::System.ArgumentNullException.ThrowIfNull(@c);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var handler = new global::IHaveIndexersWithInitCreateExpectations.Handler2
							{
								@a = @a,
								@b = @b,
								@c = @c,
								@value = @value,
							};
							
							if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
							this.Expectations.handlers2.Add(handler);
							return new(handler);
						}
						private global::IHaveIndexersWithInitCreateExpectations Expectations { get; }
					}
					
					internal IndexerExpectations(global::IHaveIndexersWithInitCreateExpectations expectations) =>
						(this.Initializers) = (new(expectations));
					
					internal global::IHaveIndexersWithInitCreateExpectations.IndexerExpectations.IndexerInitializerExpectations Initializers { get; }
				}
				
				internal global::IHaveIndexersWithInitCreateExpectations.IndexerExpectations Indexers { get; }
				
				internal IHaveIndexersWithInitCreateExpectations() =>
					(this.Indexers) = (new(this));
				
				internal sealed class ConstructorProperties
					: global::System.Collections.Generic.IEnumerable<uint>, global::System.Collections.Generic.IEnumerable<(int, string)>, global::System.Collections.Generic.IEnumerable<(string, int, global::System.Guid)>
				{
					private readonly global::System.Collections.Generic.Dictionary<uint, double> i0 = new();
					private readonly global::System.Collections.Generic.Dictionary<(int, string), string> i1 = new();
					private readonly global::System.Collections.Generic.Dictionary<(string, int, global::System.Guid), int> i2 = new();
					
					global::System.Collections.Generic.IEnumerator<uint> global::System.Collections.Generic.IEnumerable<uint>.GetEnumerator()
					{
						foreach(var key in this.i0.Keys)
						{
							yield return key;
						}
					}
					global::System.Collections.Generic.IEnumerator<(int, string)> global::System.Collections.Generic.IEnumerable<(int, string)>.GetEnumerator()
					{
						foreach(var key in this.i1.Keys)
						{
							yield return key;
						}
					}
					global::System.Collections.Generic.IEnumerator<(string, int, global::System.Guid)> global::System.Collections.Generic.IEnumerable<(string, int, global::System.Guid)>.GetEnumerator()
					{
						foreach(var key in this.i2.Keys)
						{
							yield return key;
						}
					}
					
					global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() => throw new global::System.NotImplementedException();
					
					internal double this[uint a]
					{
						get => this.i0[a];
						init => this.i0[a] = value;
					}
					internal string this[int a, string b]
					{
						get => this.i1[(a, b)];
						init => this.i1[(a, b)] = value;
					}
					internal int this[string a, int b, global::System.Guid c]
					{
						get => this.i2[(a, b, c)];
						init => this.i2[(a, b, c)] = value;
					}
				}
				
				internal global::IHaveIndexersWithInit Instance(global::IHaveIndexersWithInitCreateExpectations.ConstructorProperties? @constructorProperties)
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this, @constructorProperties);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IHaveIndexersWithInit_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task MakeWhenTypeHasMultipleIndexersWithInitAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockMake<IHaveIndexersWithInit>]

			public interface IHaveIndexersWithInit
			{
				double this[uint a] { init; }
				string this[int a, string b] { init; }
				int this[string a, int b, Guid c] { init; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class IHaveIndexersWithInitMakeExpectations
			{
				internal sealed class ConstructorProperties
					: global::System.Collections.Generic.IEnumerable<uint>, global::System.Collections.Generic.IEnumerable<(int, string)>, global::System.Collections.Generic.IEnumerable<(string, int, global::System.Guid)>
				{
					private readonly global::System.Collections.Generic.Dictionary<uint, double> i0 = new();
					private readonly global::System.Collections.Generic.Dictionary<(int, string), string> i1 = new();
					private readonly global::System.Collections.Generic.Dictionary<(string, int, global::System.Guid), int> i2 = new();
					
					global::System.Collections.Generic.IEnumerator<uint> global::System.Collections.Generic.IEnumerable<uint>.GetEnumerator()
					{
						foreach(var key in this.i0.Keys)
						{
							yield return key;
						}
					}
					global::System.Collections.Generic.IEnumerator<(int, string)> global::System.Collections.Generic.IEnumerable<(int, string)>.GetEnumerator()
					{
						foreach(var key in this.i1.Keys)
						{
							yield return key;
						}
					}
					global::System.Collections.Generic.IEnumerator<(string, int, global::System.Guid)> global::System.Collections.Generic.IEnumerable<(string, int, global::System.Guid)>.GetEnumerator()
					{
						foreach(var key in this.i2.Keys)
						{
							yield return key;
						}
					}
					
					global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() => throw new global::System.NotImplementedException();
					
					internal double this[uint a]
					{
						get => this.i0[a];
						init => this.i0[a] = value;
					}
					internal string this[int a, string b]
					{
						get => this.i1[(a, b)];
						init => this.i1[(a, b)] = value;
					}
					internal int this[string a, int b, global::System.Guid c]
					{
						get => this.i2[(a, b, c)];
						init => this.i2[(a, b, c)] = value;
					}
					
				}
				
				internal global::IHaveIndexersWithInit Instance(global::IHaveIndexersWithInitMakeExpectations.ConstructorProperties? @constructorProperties)
				{
					return new Mock(@constructorProperties);
				}
				
				private sealed class Mock
					: global::IHaveIndexersWithInit
				{
					public Mock(ConstructorProperties? @constructorProperties)
					{
						if (@constructorProperties is not null)
						{
							foreach (var a in (global::System.Collections.Generic.IEnumerable<uint>)@constructorProperties)
							{
								this[a] = constructorProperties[a];
							}
							foreach ((var a, var b) in (global::System.Collections.Generic.IEnumerable<(int, string)>)@constructorProperties)
							{
								this[a, b] = constructorProperties[a, b];
							}
							foreach ((var a, var b, var c) in (global::System.Collections.Generic.IEnumerable<(string, int, global::System.Guid)>)@constructorProperties)
							{
								this[a, b, c] = constructorProperties[a, b, c];
							}
						}
					}
					
					public double this[uint @a]
					{
						init { }
					}
					public string this[int @a, string @b]
					{
						init { }
					}
					public int this[string @a, int @b, global::System.Guid @c]
					{
						init { }
					}
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IHaveIndexersWithInit_Rock_Make.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<MockTests.Target>]

			namespace MockTests
			{
				public abstract class Target
				{
					public abstract int this[int a] { get; init; }
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			namespace MockTests
			{
				internal sealed class TargetCreateExpectations
					: global::Rocks.Expectations
				{
					#pragma warning disable CS8618
					
					internal sealed class Handler0
						: global::Rocks.Handler<global::System.Func<object?, bool>, bool>
					{
						public global::Rocks.Argument<object?> @obj { get; set; }
					}
					
					internal sealed class Handler1
						: global::Rocks.Handler<global::System.Func<int>, int>
					{ }
					
					internal sealed class Handler2
						: global::Rocks.Handler<global::System.Func<string?>, string?>
					{ }
					
					internal sealed class Handler3
						: global::Rocks.Handler<global::System.Func<int, int>, int>
					{
						public global::Rocks.Argument<int> @a { get; set; }
					}
					
					internal sealed class Handler4
						: global::Rocks.Handler<global::System.Action<int, int>>
					{
						public global::Rocks.Argument<int> @a { get; set; }
						public global::Rocks.Argument<int> @value { get; set; }
					}
					
					#pragma warning restore CS8618
					
					private global::System.Collections.Generic.List<global::MockTests.TargetCreateExpectations.Handler0>? @handlers0;
					private global::System.Collections.Generic.List<global::MockTests.TargetCreateExpectations.Handler1>? @handlers1;
					private global::System.Collections.Generic.List<global::MockTests.TargetCreateExpectations.Handler2>? @handlers2;
					private global::System.Collections.Generic.List<global::MockTests.TargetCreateExpectations.Handler3>? @handlers3;
					private global::System.Collections.Generic.List<global::MockTests.TargetCreateExpectations.Handler4>? @handlers4;
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
							if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
							if (this.handlers2?.Count > 0) { failures.AddRange(this.Verify(this.handlers2, 2)); }
							if (this.handlers3?.Count > 0) { failures.AddRange(this.Verify(this.handlers3, 3)); }
							if (this.handlers4?.Count > 0) { failures.AddRange(this.Verify(this.handlers4, 4)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.Target
					{
						public Mock(global::MockTests.TargetCreateExpectations @expectations, ConstructorProperties? @constructorProperties)
						{
							this.Expectations = @expectations;
							if (@constructorProperties is not null)
							{
								foreach (var a in ((global::System.Collections.Generic.IEnumerable<int>)@constructorProperties))
								{
									this[a] = constructorProperties[a];
								}
							}
						}
						
						[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
						public override bool Equals(object? @obj)
						{
							if (this.Expectations.handlers0?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@obj.IsValid(@obj!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@obj!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
							}
							else
							{
								return base.Equals(obj: @obj!);
							}
						}
						
						[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
						public override int GetHashCode()
						{
							if (this.Expectations.handlers1?.Count > 0)
							{
								var @handler = this.Expectations.handlers1[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.GetHashCode();
							}
						}
						
						[global::Rocks.MemberIdentifier(2, "string? ToString()")]
						public override string? ToString()
						{
							if (this.Expectations.handlers2?.Count > 0)
							{
								var @handler = this.Expectations.handlers2[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							else
							{
								return base.ToString();
							}
						}
						
						[global::Rocks.MemberIdentifier(3, "this[int @a]")]
						[global::Rocks.MemberIdentifier(4, "this[int @a]")]
						public override int this[int @a]
						{
							get
							{
								if (this.Expectations.handlers3?.Count > 0)
								{
									foreach (var @handler in this.Expectations.handlers3)
									{
										if (@handler.@a.IsValid(@a!))
										{
											@handler.CallCount++;
											var @result = @handler.Callback is not null ?
												@handler.Callback(@a!) : @handler.ReturnValue;
											return @result!;
										}
									}
									
									throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[int @a]");
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[int @a])");
							}
							init
							{
								if (this.Expectations.handlers4?.Count > 0)
								{
									foreach (var @handler in this.Expectations.handlers4)
									{
										if (@handler.@a.IsValid(@a!) &&
											@handler.@value.IsValid(@value!))
										{
											@handler.CallCount++;
											@handler.Callback?.Invoke(@a!, @value!);
											return;
										}
									}
									
									throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[int @a]");
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[int @a])");
							}
						}
						
						private global::MockTests.TargetCreateExpectations Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.TargetCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::MockTests.TargetCreateExpectations.Handler0, global::System.Func<object?, bool>, bool> Equals(global::Rocks.Argument<object?> @obj)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@obj);
							
							var handler = new global::MockTests.TargetCreateExpectations.Handler0
							{
								@obj = @obj,
							};
							
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
							this.Expectations.handlers0.Add(handler);
							return new(handler);
						}
						
						internal new global::Rocks.Adornments<global::MockTests.TargetCreateExpectations.Handler1, global::System.Func<int>, int> GetHashCode()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
							var handler = new global::MockTests.TargetCreateExpectations.Handler1();
							this.Expectations.handlers1.Add(handler);
							return new(handler);
						}
						
						internal new global::Rocks.Adornments<global::MockTests.TargetCreateExpectations.Handler2, global::System.Func<string?>, string?> ToString()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							if (this.Expectations.handlers2 is null ) { this.Expectations.handlers2 = new(); }
							var handler = new global::MockTests.TargetCreateExpectations.Handler2();
							this.Expectations.handlers2.Add(handler);
							return new(handler);
						}
						
						private global::MockTests.TargetCreateExpectations Expectations { get; }
					}
					
					internal sealed class IndexerExpectations
					{
						internal sealed class IndexerGetterExpectations
						{
							internal IndexerGetterExpectations(global::MockTests.TargetCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::Rocks.Adornments<global::MockTests.TargetCreateExpectations.Handler3, global::System.Func<int, int>, int> This(global::Rocks.Argument<int> @a)
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								global::System.ArgumentNullException.ThrowIfNull(@a);
								
								var handler = new global::MockTests.TargetCreateExpectations.Handler3
								{
									@a = @a,
								};
								
								if (this.Expectations.handlers3 is null ) { this.Expectations.handlers3 = new(); }
								this.Expectations.handlers3.Add(handler);
								return new(handler);
							}
							private global::MockTests.TargetCreateExpectations Expectations { get; }
						}
						
						internal sealed class IndexerInitializerExpectations
						{
							internal IndexerInitializerExpectations(global::MockTests.TargetCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::Rocks.Adornments<global::MockTests.TargetCreateExpectations.Handler4, global::System.Action<int, int>> This(global::Rocks.Argument<int> @value, global::Rocks.Argument<int> @a)
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								global::System.ArgumentNullException.ThrowIfNull(@a);
								global::System.ArgumentNullException.ThrowIfNull(@value);
								
								var handler = new global::MockTests.TargetCreateExpectations.Handler4
								{
									@a = @a,
									@value = @value,
								};
								
								if (this.Expectations.handlers4 is null ) { this.Expectations.handlers4 = new(); }
								this.Expectations.handlers4.Add(handler);
								return new(handler);
							}
							private global::MockTests.TargetCreateExpectations Expectations { get; }
						}
						
						internal IndexerExpectations(global::MockTests.TargetCreateExpectations expectations) =>
							(this.Getters, this.Initializers) = (new(expectations), new(expectations));
						
						internal global::MockTests.TargetCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
						internal global::MockTests.TargetCreateExpectations.IndexerExpectations.IndexerInitializerExpectations Initializers { get; }
					}
					
					internal global::MockTests.TargetCreateExpectations.MethodExpectations Methods { get; }
					internal global::MockTests.TargetCreateExpectations.IndexerExpectations Indexers { get; }
					
					internal TargetCreateExpectations() =>
						(this.Methods, this.Indexers) = (new(this), new(this));
					
					internal sealed class ConstructorProperties
						: global::System.Collections.Generic.IEnumerable<int>
					{
						private readonly global::System.Collections.Generic.Dictionary<int, int> i0 = new();
						
						global::System.Collections.Generic.IEnumerator<int> global::System.Collections.Generic.IEnumerable<int>.GetEnumerator()
						{
							foreach(var key in this.i0.Keys)
							{
								yield return key;
							}
						}
						
						global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() => throw new global::System.NotImplementedException();
						
						internal int this[int a]
						{
							get => this.i0[a];
							init => this.i0[a] = value;
						}
					}
					
					internal global::MockTests.Target Instance(global::MockTests.TargetCreateExpectations.ConstructorProperties? @constructorProperties)
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this, @constructorProperties);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MockTests.Target_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}
}