using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class ProjectionFunctionPointerGeneratorTests
{
	[Test]
	public static async Task GenerateWithFunctionPointerParameterAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: Rock(typeof(MockTests.IHavePointers), BuildType.Create | BuildType.Make)]

			#nullable enable

			namespace MockTests
			{
				public unsafe interface IHavePointers
				{
					void FunctionPointerParameter(delegate*<int, void> value);
				}
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IHavePointersCreateExpectations
					: global::Rocks.Expectations
				{
					internal static class Projections
					{
						internal unsafe delegate void Callback_190405175200901836134072682481961192767771721226(delegate*<int, void> @value);
						internal unsafe delegate bool ArgumentEvaluationFordelegatePointerOfint__void(delegate*<int, void> @value);
						
						internal unsafe sealed class ArgumentFordelegatePointerOfint__void
							: global::Rocks.Argument
						{
							private readonly global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentEvaluationFordelegatePointerOfint__void? evaluation;
							private readonly delegate*<int, void> value;
							private readonly global::Rocks.ValidationState validation;
							
							internal ArgumentFordelegatePointerOfint__void() => this.validation = global::Rocks.ValidationState.None;
							
							internal ArgumentFordelegatePointerOfint__void(delegate*<int, void> @value)
							{
								this.value = @value;
								this.validation = global::Rocks.ValidationState.Value;
							}
							
							internal ArgumentFordelegatePointerOfint__void(global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentEvaluationFordelegatePointerOfint__void @evaluation)
							{
								this.evaluation = @evaluation;
								this.validation = global::Rocks.ValidationState.Evaluation;
							}
							
							public bool IsValid(delegate*<int, void> @value) =>
								this.validation switch
								{
									global::Rocks.ValidationState.None => true,
									#pragma warning disable CS8909
									global::Rocks.ValidationState.Value => @value == this.value,
									#pragma warning restore CS8909
									global::Rocks.ValidationState.Evaluation => this.evaluation!(@value),
									global::Rocks.ValidationState.DefaultValue => throw new global::System.NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
									_ => throw new global::System.ComponentModel.InvalidEnumArgumentException($"Invalid value for validation: {this.validation}")
								};
						}
					}
					
					internal sealed class Handler0
						: global::Rocks.Handler<global::MockTests.IHavePointersCreateExpectations.Projections.Callback_190405175200901836134072682481961192767771721226>
					{
						public global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentFordelegatePointerOfint__void @value { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.IHavePointersCreateExpectations.Handler0>? @handlers0;
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.IHavePointers
					{
						public Mock(global::MockTests.IHavePointersCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0)]
						public unsafe void FunctionPointerParameter(delegate*<int, void> @value)
						{
							if (this.Expectations.handlers0 is not null)
							{
								var @foundMatch = false;
								
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@value.IsValid(@value!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(@value!);
										break;
									}
								}
								
								if (!@foundMatch)
								{
									throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
								}
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
							}
						}
						
						private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::MockTests.IHavePointersCreateExpectations.Adornments.AdornmentsForHandler0 FunctionPointerParameter(global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentFordelegatePointerOfint__void @value)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var @handler = new global::MockTests.IHavePointersCreateExpectations.Handler0
							{
								@value = @value,
							};
							
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
							else { this.Expectations.handlers0.Add(@handler); }
							return new(@handler);
						}
						
						private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
					}
					
					internal global::MockTests.IHavePointersCreateExpectations.MethodExpectations Methods { get; }
					
					internal IHavePointersCreateExpectations() =>
						(this.Methods) = (new(this));
					
					internal global::MockTests.IHavePointers Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForIHavePointers<TAdornments>
							: global::Rocks.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForIHavePointers<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::Rocks.Adornments<AdornmentsForHandler0, global::MockTests.IHavePointersCreateExpectations.Handler0, global::MockTests.IHavePointersCreateExpectations.Projections.Callback_190405175200901836134072682481961192767771721226>, IAdornmentsForIHavePointers<AdornmentsForHandler0>
						{
							public AdornmentsForHandler0(global::MockTests.IHavePointersCreateExpectations.Handler0 handler)
								: base(handler) { }
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IHavePointersMakeExpectations
				{
					internal global::MockTests.IHavePointers Instance()
					{
						return new Mock();
					}
					
					private sealed class Mock
						: global::MockTests.IHavePointers
					{
						public Mock()
						{
						}
						
						public unsafe void FunctionPointerParameter(delegate*<int, void> @value)
						{
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MockTests.IHavePointers_Rock_Create.g.cs", createGeneratedCode),
				("MockTests.IHavePointers_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithFunctionPointerReturnAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: Rock(typeof(MockTests.IHavePointers), BuildType.Create | BuildType.Make)]

			#nullable enable

			namespace MockTests
			{
				public unsafe interface IHavePointers
				{
					delegate*<int, void> FunctionPointerReturn();
				}
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IHavePointersCreateExpectations
					: global::Rocks.Expectations
				{
					internal static class Projections
					{
						internal unsafe delegate delegate*<int, void> Callback_21763219907570820974231853792762578898451171267();
						internal unsafe class HandlerFordelegatePointerOfint__void<TCallback>
							: global::Rocks.Handler<TCallback>
							where TCallback : global::System.Delegate
						{
							public delegate*<int, void> ReturnValue { get; set; }
						}
						
						internal unsafe class AdornmentsFordelegatePointerOfint__void<TAdornments, TCallback>
							: global::Rocks.Adornments<TAdornments, HandlerFordelegatePointerOfint__void<TCallback>, TCallback>
							where TAdornments : AdornmentsFordelegatePointerOfint__void<TAdornments, TCallback>
							where TCallback : global::System.Delegate
						{
							internal AdornmentsFordelegatePointerOfint__void(HandlerFordelegatePointerOfint__void<TCallback> handler)
								: base(handler) { }
							
							internal AdornmentsFordelegatePointerOfint__void<TAdornments, TCallback> ReturnValue(delegate*<int, void> returnValue)
							{
								this.handler.ReturnValue = returnValue;
								return this;
							}
						}
					}
					
					internal sealed class Handler0
						: global::MockTests.IHavePointersCreateExpectations.Projections.HandlerFordelegatePointerOfint__void<global::MockTests.IHavePointersCreateExpectations.Projections.Callback_21763219907570820974231853792762578898451171267>
					{ }
					private global::Rocks.Handlers<global::MockTests.IHavePointersCreateExpectations.Handler0>? @handlers0;
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.IHavePointers
					{
						public Mock(global::MockTests.IHavePointersCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0)]
						public unsafe delegate*<int, void> FunctionPointerReturn()
						{
							if (this.Expectations.handlers0 is not null)
							{
								var @handler = this.Expectations.handlers0.First;
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue;
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
						}
						
						private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
					}
					
					internal sealed class MethodExpectations
					{
						internal MethodExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::MockTests.IHavePointersCreateExpectations.Adornments.AdornmentsForHandler0 FunctionPointerReturn()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							var handler = new global::MockTests.IHavePointersCreateExpectations.Handler0();
							if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(handler); }
							else { this.Expectations.handlers0.Add(handler); }
							return new(handler);
						}
						
						private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
					}
					
					internal global::MockTests.IHavePointersCreateExpectations.MethodExpectations Methods { get; }
					
					internal IHavePointersCreateExpectations() =>
						(this.Methods) = (new(this));
					
					internal global::MockTests.IHavePointers Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForIHavePointers<TAdornments>
							: global::Rocks.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForIHavePointers<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::MockTests.IHavePointersCreateExpectations.Projections.AdornmentsFordelegatePointerOfint__void<AdornmentsForHandler0, global::MockTests.IHavePointersCreateExpectations.Projections.Callback_21763219907570820974231853792762578898451171267>, IAdornmentsForIHavePointers<AdornmentsForHandler0>
						{
							public AdornmentsForHandler0(global::MockTests.IHavePointersCreateExpectations.Handler0 handler)
								: base(handler) { }
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IHavePointersMakeExpectations
				{
					internal global::MockTests.IHavePointers Instance()
					{
						return new Mock();
					}
					
					private sealed class Mock
						: global::MockTests.IHavePointers
					{
						public Mock()
						{
						}
						
						public unsafe delegate*<int, void> FunctionPointerReturn()
						{
							return default!;
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MockTests.IHavePointers_Rock_Create.g.cs", createGeneratedCode),
				("MockTests.IHavePointers_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithFunctionPointerPropertyAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: Rock(typeof(MockTests.IHavePointers), BuildType.Create | BuildType.Make)]

			#nullable enable

			namespace MockTests
			{
				public unsafe interface IHavePointers
				{
					delegate*<int, void> Data { get; set; }
				}
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IHavePointersCreateExpectations
					: global::Rocks.Expectations
				{
					internal static class Projections
					{
						internal unsafe delegate delegate*<int, void> Callback_21763219907570820974231853792762578898451171267();
						internal unsafe delegate void Callback_190405175200901836134072682481961192767771721226(delegate*<int, void> @value);
						internal unsafe delegate bool ArgumentEvaluationFordelegatePointerOfint__void(delegate*<int, void> @value);
						
						internal unsafe sealed class ArgumentFordelegatePointerOfint__void
							: global::Rocks.Argument
						{
							private readonly global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentEvaluationFordelegatePointerOfint__void? evaluation;
							private readonly delegate*<int, void> value;
							private readonly global::Rocks.ValidationState validation;
							
							internal ArgumentFordelegatePointerOfint__void() => this.validation = global::Rocks.ValidationState.None;
							
							internal ArgumentFordelegatePointerOfint__void(delegate*<int, void> @value)
							{
								this.value = @value;
								this.validation = global::Rocks.ValidationState.Value;
							}
							
							internal ArgumentFordelegatePointerOfint__void(global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentEvaluationFordelegatePointerOfint__void @evaluation)
							{
								this.evaluation = @evaluation;
								this.validation = global::Rocks.ValidationState.Evaluation;
							}
							
							public bool IsValid(delegate*<int, void> @value) =>
								this.validation switch
								{
									global::Rocks.ValidationState.None => true,
									#pragma warning disable CS8909
									global::Rocks.ValidationState.Value => @value == this.value,
									#pragma warning restore CS8909
									global::Rocks.ValidationState.Evaluation => this.evaluation!(@value),
									global::Rocks.ValidationState.DefaultValue => throw new global::System.NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
									_ => throw new global::System.ComponentModel.InvalidEnumArgumentException($"Invalid value for validation: {this.validation}")
								};
						}
						internal unsafe class HandlerFordelegatePointerOfint__void<TCallback>
							: global::Rocks.Handler<TCallback>
							where TCallback : global::System.Delegate
						{
							public delegate*<int, void> ReturnValue { get; set; }
						}
						
						internal unsafe class AdornmentsFordelegatePointerOfint__void<TAdornments, TCallback>
							: global::Rocks.Adornments<TAdornments, HandlerFordelegatePointerOfint__void<TCallback>, TCallback>
							where TAdornments : AdornmentsFordelegatePointerOfint__void<TAdornments, TCallback>
							where TCallback : global::System.Delegate
						{
							internal AdornmentsFordelegatePointerOfint__void(HandlerFordelegatePointerOfint__void<TCallback> handler)
								: base(handler) { }
							
							internal AdornmentsFordelegatePointerOfint__void<TAdornments, TCallback> ReturnValue(delegate*<int, void> returnValue)
							{
								this.handler.ReturnValue = returnValue;
								return this;
							}
						}
					}
					
					internal sealed class Handler0
						: global::MockTests.IHavePointersCreateExpectations.Projections.HandlerFordelegatePointerOfint__void<global::MockTests.IHavePointersCreateExpectations.Projections.Callback_21763219907570820974231853792762578898451171267>
					{ }
					private global::Rocks.Handlers<global::MockTests.IHavePointersCreateExpectations.Handler0>? @handlers0;
					internal sealed class Handler1
						: global::Rocks.Handler<global::MockTests.IHavePointersCreateExpectations.Projections.Callback_190405175200901836134072682481961192767771721226>
					{
						public global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentFordelegatePointerOfint__void @value { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.IHavePointersCreateExpectations.Handler1>? @handlers1;
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
							if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.IHavePointers
					{
						public Mock(global::MockTests.IHavePointersCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0, global::Rocks.PropertyAccessor.Get)]
						[global::Rocks.MemberIdentifier(1, global::Rocks.PropertyAccessor.Set)]
						public unsafe delegate*<int, void> Data
						{
							get
							{
								if (this.Expectations.handlers0 is not null)
								{
									var @handler = this.Expectations.handlers0.First;
									@handler.CallCount++;
									var @result = @handler.Callback is not null ?
										@handler.Callback() : @handler.ReturnValue;
									return @result!;
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)})");
							}
							set
							{
								if (this.Expectations.handlers1 is not null)
								{
									var @foundMatch = false;
									foreach (var @handler in this.Expectations.handlers1)
									{
										if (@handler.value.IsValid(value!))
										{
											@handler.CallCount++;
											@foundMatch = true;
											@handler.Callback?.Invoke(value!);
											
											if (!@foundMatch)
											{
												throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(1)}");
											}
											
											break;
										}
									}
								}
								else
								{
									throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
								}
							}
						}
						
						private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
					}
					internal sealed class PropertyExpectations
					{
						internal sealed class PropertyGetterExpectations
						{
							internal PropertyGetterExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::MockTests.IHavePointersCreateExpectations.Adornments.AdornmentsForHandler0 Data()
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								var handler = new global::MockTests.IHavePointersCreateExpectations.Handler0();
								if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(handler); }
								else { this.Expectations.handlers0.Add(handler); }
								return new(handler);
							}
							private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
						}
						
						internal sealed class PropertySetterExpectations
						{
							internal PropertySetterExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::MockTests.IHavePointersCreateExpectations.Adornments.AdornmentsForHandler1 Data(global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentFordelegatePointerOfint__void @value)
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								global::System.ArgumentNullException.ThrowIfNull(@value);
							
								var handler = new global::MockTests.IHavePointersCreateExpectations.Handler1
								{
									value = @value,
								};
							
								if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(handler); }
								else { this.Expectations.handlers1.Add(handler); }
								return new(handler);
							}
							private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
						}
						
						internal PropertyExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
							(this.Getters, this.Setters) = (new(expectations), new(expectations));
						
						internal global::MockTests.IHavePointersCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
						internal global::MockTests.IHavePointersCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
					}
					
					internal global::MockTests.IHavePointersCreateExpectations.PropertyExpectations Properties { get; }
					
					internal IHavePointersCreateExpectations() =>
						(this.Properties) = (new(this));
					
					internal global::MockTests.IHavePointers Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForIHavePointers<TAdornments>
							: global::Rocks.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForIHavePointers<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::MockTests.IHavePointersCreateExpectations.Projections.AdornmentsFordelegatePointerOfint__void<AdornmentsForHandler0, global::MockTests.IHavePointersCreateExpectations.Projections.Callback_21763219907570820974231853792762578898451171267>, IAdornmentsForIHavePointers<AdornmentsForHandler0>
						{
							public AdornmentsForHandler0(global::MockTests.IHavePointersCreateExpectations.Handler0 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler1
							: global::Rocks.Adornments<AdornmentsForHandler1, global::MockTests.IHavePointersCreateExpectations.Handler1, global::MockTests.IHavePointersCreateExpectations.Projections.Callback_190405175200901836134072682481961192767771721226>, IAdornmentsForIHavePointers<AdornmentsForHandler1>
						{
							public AdornmentsForHandler1(global::MockTests.IHavePointersCreateExpectations.Handler1 handler)
								: base(handler) { }
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IHavePointersMakeExpectations
				{
					internal global::MockTests.IHavePointers Instance()
					{
						return new Mock();
					}
					
					private sealed class Mock
						: global::MockTests.IHavePointers
					{
						public Mock()
						{
						}
						
						public unsafe delegate*<int, void> Data
						{
							get => default!;
							set { }
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MockTests.IHavePointers_Rock_Create.g.cs", createGeneratedCode),
				("MockTests.IHavePointers_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithFunctionPointerIndexerParameterAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: Rock(typeof(MockTests.IHavePointers), BuildType.Create | BuildType.Make)]

			#nullable enable

			namespace MockTests
			{
				public unsafe interface IHavePointers
				{
					string this[delegate*<int, void> index] { get; set; }
				}
			}
			
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IHavePointersCreateExpectations
					: global::Rocks.Expectations
				{
					internal static class Projections
					{
						internal unsafe delegate string Callback_569015130962673970970166158518857080183518071990(delegate*<int, void> @index);
						internal unsafe delegate void Callback_685325684978960348804638980049239306739591139789(delegate*<int, void> @index, string @value);
						internal unsafe delegate bool ArgumentEvaluationFordelegatePointerOfint__void(delegate*<int, void> @value);
						
						internal unsafe sealed class ArgumentFordelegatePointerOfint__void
							: global::Rocks.Argument
						{
							private readonly global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentEvaluationFordelegatePointerOfint__void? evaluation;
							private readonly delegate*<int, void> value;
							private readonly global::Rocks.ValidationState validation;
							
							internal ArgumentFordelegatePointerOfint__void() => this.validation = global::Rocks.ValidationState.None;
							
							internal ArgumentFordelegatePointerOfint__void(delegate*<int, void> @value)
							{
								this.value = @value;
								this.validation = global::Rocks.ValidationState.Value;
							}
							
							internal ArgumentFordelegatePointerOfint__void(global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentEvaluationFordelegatePointerOfint__void @evaluation)
							{
								this.evaluation = @evaluation;
								this.validation = global::Rocks.ValidationState.Evaluation;
							}
							
							public bool IsValid(delegate*<int, void> @value) =>
								this.validation switch
								{
									global::Rocks.ValidationState.None => true,
									#pragma warning disable CS8909
									global::Rocks.ValidationState.Value => @value == this.value,
									#pragma warning restore CS8909
									global::Rocks.ValidationState.Evaluation => this.evaluation!(@value),
									global::Rocks.ValidationState.DefaultValue => throw new global::System.NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
									_ => throw new global::System.ComponentModel.InvalidEnumArgumentException($"Invalid value for validation: {this.validation}")
								};
						}
					}
					
					internal sealed class Handler0
						: global::Rocks.Handler<global::MockTests.IHavePointersCreateExpectations.Projections.Callback_569015130962673970970166158518857080183518071990, string>
					{
						public global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentFordelegatePointerOfint__void @index { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.IHavePointersCreateExpectations.Handler0>? @handlers0;
					internal sealed class Handler1
						: global::Rocks.Handler<global::MockTests.IHavePointersCreateExpectations.Projections.Callback_685325684978960348804638980049239306739591139789>
					{
						public global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentFordelegatePointerOfint__void @index { get; set; }
						public global::Rocks.Argument<string> @value { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.IHavePointersCreateExpectations.Handler1>? @handlers1;
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
							if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.IHavePointers
					{
						public Mock(global::MockTests.IHavePointersCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0, global::Rocks.PropertyAccessor.Get)]
						[global::Rocks.MemberIdentifier(1, global::Rocks.PropertyAccessor.Set)]
						public unsafe string this[delegate*<int, void> @index]
						{
							get
							{
								if (this.Expectations.handlers0 is not null)
								{
									foreach (var @handler in this.Expectations.handlers0)
									{
										if (@handler.@index.IsValid(@index!))
										{
											@handler.CallCount++;
											var @result = @handler.Callback is not null ?
												@handler.Callback(@index!) : @handler.ReturnValue;
											return @result!;
										}
									}
									
									throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)})");
							}
							set
							{
								if (this.Expectations.handlers1 is not null)
								{
									foreach (var @handler in this.Expectations.handlers1)
									{
										if (@handler.@index.IsValid(@index!) &&
											@handler.@value.IsValid(@value!))
										{
											@handler.CallCount++;
											@handler.Callback?.Invoke(@index!, @value!);
											return;
										}
									}
									
									throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(1)}");
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
							}
						}
						
						private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
					}
					internal sealed class IndexerExpectations
					{
						internal sealed class IndexerGetterExpectations
						{
							internal IndexerGetterExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::MockTests.IHavePointersCreateExpectations.Adornments.AdornmentsForHandler0 This(global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentFordelegatePointerOfint__void @index)
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								global::System.ArgumentNullException.ThrowIfNull(@index);
								
								var @handler = new global::MockTests.IHavePointersCreateExpectations.Handler0
								{
									@index = @index,
								};
								
								if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
								else { this.Expectations.handlers0.Add(@handler); }
								return new(@handler);
							}
							private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
						}
						
						internal sealed class IndexerSetterExpectations
						{
							internal IndexerSetterExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::MockTests.IHavePointersCreateExpectations.Adornments.AdornmentsForHandler1 This(global::Rocks.Argument<string> @value, global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentFordelegatePointerOfint__void @index)
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								global::System.ArgumentNullException.ThrowIfNull(@index);
								global::System.ArgumentNullException.ThrowIfNull(@value);
								
								var @handler = new global::MockTests.IHavePointersCreateExpectations.Handler1
								{
									@index = @index,
									@value = @value,
								};
								
								if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
								else { this.Expectations.handlers1.Add(@handler); }
								return new(@handler);
							}
							private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
						}
						
						internal IndexerExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
							(this.Getters, this.Setters) = (new(expectations), new(expectations));
						
						internal global::MockTests.IHavePointersCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
						internal global::MockTests.IHavePointersCreateExpectations.IndexerExpectations.IndexerSetterExpectations Setters { get; }
					}
					
					internal global::MockTests.IHavePointersCreateExpectations.IndexerExpectations Indexers { get; }
					
					internal IHavePointersCreateExpectations() =>
						(this.Indexers) = (new(this));
					
					internal global::MockTests.IHavePointers Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForIHavePointers<TAdornments>
							: global::Rocks.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForIHavePointers<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::Rocks.Adornments<AdornmentsForHandler0, global::MockTests.IHavePointersCreateExpectations.Handler0, global::MockTests.IHavePointersCreateExpectations.Projections.Callback_569015130962673970970166158518857080183518071990, string>, IAdornmentsForIHavePointers<AdornmentsForHandler0>
						{
							public AdornmentsForHandler0(global::MockTests.IHavePointersCreateExpectations.Handler0 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler1
							: global::Rocks.Adornments<AdornmentsForHandler1, global::MockTests.IHavePointersCreateExpectations.Handler1, global::MockTests.IHavePointersCreateExpectations.Projections.Callback_685325684978960348804638980049239306739591139789>, IAdornmentsForIHavePointers<AdornmentsForHandler1>
						{
							public AdornmentsForHandler1(global::MockTests.IHavePointersCreateExpectations.Handler1 handler)
								: base(handler) { }
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IHavePointersMakeExpectations
				{
					internal global::MockTests.IHavePointers Instance()
					{
						return new Mock();
					}
					
					private sealed class Mock
						: global::MockTests.IHavePointers
					{
						public Mock()
						{
						}
						
						public unsafe string this[delegate*<int, void> @index]
						{
							get => default!;
							set { }
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MockTests.IHavePointers_Rock_Create.g.cs", createGeneratedCode),
				("MockTests.IHavePointers_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}

	[Test]
	public static async Task GenerateWithFunctionPointerIndexerReturnValueAsync()
	{
		var code =
			"""
			using Rocks;
			using System;
			
			[assembly: Rock(typeof(MockTests.IHavePointers), BuildType.Create | BuildType.Make)]

			#nullable enable

			namespace MockTests
			{
				public unsafe interface IHavePointers
				{
					delegate*<int, void> this[string index] { get; set; }
				}
			}
			""";

		var createGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			using Rocks.Extensions;
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IHavePointersCreateExpectations
					: global::Rocks.Expectations
				{
					internal static class Projections
					{
						internal unsafe delegate delegate*<int, void> Callback_349909950755307474321032969938976654826966807638(string @index);
						internal unsafe delegate void Callback_189832623536291723139685821763903856879932142527(string @index, delegate*<int, void> @value);
						internal unsafe delegate bool ArgumentEvaluationFordelegatePointerOfint__void(delegate*<int, void> @value);
						
						internal unsafe sealed class ArgumentFordelegatePointerOfint__void
							: global::Rocks.Argument
						{
							private readonly global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentEvaluationFordelegatePointerOfint__void? evaluation;
							private readonly delegate*<int, void> value;
							private readonly global::Rocks.ValidationState validation;
							
							internal ArgumentFordelegatePointerOfint__void() => this.validation = global::Rocks.ValidationState.None;
							
							internal ArgumentFordelegatePointerOfint__void(delegate*<int, void> @value)
							{
								this.value = @value;
								this.validation = global::Rocks.ValidationState.Value;
							}
							
							internal ArgumentFordelegatePointerOfint__void(global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentEvaluationFordelegatePointerOfint__void @evaluation)
							{
								this.evaluation = @evaluation;
								this.validation = global::Rocks.ValidationState.Evaluation;
							}
							
							public bool IsValid(delegate*<int, void> @value) =>
								this.validation switch
								{
									global::Rocks.ValidationState.None => true,
									#pragma warning disable CS8909
									global::Rocks.ValidationState.Value => @value == this.value,
									#pragma warning restore CS8909
									global::Rocks.ValidationState.Evaluation => this.evaluation!(@value),
									global::Rocks.ValidationState.DefaultValue => throw new global::System.NotSupportedException("Cannot validate an argument value in the ValidationState.DefaultValue state."),
									_ => throw new global::System.ComponentModel.InvalidEnumArgumentException($"Invalid value for validation: {this.validation}")
								};
						}
						internal unsafe class HandlerFordelegatePointerOfint__void<TCallback>
							: global::Rocks.Handler<TCallback>
							where TCallback : global::System.Delegate
						{
							public delegate*<int, void> ReturnValue { get; set; }
						}
						
						internal unsafe class AdornmentsFordelegatePointerOfint__void<TAdornments, TCallback>
							: global::Rocks.Adornments<TAdornments, HandlerFordelegatePointerOfint__void<TCallback>, TCallback>
							where TAdornments : AdornmentsFordelegatePointerOfint__void<TAdornments, TCallback>
							where TCallback : global::System.Delegate
						{
							internal AdornmentsFordelegatePointerOfint__void(HandlerFordelegatePointerOfint__void<TCallback> handler)
								: base(handler) { }
							
							internal AdornmentsFordelegatePointerOfint__void<TAdornments, TCallback> ReturnValue(delegate*<int, void> returnValue)
							{
								this.handler.ReturnValue = returnValue;
								return this;
							}
						}
					}
					
					internal sealed class Handler0
						: global::MockTests.IHavePointersCreateExpectations.Projections.HandlerFordelegatePointerOfint__void<global::MockTests.IHavePointersCreateExpectations.Projections.Callback_349909950755307474321032969938976654826966807638>
					{
						public global::Rocks.Argument<string> @index { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.IHavePointersCreateExpectations.Handler0>? @handlers0;
					internal sealed class Handler1
						: global::Rocks.Handler<global::MockTests.IHavePointersCreateExpectations.Projections.Callback_189832623536291723139685821763903856879932142527>
					{
						public global::Rocks.Argument<string> @index { get; set; }
						public global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentFordelegatePointerOfint__void @value { get; set; }
					}
					private global::Rocks.Handlers<global::MockTests.IHavePointersCreateExpectations.Handler1>? @handlers1;
					
					public override void Verify()
					{
						if (this.WasInstanceInvoked)
						{
							var failures = new global::System.Collections.Generic.List<string>();
					
							if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
							if (this.handlers1 is not null) { failures.AddRange(this.Verify(this.handlers1, 1)); }
					
							if (failures.Count > 0)
							{
								throw new global::Rocks.Exceptions.VerificationException(failures);
							}
						}
					}
					
					private sealed class Mock
						: global::MockTests.IHavePointers
					{
						public Mock(global::MockTests.IHavePointersCreateExpectations @expectations)
						{
							this.Expectations = @expectations;
						}
						
						[global::Rocks.MemberIdentifier(0, global::Rocks.PropertyAccessor.Get)]
						[global::Rocks.MemberIdentifier(1, global::Rocks.PropertyAccessor.Set)]
						public unsafe delegate*<int, void> this[string @index]
						{
							get
							{
								if (this.Expectations.handlers0 is not null)
								{
									foreach (var @handler in this.Expectations.handlers0)
									{
										if (@handler.@index.IsValid(@index!))
										{
											@handler.CallCount++;
											var @result = @handler.Callback is not null ?
												@handler.Callback(@index!) : @handler.ReturnValue;
											return @result!;
										}
									}
									
									throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)})");
							}
							set
							{
								if (this.Expectations.handlers1 is not null)
								{
									foreach (var @handler in this.Expectations.handlers1)
									{
										if (@handler.@index.IsValid(@index!) &&
											@handler.@value.IsValid(@value!))
										{
											@handler.CallCount++;
											@handler.Callback?.Invoke(@index!, @value!);
											return;
										}
									}
									
									throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(1)}");
								}
								
								throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(1)}");
							}
						}
						
						private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
					}
					internal sealed class IndexerExpectations
					{
						internal sealed class IndexerGetterExpectations
						{
							internal IndexerGetterExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::MockTests.IHavePointersCreateExpectations.Adornments.AdornmentsForHandler0 This(global::Rocks.Argument<string> @index)
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								global::System.ArgumentNullException.ThrowIfNull(@index);
								
								var @handler = new global::MockTests.IHavePointersCreateExpectations.Handler0
								{
									@index = @index,
								};
								
								if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
								else { this.Expectations.handlers0.Add(@handler); }
								return new(@handler);
							}
							private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
						}
						
						internal sealed class IndexerSetterExpectations
						{
							internal IndexerSetterExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
								this.Expectations = expectations;
							
							internal global::MockTests.IHavePointersCreateExpectations.Adornments.AdornmentsForHandler1 This(global::MockTests.IHavePointersCreateExpectations.Projections.ArgumentFordelegatePointerOfint__void @value, global::Rocks.Argument<string> @index)
							{
								global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
								global::System.ArgumentNullException.ThrowIfNull(@index);
								global::System.ArgumentNullException.ThrowIfNull(@value);
								
								var @handler = new global::MockTests.IHavePointersCreateExpectations.Handler1
								{
									@index = @index,
									@value = @value,
								};
								
								if (this.Expectations.handlers1 is null) { this.Expectations.handlers1 = new(@handler); }
								else { this.Expectations.handlers1.Add(@handler); }
								return new(@handler);
							}
							private global::MockTests.IHavePointersCreateExpectations Expectations { get; }
						}
						
						internal IndexerExpectations(global::MockTests.IHavePointersCreateExpectations expectations) =>
							(this.Getters, this.Setters) = (new(expectations), new(expectations));
						
						internal global::MockTests.IHavePointersCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
						internal global::MockTests.IHavePointersCreateExpectations.IndexerExpectations.IndexerSetterExpectations Setters { get; }
					}
					
					internal global::MockTests.IHavePointersCreateExpectations.IndexerExpectations Indexers { get; }
					
					internal IHavePointersCreateExpectations() =>
						(this.Indexers) = (new(this));
					
					internal global::MockTests.IHavePointers Instance()
					{
						if (!this.WasInstanceInvoked)
						{
							this.WasInstanceInvoked = true;
							var @mock = new Mock(this);
							this.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					internal static class Adornments
					{
						public interface IAdornmentsForIHavePointers<TAdornments>
							: global::Rocks.IAdornments<TAdornments>
							where TAdornments : IAdornmentsForIHavePointers<TAdornments>
						{ }
						
						public sealed class AdornmentsForHandler0
							: global::MockTests.IHavePointersCreateExpectations.Projections.AdornmentsFordelegatePointerOfint__void<AdornmentsForHandler0, global::MockTests.IHavePointersCreateExpectations.Projections.Callback_349909950755307474321032969938976654826966807638>, IAdornmentsForIHavePointers<AdornmentsForHandler0>
						{
							public AdornmentsForHandler0(global::MockTests.IHavePointersCreateExpectations.Handler0 handler)
								: base(handler) { }
						}
						public sealed class AdornmentsForHandler1
							: global::Rocks.Adornments<AdornmentsForHandler1, global::MockTests.IHavePointersCreateExpectations.Handler1, global::MockTests.IHavePointersCreateExpectations.Projections.Callback_189832623536291723139685821763903856879932142527>, IAdornmentsForIHavePointers<AdornmentsForHandler1>
						{
							public AdornmentsForHandler1(global::MockTests.IHavePointersCreateExpectations.Handler1 handler)
								: base(handler) { }
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			""";

		var makeGeneratedCode =
			"""
			// <auto-generated/>
			
			#pragma warning disable CS8618
			#pragma warning disable CS8633
			#pragma warning disable CS8714
			#pragma warning disable CS8775
			
			#nullable enable
			
			namespace MockTests
			{
				[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
				internal sealed class IHavePointersMakeExpectations
				{
					internal global::MockTests.IHavePointers Instance()
					{
						return new Mock();
					}
					
					private sealed class Mock
						: global::MockTests.IHavePointers
					{
						public Mock()
						{
						}
						
						public unsafe delegate*<int, void> this[string @index]
						{
							get => default!;
							set { }
						}
					}
				}
			}
			
			#pragma warning restore CS8618
			#pragma warning restore CS8633
			#pragma warning restore CS8714
			#pragma warning restore CS8775
			
			""";

		await TestAssistants.RunGeneratorAsync<RockGenerator>(code,
			[
				("MockTests.IHavePointers_Rock_Create.g.cs", createGeneratedCode),
				("MockTests.IHavePointers_Rock_Make.g.cs", makeGeneratedCode)
			],
			[]);
	}
}