using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class RefStructGeneratorTests
{
	[Test]
	public static async Task CreateWithOpenGenericsAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<IUseSpanWithOpenGeneric>]

			public interface IUseSpanWithOpenGeneric
			{
				 void From<TSourcePixel>(
					  ReadOnlySpan<TSourcePixel> sourcePixels)
					  where TSourcePixel : unmanaged;
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class IUseSpanWithOpenGenericCreateExpectations
				: global::Rocks.Expectations
			{
				internal static class Projections
				{
					internal delegate void Callback_153914150755899821317490808130987399395242585077<TSourcePixel>(global::System.ReadOnlySpan<TSourcePixel> @sourcePixels) where TSourcePixel : unmanaged;
					internal delegate bool ArgumentEvaluationForReadOnlySpan<TSourcePixel>(global::System.ReadOnlySpan<TSourcePixel> @value);
					
					internal sealed class ArgumentForReadOnlySpan<TSourcePixel>
						: global::Rocks.Argument
					{
						private readonly global::IUseSpanWithOpenGenericCreateExpectations.Projections.ArgumentEvaluationForReadOnlySpan<TSourcePixel>? evaluation;
						private readonly global::Rocks.ValidationState validation;
						
						internal ArgumentForReadOnlySpan() => this.validation = global::Rocks.ValidationState.None;
						
						internal ArgumentForReadOnlySpan(global::IUseSpanWithOpenGenericCreateExpectations.Projections.ArgumentEvaluationForReadOnlySpan<TSourcePixel> @evaluation)
						{
							this.evaluation = @evaluation;
							this.validation = global::Rocks.ValidationState.Evaluation;
						}
						
						public bool IsValid(global::System.ReadOnlySpan<TSourcePixel> @value) =>
							this.validation switch
							{
								global::Rocks.ValidationState.None => true,
								global::Rocks.ValidationState.Evaluation => this.evaluation!(@value),
								_ => throw new global::System.NotSupportedException("Invalid validation state."),
							};
					}
				}
				
				#pragma warning disable CS8618
				
				internal sealed class Handler0<TSourcePixel>
					: global::Rocks.Handler<global::IUseSpanWithOpenGenericCreateExpectations.Projections.Callback_153914150755899821317490808130987399395242585077<TSourcePixel>>
					where TSourcePixel : unmanaged
				{
					public global::IUseSpanWithOpenGenericCreateExpectations.Projections.ArgumentForReadOnlySpan<TSourcePixel> @sourcePixels { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::Rocks.Handler>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IUseSpanWithOpenGeneric
				{
					public Mock(global::IUseSpanWithOpenGenericCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "void From<TSourcePixel>(global::System.ReadOnlySpan<TSourcePixel> @sourcePixels)")]
					public void From<TSourcePixel>(global::System.ReadOnlySpan<TSourcePixel> @sourcePixels)
						where TSourcePixel : unmanaged
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							var @foundMatch = false;
							
							foreach (var @genericHandler in this.Expectations.handlers0)
							{
								if (@genericHandler is global::IUseSpanWithOpenGenericCreateExpectations.Handler0<TSourcePixel> @handler)
								{
									if (@handler.@sourcePixels.IsValid(@sourcePixels!))
									{
										@foundMatch = true;
										@handler.CallCount++;
										@handler.Callback?.Invoke(@sourcePixels!);
										break;
									}
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void From<TSourcePixel>(global::System.ReadOnlySpan<TSourcePixel> @sourcePixels)");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void From<TSourcePixel>(global::System.ReadOnlySpan<TSourcePixel> @sourcePixels)");
						}
					}
					
					private global::IUseSpanWithOpenGenericCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IUseSpanWithOpenGenericCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::IUseSpanWithOpenGenericCreateExpectations.Handler0<TSourcePixel>, global::IUseSpanWithOpenGenericCreateExpectations.Projections.Callback_153914150755899821317490808130987399395242585077<TSourcePixel>> From<TSourcePixel>(global::IUseSpanWithOpenGenericCreateExpectations.Projections.ArgumentForReadOnlySpan<TSourcePixel> @sourcePixels) where TSourcePixel : unmanaged
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@sourcePixels);
						
						var @handler = new global::IUseSpanWithOpenGenericCreateExpectations.Handler0<TSourcePixel>
						{
							@sourcePixels = @sourcePixels,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(@handler);
						return new(@handler);
					}
					
					private global::IUseSpanWithOpenGenericCreateExpectations Expectations { get; }
				}
				
				internal global::IUseSpanWithOpenGenericCreateExpectations.MethodExpectations Methods { get; }
				
				internal IUseSpanWithOpenGenericCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IUseSpanWithOpenGeneric Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IUseSpanWithOpenGeneric_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task GenerateWithParameterAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<IHaveRefStruct>]

			public interface IHaveRefStruct
			{
				void RefStructParameter(Span<int> values);
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class IHaveRefStructCreateExpectations
				: global::Rocks.Expectations
			{
				internal static class Projections
				{
					internal delegate void Callback_635596489375752168847058244661265726662174292173(global::System.Span<int> @values);
					internal delegate bool ArgumentEvaluationForSpanOfint(global::System.Span<int> @value);
					
					internal sealed class ArgumentForSpanOfint
						: global::Rocks.Argument
					{
						private readonly global::IHaveRefStructCreateExpectations.Projections.ArgumentEvaluationForSpanOfint? evaluation;
						private readonly global::Rocks.ValidationState validation;
						
						internal ArgumentForSpanOfint() => this.validation = global::Rocks.ValidationState.None;
						
						internal ArgumentForSpanOfint(global::IHaveRefStructCreateExpectations.Projections.ArgumentEvaluationForSpanOfint @evaluation)
						{
							this.evaluation = @evaluation;
							this.validation = global::Rocks.ValidationState.Evaluation;
						}
						
						public bool IsValid(global::System.Span<int> @value) =>
							this.validation switch
							{
								global::Rocks.ValidationState.None => true,
								global::Rocks.ValidationState.Evaluation => this.evaluation!(@value),
								_ => throw new global::System.NotSupportedException("Invalid validation state."),
							};
					}
				}
				
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::IHaveRefStructCreateExpectations.Projections.Callback_635596489375752168847058244661265726662174292173>
				{
					public global::IHaveRefStructCreateExpectations.Projections.ArgumentForSpanOfint @values { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::IHaveRefStructCreateExpectations.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock(global::IHaveRefStructCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "void RefStructParameter(global::System.Span<int> @values)")]
					public void RefStructParameter(global::System.Span<int> @values)
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							var @foundMatch = false;
							
							foreach (var @handler in this.Expectations.handlers0)
							{
								if (@handler.@values.IsValid(@values!))
								{
									@foundMatch = true;
									@handler.CallCount++;
									@handler.Callback?.Invoke(@values!);
									break;
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void RefStructParameter(global::System.Span<int> @values)");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void RefStructParameter(global::System.Span<int> @values)");
						}
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IHaveRefStructCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::IHaveRefStructCreateExpectations.Handler0, global::IHaveRefStructCreateExpectations.Projections.Callback_635596489375752168847058244661265726662174292173> RefStructParameter(global::IHaveRefStructCreateExpectations.Projections.ArgumentForSpanOfint @values)
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						global::System.ArgumentNullException.ThrowIfNull(@values);
						
						var @handler = new global::IHaveRefStructCreateExpectations.Handler0
						{
							@values = @values,
						};
						
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						this.Expectations.handlers0.Add(@handler);
						return new(@handler);
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				
				internal global::IHaveRefStructCreateExpectations.MethodExpectations Methods { get; }
				
				internal IHaveRefStructCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IHaveRefStruct Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IHaveRefStruct_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task GenerateWithResultAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<IHaveRefStruct>]

			public interface IHaveRefStruct
			{
				Span<int> RefStructReturn();
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class IHaveRefStructCreateExpectations
				: global::Rocks.Expectations
			{
				internal static class Projections
				{
					internal delegate global::System.Span<int> Callback_305616756374865012389506681414051734154688895315();
					internal delegate global::System.Span<int> ReturnValue_305616756374865012389506681414051734154688895315();
				}
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::IHaveRefStructCreateExpectations.Projections.Callback_305616756374865012389506681414051734154688895315, global::IHaveRefStructCreateExpectations.Projections.ReturnValue_305616756374865012389506681414051734154688895315>
				{ }
				
				private global::System.Collections.Generic.List<global::IHaveRefStructCreateExpectations.Handler0>? @handlers0;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock(global::IHaveRefStructCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "global::System.Span<int> RefStructReturn()")]
					public global::System.Span<int> RefStructReturn()
					{
						if (this.Expectations.handlers0?.Count > 0)
						{
							var @handler = this.Expectations.handlers0[0];
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback() : @handler.ReturnValue!();
							return @result!;
						}
						
						throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::System.Span<int> RefStructReturn()");
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				
				internal sealed class MethodExpectations
				{
					internal MethodExpectations(global::IHaveRefStructCreateExpectations expectations) =>
						this.Expectations = expectations;
					
					internal global::Rocks.Adornments<global::IHaveRefStructCreateExpectations.Handler0, global::IHaveRefStructCreateExpectations.Projections.Callback_305616756374865012389506681414051734154688895315, global::IHaveRefStructCreateExpectations.Projections.ReturnValue_305616756374865012389506681414051734154688895315> RefStructReturn()
					{
						global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
						if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
						var handler = new global::IHaveRefStructCreateExpectations.Handler0();
						this.Expectations.handlers0.Add(handler);
						return new(handler);
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				
				internal global::IHaveRefStructCreateExpectations.MethodExpectations Methods { get; }
				
				internal IHaveRefStructCreateExpectations() =>
					(this.Methods) = (new(this));
				
				internal global::IHaveRefStruct Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IHaveRefStruct_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task GenerateWithPropertyAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<IHaveRefStruct>]

			public interface IHaveRefStruct
			{
				Span<int> Data { get; set; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class IHaveRefStructCreateExpectations
				: global::Rocks.Expectations
			{
				internal static class Projections
				{
					internal delegate global::System.Span<int> Callback_305616756374865012389506681414051734154688895315();
					internal delegate global::System.Span<int> ReturnValue_305616756374865012389506681414051734154688895315();
					internal delegate void Callback_502728827610007854864150410092882302521581523006(global::System.Span<int> @value);
					internal delegate bool ArgumentEvaluationForSpanOfint(global::System.Span<int> @value);
					
					internal sealed class ArgumentForSpanOfint
						: global::Rocks.Argument
					{
						private readonly global::IHaveRefStructCreateExpectations.Projections.ArgumentEvaluationForSpanOfint? evaluation;
						private readonly global::Rocks.ValidationState validation;
						
						internal ArgumentForSpanOfint() => this.validation = global::Rocks.ValidationState.None;
						
						internal ArgumentForSpanOfint(global::IHaveRefStructCreateExpectations.Projections.ArgumentEvaluationForSpanOfint @evaluation)
						{
							this.evaluation = @evaluation;
							this.validation = global::Rocks.ValidationState.Evaluation;
						}
						
						public bool IsValid(global::System.Span<int> @value) =>
							this.validation switch
							{
								global::Rocks.ValidationState.None => true,
								global::Rocks.ValidationState.Evaluation => this.evaluation!(@value),
								_ => throw new global::System.NotSupportedException("Invalid validation state."),
							};
					}
				}
				
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::IHaveRefStructCreateExpectations.Projections.Callback_305616756374865012389506681414051734154688895315, global::IHaveRefStructCreateExpectations.Projections.ReturnValue_305616756374865012389506681414051734154688895315>
				{ }
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::IHaveRefStructCreateExpectations.Projections.Callback_502728827610007854864150410092882302521581523006>
				{
					public global::IHaveRefStructCreateExpectations.Projections.ArgumentForSpanOfint @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::IHaveRefStructCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::IHaveRefStructCreateExpectations.Handler1>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock(global::IHaveRefStructCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "get_Data()")]
					[global::Rocks.MemberIdentifier(1, "set_Data(value)")]
					public global::System.Span<int> Data
					{
						get
						{
							if (this.Expectations.handlers0?.Count > 0)
							{
								var @handler = this.Expectations.handlers0[0];
								@handler.CallCount++;
								var @result = @handler.Callback is not null ?
									@handler.Callback() : @handler.ReturnValue!();
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for get_Data())");
						}
						set
						{
							if (this.Expectations.handlers1?.Count > 0)
							{
								var @foundMatch = false;
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.value.IsValid(value!))
									{
										@handler.CallCount++;
										@foundMatch = true;
										@handler.Callback?.Invoke(value!);
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_Data(value)");
										}
										
										break;
									}
								}
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for set_Data(value)");
							}
						}
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				internal sealed class PropertyExpectations
				{
					internal sealed class PropertyGetterExpectations
					{
						internal PropertyGetterExpectations(global::IHaveRefStructCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::IHaveRefStructCreateExpectations.Handler0, global::IHaveRefStructCreateExpectations.Projections.Callback_305616756374865012389506681414051734154688895315, global::IHaveRefStructCreateExpectations.Projections.ReturnValue_305616756374865012389506681414051734154688895315> Data()
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
							var handler = new global::IHaveRefStructCreateExpectations.Handler0();
							this.Expectations.handlers0.Add(handler);
							return new(handler);
						}
						private global::IHaveRefStructCreateExpectations Expectations { get; }
					}
					
					internal sealed class PropertySetterExpectations
					{
						internal PropertySetterExpectations(global::IHaveRefStructCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::IHaveRefStructCreateExpectations.Handler1, global::IHaveRefStructCreateExpectations.Projections.Callback_502728827610007854864150410092882302521581523006> Data(global::IHaveRefStructCreateExpectations.Projections.ArgumentForSpanOfint @value)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@value);
						
							var handler = new global::IHaveRefStructCreateExpectations.Handler1
							{
								value = @value,
							};
						
							if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
							this.Expectations.handlers1.Add(handler);
							return new(handler);
						}
						private global::IHaveRefStructCreateExpectations Expectations { get; }
					}
					
					internal PropertyExpectations(global::IHaveRefStructCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::IHaveRefStructCreateExpectations.PropertyExpectations.PropertyGetterExpectations Getters { get; }
					internal global::IHaveRefStructCreateExpectations.PropertyExpectations.PropertySetterExpectations Setters { get; }
				}
				
				internal global::IHaveRefStructCreateExpectations.PropertyExpectations Properties { get; }
				
				internal IHaveRefStructCreateExpectations() =>
					(this.Properties) = (new(this));
				
				internal global::IHaveRefStruct Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IHaveRefStruct_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task GenerateWithIndexerArgumentAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<IHaveRefStruct>]

			public interface IHaveRefStruct
			{
				string this[Span<int> index] { get; set; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class IHaveRefStructCreateExpectations
				: global::Rocks.Expectations
			{
				internal static class Projections
				{
					internal delegate string Callback_397920719143678821085077375314001651657630906476(global::System.Span<int> @index);
					internal delegate void Callback_258506241168749478916356012154666174557408504246(global::System.Span<int> @index, string @value);
					internal delegate bool ArgumentEvaluationForSpanOfint(global::System.Span<int> @value);
					
					internal sealed class ArgumentForSpanOfint
						: global::Rocks.Argument
					{
						private readonly global::IHaveRefStructCreateExpectations.Projections.ArgumentEvaluationForSpanOfint? evaluation;
						private readonly global::Rocks.ValidationState validation;
						
						internal ArgumentForSpanOfint() => this.validation = global::Rocks.ValidationState.None;
						
						internal ArgumentForSpanOfint(global::IHaveRefStructCreateExpectations.Projections.ArgumentEvaluationForSpanOfint @evaluation)
						{
							this.evaluation = @evaluation;
							this.validation = global::Rocks.ValidationState.Evaluation;
						}
						
						public bool IsValid(global::System.Span<int> @value) =>
							this.validation switch
							{
								global::Rocks.ValidationState.None => true,
								global::Rocks.ValidationState.Evaluation => this.evaluation!(@value),
								_ => throw new global::System.NotSupportedException("Invalid validation state."),
							};
					}
				}
				
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::IHaveRefStructCreateExpectations.Projections.Callback_397920719143678821085077375314001651657630906476, string>
				{
					public global::IHaveRefStructCreateExpectations.Projections.ArgumentForSpanOfint @index { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::IHaveRefStructCreateExpectations.Projections.Callback_258506241168749478916356012154666174557408504246>
				{
					public global::IHaveRefStructCreateExpectations.Projections.ArgumentForSpanOfint @index { get; set; }
					public global::Rocks.Argument<string> @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::IHaveRefStructCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::IHaveRefStructCreateExpectations.Handler1>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock(global::IHaveRefStructCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "this[global::System.Span<int> @index]")]
					[global::Rocks.MemberIdentifier(1, "this[global::System.Span<int> @index]")]
					public string this[global::System.Span<int> @index]
					{
						get
						{
							if (this.Expectations.handlers0?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@index.IsValid(@index!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@index!) : @handler.ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[global::System.Span<int> @index]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[global::System.Span<int> @index])");
						}
						set
						{
							if (this.Expectations.handlers1?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.@index.IsValid(@index!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@index!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[global::System.Span<int> @index]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[global::System.Span<int> @index])");
						}
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerGetterExpectations
					{
						internal IndexerGetterExpectations(global::IHaveRefStructCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::IHaveRefStructCreateExpectations.Handler0, global::IHaveRefStructCreateExpectations.Projections.Callback_397920719143678821085077375314001651657630906476, string> This(global::IHaveRefStructCreateExpectations.Projections.ArgumentForSpanOfint @index)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							
							var @handler = new global::IHaveRefStructCreateExpectations.Handler0
							{
								@index = @index,
							};
							
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
							this.Expectations.handlers0.Add(@handler);
							return new(@handler);
						}
						private global::IHaveRefStructCreateExpectations Expectations { get; }
					}
					
					internal sealed class IndexerSetterExpectations
					{
						internal IndexerSetterExpectations(global::IHaveRefStructCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::IHaveRefStructCreateExpectations.Handler1, global::IHaveRefStructCreateExpectations.Projections.Callback_258506241168749478916356012154666174557408504246> This(global::Rocks.Argument<string> @value, global::IHaveRefStructCreateExpectations.Projections.ArgumentForSpanOfint @index)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var @handler = new global::IHaveRefStructCreateExpectations.Handler1
							{
								@index = @index,
								@value = @value,
							};
							
							if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
							this.Expectations.handlers1.Add(@handler);
							return new(@handler);
						}
						private global::IHaveRefStructCreateExpectations Expectations { get; }
					}
					
					internal IndexerExpectations(global::IHaveRefStructCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::IHaveRefStructCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
					internal global::IHaveRefStructCreateExpectations.IndexerExpectations.IndexerSetterExpectations Setters { get; }
				}
				
				internal global::IHaveRefStructCreateExpectations.IndexerExpectations Indexers { get; }
				
				internal IHaveRefStructCreateExpectations() =>
					(this.Indexers) = (new(this));
				
				internal global::IHaveRefStruct Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IHaveRefStruct_Rock_Create.g.cs", generatedCode) },
			[]);
	}

	[Test]
	public static async Task GenerateWithIndexerReturnValueAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockCreate<IHaveRefStruct>]

			public interface IHaveRefStruct
			{
				Span<int> this[string index] { get; set; }
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			internal sealed class IHaveRefStructCreateExpectations
				: global::Rocks.Expectations
			{
				internal static class Projections
				{
					internal delegate global::System.Span<int> Callback_46972665627653922407782770464330805999184773834(string @index);
					internal delegate global::System.Span<int> ReturnValue_305616756374865012389506681414051734154688895315();
					internal delegate void Callback_68834310437553200452622631376483572509682404478(string @index, global::System.Span<int> @value);
					internal delegate bool ArgumentEvaluationForSpanOfint(global::System.Span<int> @value);
					
					internal sealed class ArgumentForSpanOfint
						: global::Rocks.Argument
					{
						private readonly global::IHaveRefStructCreateExpectations.Projections.ArgumentEvaluationForSpanOfint? evaluation;
						private readonly global::Rocks.ValidationState validation;
						
						internal ArgumentForSpanOfint() => this.validation = global::Rocks.ValidationState.None;
						
						internal ArgumentForSpanOfint(global::IHaveRefStructCreateExpectations.Projections.ArgumentEvaluationForSpanOfint @evaluation)
						{
							this.evaluation = @evaluation;
							this.validation = global::Rocks.ValidationState.Evaluation;
						}
						
						public bool IsValid(global::System.Span<int> @value) =>
							this.validation switch
							{
								global::Rocks.ValidationState.None => true,
								global::Rocks.ValidationState.Evaluation => this.evaluation!(@value),
								_ => throw new global::System.NotSupportedException("Invalid validation state."),
							};
					}
				}
				
				#pragma warning disable CS8618
				
				internal sealed class Handler0
					: global::Rocks.Handler<global::IHaveRefStructCreateExpectations.Projections.Callback_46972665627653922407782770464330805999184773834, global::IHaveRefStructCreateExpectations.Projections.ReturnValue_305616756374865012389506681414051734154688895315>
				{
					public global::Rocks.Argument<string> @index { get; set; }
				}
				
				internal sealed class Handler1
					: global::Rocks.Handler<global::IHaveRefStructCreateExpectations.Projections.Callback_68834310437553200452622631376483572509682404478>
				{
					public global::Rocks.Argument<string> @index { get; set; }
					public global::IHaveRefStructCreateExpectations.Projections.ArgumentForSpanOfint @value { get; set; }
				}
				
				#pragma warning restore CS8618
				
				private global::System.Collections.Generic.List<global::IHaveRefStructCreateExpectations.Handler0>? @handlers0;
				private global::System.Collections.Generic.List<global::IHaveRefStructCreateExpectations.Handler1>? @handlers1;
				
				public override void Verify()
				{
					if (this.WasInstanceInvoked)
					{
						var failures = new global::System.Collections.Generic.List<string>();
				
						if (this.handlers0?.Count > 0) { failures.AddRange(this.Verify(this.handlers0, 0)); }
						if (this.handlers1?.Count > 0) { failures.AddRange(this.Verify(this.handlers1, 1)); }
				
						if (failures.Count > 0)
						{
							throw new global::Rocks.Exceptions.VerificationException(failures);
						}
					}
				}
				
				private sealed class Mock
					: global::IHaveRefStruct
				{
					public Mock(global::IHaveRefStructCreateExpectations @expectations)
					{
						this.Expectations = @expectations;
					}
					
					[global::Rocks.MemberIdentifier(0, "this[string @index]")]
					[global::Rocks.MemberIdentifier(1, "this[string @index]")]
					public global::System.Span<int> this[string @index]
					{
						get
						{
							if (this.Expectations.handlers0?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers0)
								{
									if (@handler.@index.IsValid(@index!))
									{
										@handler.CallCount++;
										var @result = @handler.Callback is not null ?
											@handler.Callback(@index!) : @handler.ReturnValue!();
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[string @index]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[string @index])");
						}
						set
						{
							if (this.Expectations.handlers1?.Count > 0)
							{
								foreach (var @handler in this.Expectations.handlers1)
								{
									if (@handler.@index.IsValid(@index!) &&
										@handler.@value.IsValid(@value!))
									{
										@handler.CallCount++;
										@handler.Callback?.Invoke(@index!, @value!);
										return;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for this[string @index]");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for this[string @index])");
						}
					}
					
					private global::IHaveRefStructCreateExpectations Expectations { get; }
				}
				internal sealed class IndexerExpectations
				{
					internal sealed class IndexerGetterExpectations
					{
						internal IndexerGetterExpectations(global::IHaveRefStructCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::IHaveRefStructCreateExpectations.Handler0, global::IHaveRefStructCreateExpectations.Projections.Callback_46972665627653922407782770464330805999184773834, global::IHaveRefStructCreateExpectations.Projections.ReturnValue_305616756374865012389506681414051734154688895315> This(global::Rocks.Argument<string> @index)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							
							var @handler = new global::IHaveRefStructCreateExpectations.Handler0
							{
								@index = @index,
							};
							
							if (this.Expectations.handlers0 is null ) { this.Expectations.handlers0 = new(); }
							this.Expectations.handlers0.Add(@handler);
							return new(@handler);
						}
						private global::IHaveRefStructCreateExpectations Expectations { get; }
					}
					
					internal sealed class IndexerSetterExpectations
					{
						internal IndexerSetterExpectations(global::IHaveRefStructCreateExpectations expectations) =>
							this.Expectations = expectations;
						
						internal global::Rocks.Adornments<global::IHaveRefStructCreateExpectations.Handler1, global::IHaveRefStructCreateExpectations.Projections.Callback_68834310437553200452622631376483572509682404478> This(global::IHaveRefStructCreateExpectations.Projections.ArgumentForSpanOfint @value, global::Rocks.Argument<string> @index)
						{
							global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
							global::System.ArgumentNullException.ThrowIfNull(@index);
							global::System.ArgumentNullException.ThrowIfNull(@value);
							
							var @handler = new global::IHaveRefStructCreateExpectations.Handler1
							{
								@index = @index,
								@value = @value,
							};
							
							if (this.Expectations.handlers1 is null ) { this.Expectations.handlers1 = new(); }
							this.Expectations.handlers1.Add(@handler);
							return new(@handler);
						}
						private global::IHaveRefStructCreateExpectations Expectations { get; }
					}
					
					internal IndexerExpectations(global::IHaveRefStructCreateExpectations expectations) =>
						(this.Getters, this.Setters) = (new(expectations), new(expectations));
					
					internal global::IHaveRefStructCreateExpectations.IndexerExpectations.IndexerGetterExpectations Getters { get; }
					internal global::IHaveRefStructCreateExpectations.IndexerExpectations.IndexerSetterExpectations Setters { get; }
				}
				
				internal global::IHaveRefStructCreateExpectations.IndexerExpectations Indexers { get; }
				
				internal IHaveRefStructCreateExpectations() =>
					(this.Indexers) = (new(this));
				
				internal global::IHaveRefStruct Instance()
				{
					if (!this.WasInstanceInvoked)
					{
						this.WasInstanceInvoked = true;
						var @mock = new Mock(this);
						this.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "IHaveRefStruct_Rock_Create.g.cs", generatedCode) },
			[]);
	}
}