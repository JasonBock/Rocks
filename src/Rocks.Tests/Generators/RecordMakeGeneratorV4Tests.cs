using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class RecordMakeGeneratorV4Tests
{
	[Test]
	public static async Task GenerateAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			[assembly: RockMake<MockTests.RecordTest>]

			namespace MockTests
			{
				public record RecordTest
				{
					public RecordTest() { }

					public virtual void Foo() { }
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			namespace MockTests
			{
				internal sealed class RecordTestMakeExpectations
				{
					internal global::MockTests.RecordTest Instance()
					{
						return new RockRecordTest();
					}
					internal global::MockTests.RecordTest Instance(global::MockTests.RecordTest @original)
					{
						return new RockRecordTest(@original);
					}
					
					private sealed record RockRecordTest
						: global::MockTests.RecordTest
					{
						public RockRecordTest()
						{
						}
						public RockRecordTest(global::MockTests.RecordTest @original)
							: base(@original)
						{
						}
						
						public override void Foo()
						{
						}
						public override string ToString()
						{
							return default!;
						}
						protected override bool PrintMembers(global::System.Text.StringBuilder @builder)
						{
							return default!;
						}
						public override int GetHashCode()
						{
							return default!;
						}
						protected override global::System.Type EqualityContract
						{
							get => default!;
						}
					}
				}
			}
			""";

		await TestAssistants.RunAsync<RockAttributeGenerator>(code,
			new[] { (typeof(RockAttributeGenerator), "MockTests.RecordTest_Rock_Make.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}
}