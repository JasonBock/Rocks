using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Testing;
using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class NullabilityGeneratorTests
{
	[Test]
	public static async Task GenerateWithAllowNullParameterAndDefaultValueAsync()
	{
		var code =
			"""
			using Rocks;
			using System.Diagnostics.CodeAnalysis;

			#nullable enable

			public interface IGraphType { }

			public class ConnectionBuilder<TSourceType>
			{
				public virtual ConnectionBuilder<TSourceType> Argument<TArgumentGraphType, TArgumentType>(string name, string? description,
					[AllowNull] TArgumentType defaultValue = default!)
						where TArgumentGraphType : IGraphType => new();
			}

			public static class Test
			{
				public static void Go() => Rock.Create<ConnectionBuilder<object>>();
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal static class CreateExpectationsOfConnectionBuilderOfobjectExtensions
			{
				internal static global::Rocks.Expectations.MethodExpectations<global::ConnectionBuilder<object>> Methods(this global::Rocks.Expectations.Expectations<global::ConnectionBuilder<object>> @self) =>
					new(@self);
				
				internal static global::ConnectionBuilder<object> Instance(this global::Rocks.Expectations.Expectations<global::ConnectionBuilder<object>> @self)
				{
					if (!@self.WasInstanceInvoked)
					{
						@self.WasInstanceInvoked = true;
						var @mock = new RockConnectionBuilderOfobject(@self);
						@self.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				private sealed class RockConnectionBuilderOfobject
					: global::ConnectionBuilder<object>
				{
					private readonly global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<global::Rocks.HandlerInformation>> handlers;
					
					public RockConnectionBuilderOfobject(global::Rocks.Expectations.Expectations<global::ConnectionBuilder<object>> @expectations)
					{
						this.handlers = @expectations.Handlers;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.handlers.TryGetValue(0, out var @methodHandlers))
						{
							foreach (var @methodHandler in @methodHandlers)
							{
								if (((global::Rocks.Argument<object?>)@methodHandler.Expectations[0]).IsValid(@obj!))
								{
									@methodHandler.IncrementCallCount();
									var @result = @methodHandler.Method is not null ?
										((global::System.Func<object?, bool>)@methodHandler.Method)(@obj!) :
										((global::Rocks.HandlerInformation<bool>)@methodHandler).ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(@obj!);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.handlers.TryGetValue(1, out var @methodHandlers))
						{
							var @methodHandler = @methodHandlers[0];
							@methodHandler.IncrementCallCount();
							var @result = @methodHandler.Method is not null ?
								((global::System.Func<int>)@methodHandler.Method)() :
								((global::Rocks.HandlerInformation<int>)@methodHandler).ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.handlers.TryGetValue(2, out var @methodHandlers))
						{
							var @methodHandler = @methodHandlers[0];
							@methodHandler.IncrementCallCount();
							var @result = @methodHandler.Method is not null ?
								((global::System.Func<string?>)@methodHandler.Method)() :
								((global::Rocks.HandlerInformation<string?>)@methodHandler).ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(3, "global::ConnectionBuilder<object> Argument<TArgumentGraphType, TArgumentType>(string @name, string? @description, TArgumentType @defaultValue)")]
					public override global::ConnectionBuilder<object> Argument<TArgumentGraphType, TArgumentType>(string @name, string? @description, [global::System.Diagnostics.CodeAnalysis.AllowNullAttribute] TArgumentType @defaultValue = default!)
					{
						if (this.handlers.TryGetValue(3, out var @methodHandlers))
						{
							foreach (var @methodHandler in @methodHandlers)
							{
								if ((@methodHandler.Method is not null && @methodHandler.Method is global::System.Func<string, string?, TArgumentType, global::ConnectionBuilder<object>>) || @methodHandler is global::Rocks.HandlerInformation<global::ConnectionBuilder<object>>)
								{
									if (((global::Rocks.Argument<string>)@methodHandler.Expectations[0]).IsValid(@name!) &&
										((global::Rocks.Argument<string?>)@methodHandler.Expectations[1]).IsValid(@description!) &&
										((@methodHandler.Expectations[2] as global::Rocks.Argument<TArgumentType>)?.IsValid(@defaultValue!) ?? false))
									{
										@methodHandler.IncrementCallCount();
										var @result = @methodHandler.Method is not null ?
											((global::System.Func<string, string?, TArgumentType, global::ConnectionBuilder<object>>)@methodHandler.Method)(@name!, @description!, @defaultValue!) :
											((global::Rocks.HandlerInformation<global::ConnectionBuilder<object>>)@methodHandler).ReturnValue;
										return @result!;
									}
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for global::ConnectionBuilder<object> Argument<TArgumentGraphType, TArgumentType>(string @name, string? @description, [global::System.Diagnostics.CodeAnalysis.AllowNullAttribute] TArgumentType @defaultValue = default!)");
						}
						else
						{
							return base.Argument<TArgumentGraphType, TArgumentType>(@name!, @description!, @defaultValue!);
						}
					}
					
				}
			}
			
			internal static class MethodExpectationsOfConnectionBuilderOfobjectExtensions
			{
				internal static global::Rocks.MethodAdornments<global::ConnectionBuilder<object>, global::System.Func<object?, bool>, bool> Equals(this global::Rocks.Expectations.MethodExpectations<global::ConnectionBuilder<object>> @self, global::Rocks.Argument<object?> @obj)
				{
					global::System.ArgumentNullException.ThrowIfNull(@obj);
					return new global::Rocks.MethodAdornments<global::ConnectionBuilder<object>, global::System.Func<object?, bool>, bool>(@self.Add<bool>(0, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @obj }));
				}
				internal static global::Rocks.MethodAdornments<global::ConnectionBuilder<object>, global::System.Func<int>, int> GetHashCode(this global::Rocks.Expectations.MethodExpectations<global::ConnectionBuilder<object>> @self) =>
					new global::Rocks.MethodAdornments<global::ConnectionBuilder<object>, global::System.Func<int>, int>(@self.Add<int>(1, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
				internal static global::Rocks.MethodAdornments<global::ConnectionBuilder<object>, global::System.Func<string?>, string?> ToString(this global::Rocks.Expectations.MethodExpectations<global::ConnectionBuilder<object>> @self) =>
					new global::Rocks.MethodAdornments<global::ConnectionBuilder<object>, global::System.Func<string?>, string?>(@self.Add<string?>(2, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
				internal static global::Rocks.MethodAdornments<global::ConnectionBuilder<object>, global::System.Func<string, string?, TArgumentType, global::ConnectionBuilder<object>>, global::ConnectionBuilder<object>> Argument<TArgumentGraphType, TArgumentType>(this global::Rocks.Expectations.MethodExpectations<global::ConnectionBuilder<object>> @self, global::Rocks.Argument<string> @name, global::Rocks.Argument<string?> @description, global::Rocks.Argument<TArgumentType> @defaultValue) where TArgumentGraphType : global::IGraphType
				{
					global::System.ArgumentNullException.ThrowIfNull(@name);
					global::System.ArgumentNullException.ThrowIfNull(@description);
					global::System.ArgumentNullException.ThrowIfNull(@defaultValue);
					return new global::Rocks.MethodAdornments<global::ConnectionBuilder<object>, global::System.Func<string, string?, TArgumentType, global::ConnectionBuilder<object>>, global::ConnectionBuilder<object>>(@self.Add<global::ConnectionBuilder<object>>(3, new global::System.Collections.Generic.List<global::Rocks.Argument>(3) { @name, @description, @defaultValue.Transform(default!) }));
				}
				internal static global::Rocks.MethodAdornments<global::ConnectionBuilder<object>, global::System.Func<string, string?, TArgumentType, global::ConnectionBuilder<object>>, global::ConnectionBuilder<object>> Argument<TArgumentGraphType, TArgumentType>(this global::Rocks.Expectations.MethodExpectations<global::ConnectionBuilder<object>> @self, global::Rocks.Argument<string> @name, global::Rocks.Argument<string?> @description, TArgumentType @defaultValue = default!) where TArgumentGraphType : global::IGraphType =>
					@self.Argument<TArgumentGraphType, TArgumentType>(@name, @description, global::Rocks.Arg.Is(@defaultValue));
			}
			
			""";

		await TestAssistants.RunAsync<RockCreateGenerator>(code,
			new[] { (typeof(RockCreateGenerator), "ConnectionBuilderobject_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWhenNullabilityChangesInOverrideAsync()
	{
		var code =
			"""
			using Rocks;

			#nullable enable

			public class Tracer
			{
				public virtual void TraceEvent(string? eventCache, string source, 
					string eventType, int id, 
					string? format, params object?[]? args)
				{ }
			}

			public class SubTracer
				: Tracer
			{
				public override void TraceEvent(string eventCache, string source, 
					string eventType, int id, 
					string format, params object[] args)
				{ }
			}

			public static class Test
			{
				public static void Go() => Rock.Create<SubTracer>();
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal static class CreateExpectationsOfSubTracerExtensions
			{
				internal static global::Rocks.Expectations.MethodExpectations<global::SubTracer> Methods(this global::Rocks.Expectations.Expectations<global::SubTracer> @self) =>
					new(@self);
				
				internal static global::SubTracer Instance(this global::Rocks.Expectations.Expectations<global::SubTracer> @self)
				{
					if (!@self.WasInstanceInvoked)
					{
						@self.WasInstanceInvoked = true;
						var @mock = new RockSubTracer(@self);
						@self.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				private sealed class RockSubTracer
					: global::SubTracer
				{
					private readonly global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<global::Rocks.HandlerInformation>> handlers;
					
					public RockSubTracer(global::Rocks.Expectations.Expectations<global::SubTracer> @expectations)
					{
						this.handlers = @expectations.Handlers;
					}
					
					[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
					public override bool Equals(object? @obj)
					{
						if (this.handlers.TryGetValue(0, out var @methodHandlers))
						{
							foreach (var @methodHandler in @methodHandlers)
							{
								if (((global::Rocks.Argument<object?>)@methodHandler.Expectations[0]).IsValid(@obj))
								{
									@methodHandler.IncrementCallCount();
									var @result = @methodHandler.Method is not null ?
										((global::System.Func<object?, bool>)@methodHandler.Method)(@obj) :
										((global::Rocks.HandlerInformation<bool>)@methodHandler).ReturnValue;
									return @result!;
								}
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
						}
						else
						{
							return base.Equals(@obj);
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
					public override int GetHashCode()
					{
						if (this.handlers.TryGetValue(1, out var @methodHandlers))
						{
							var @methodHandler = @methodHandlers[0];
							@methodHandler.IncrementCallCount();
							var @result = @methodHandler.Method is not null ?
								((global::System.Func<int>)@methodHandler.Method)() :
								((global::Rocks.HandlerInformation<int>)@methodHandler).ReturnValue;
							return @result!;
						}
						else
						{
							return base.GetHashCode();
						}
					}
					
					[global::Rocks.MemberIdentifier(2, "string? ToString()")]
					public override string? ToString()
					{
						if (this.handlers.TryGetValue(2, out var @methodHandlers))
						{
							var @methodHandler = @methodHandlers[0];
							@methodHandler.IncrementCallCount();
							var @result = @methodHandler.Method is not null ?
								((global::System.Func<string?>)@methodHandler.Method)() :
								((global::Rocks.HandlerInformation<string?>)@methodHandler).ReturnValue;
							return @result!;
						}
						else
						{
							return base.ToString();
						}
					}
					
					[global::Rocks.MemberIdentifier(4, "void TraceEvent(string @eventCache, string @source, string @eventType, int @id, string @format, params object[] @args)")]
					public override void TraceEvent(string @eventCache, string @source, string @eventType, int @id, string @format, params object[] @args)
					{
						if (this.handlers.TryGetValue(4, out var @methodHandlers))
						{
							var @foundMatch = false;
							
							foreach (var @methodHandler in @methodHandlers)
							{
								if (((global::Rocks.Argument<string>)@methodHandler.Expectations[0]).IsValid(@eventCache) &&
									((global::Rocks.Argument<string>)@methodHandler.Expectations[1]).IsValid(@source) &&
									((global::Rocks.Argument<string>)@methodHandler.Expectations[2]).IsValid(@eventType) &&
									((global::Rocks.Argument<int>)@methodHandler.Expectations[3]).IsValid(@id) &&
									((global::Rocks.Argument<string>)@methodHandler.Expectations[4]).IsValid(@format) &&
									((global::Rocks.Argument<object[]>)@methodHandler.Expectations[5]).IsValid(@args))
								{
									@foundMatch = true;
									
									@methodHandler.IncrementCallCount();
									if (@methodHandler.Method is not null)
									{
										((global::System.Action<string, string, string, int, string, object[]>)@methodHandler.Method)(@eventCache, @source, @eventType, @id, @format, @args);
									}
									break;
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void TraceEvent(string @eventCache, string @source, string @eventType, int @id, string @format, params object[] @args)");
							}
						}
						else
						{
							base.TraceEvent(@eventCache, @source, @eventType, @id, @format, @args);
						}
					}
					
				}
			}
			
			internal static class MethodExpectationsOfSubTracerExtensions
			{
				internal static global::Rocks.MethodAdornments<global::SubTracer, global::System.Func<object?, bool>, bool> Equals(this global::Rocks.Expectations.MethodExpectations<global::SubTracer> @self, global::Rocks.Argument<object?> @obj)
				{
					global::System.ArgumentNullException.ThrowIfNull(@obj);
					return new global::Rocks.MethodAdornments<global::SubTracer, global::System.Func<object?, bool>, bool>(@self.Add<bool>(0, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @obj }));
				}
				internal static global::Rocks.MethodAdornments<global::SubTracer, global::System.Func<int>, int> GetHashCode(this global::Rocks.Expectations.MethodExpectations<global::SubTracer> @self) =>
					new global::Rocks.MethodAdornments<global::SubTracer, global::System.Func<int>, int>(@self.Add<int>(1, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
				internal static global::Rocks.MethodAdornments<global::SubTracer, global::System.Func<string?>, string?> ToString(this global::Rocks.Expectations.MethodExpectations<global::SubTracer> @self) =>
					new global::Rocks.MethodAdornments<global::SubTracer, global::System.Func<string?>, string?>(@self.Add<string?>(2, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
				internal static global::Rocks.MethodAdornments<global::SubTracer, global::System.Action<string, string, string, int, string, object[]>> TraceEvent(this global::Rocks.Expectations.MethodExpectations<global::SubTracer> @self, global::Rocks.Argument<string> @eventCache, global::Rocks.Argument<string> @source, global::Rocks.Argument<string> @eventType, global::Rocks.Argument<int> @id, global::Rocks.Argument<string> @format, global::Rocks.Argument<object[]> @args)
				{
					global::System.ArgumentNullException.ThrowIfNull(@eventCache);
					global::System.ArgumentNullException.ThrowIfNull(@source);
					global::System.ArgumentNullException.ThrowIfNull(@eventType);
					global::System.ArgumentNullException.ThrowIfNull(@id);
					global::System.ArgumentNullException.ThrowIfNull(@format);
					global::System.ArgumentNullException.ThrowIfNull(@args);
					return new global::Rocks.MethodAdornments<global::SubTracer, global::System.Action<string, string, string, int, string, object[]>>(@self.Add(4, new global::System.Collections.Generic.List<global::Rocks.Argument>(6) { @eventCache, @source, @eventType, @id, @format, @args }));
				}
			}
			
			""";

		// The two diagnostic IDs are actually warnings, so they
		// can be ignored/suppressed. They show up because the override
		// continues the problem that the subtype introduces when it changes
		// the nullability annotations.
		await TestAssistants.RunAsync<RockCreateGenerator>(code,
			new[] { (typeof(RockCreateGenerator), "SubTracer_Rock_Create.g.cs", generatedCode) },
			new[]
			{
				new DiagnosticResult("CS8610", DiagnosticSeverity.Error)
					.WithSpan(16, 23, 16, 33).WithArguments("args"),
				new DiagnosticResult("CS8765", DiagnosticSeverity.Error)
					.WithSpan(16, 23, 16, 33).WithArguments("eventCache"),
				new DiagnosticResult("CS8765", DiagnosticSeverity.Error)
					.WithSpan(16, 23, 16, 33).WithArguments("format"),
			}).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWhenPropertyInShimNeedsNullForgivingAsync()
	{
		var code =
			"""
			using Rocks;

			#nullable enable

			public interface IReadOnlyNavigationBase
			{
				IReadOnlyNavigationBase? Inverse { get; }
			}

			public interface IReadOnlySkipNavigation
				: IReadOnlyNavigationBase
			{
				new IReadOnlySkipNavigation Inverse { get; }

				IReadOnlyNavigationBase IReadOnlyNavigationBase.Inverse
				{
					get => Inverse;
				}
			}

			public interface IConventionSkipNavigation 
				: IReadOnlySkipNavigation
			{
				new IConventionSkipNavigation? Inverse
				{
					get => (IConventionSkipNavigation?)((IReadOnlySkipNavigation)this).Inverse;
				}
			}

			public static class Test
			{
				public static void Go() => Rock.Create<IConventionSkipNavigation>();
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal static class CreateExpectationsOfIConventionSkipNavigationExtensions
			{
				internal static global::Rocks.Expectations.PropertyExpectations<global::IConventionSkipNavigation> Properties(this global::Rocks.Expectations.Expectations<global::IConventionSkipNavigation> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.PropertyGetterExpectations<global::IConventionSkipNavigation> Getters(this global::Rocks.Expectations.PropertyExpectations<global::IConventionSkipNavigation> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.ExplicitPropertyExpectations<global::IConventionSkipNavigation, global::IReadOnlySkipNavigation> ExplicitPropertiesForIReadOnlySkipNavigation(this global::Rocks.Expectations.Expectations<global::IConventionSkipNavigation> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.ExplicitPropertyGetterExpectations<global::IConventionSkipNavigation, global::IReadOnlySkipNavigation> Getters(this global::Rocks.Expectations.ExplicitPropertyExpectations<global::IConventionSkipNavigation, global::IReadOnlySkipNavigation> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.ExplicitPropertyExpectations<global::IConventionSkipNavigation, global::IReadOnlyNavigationBase> ExplicitPropertiesForIReadOnlyNavigationBase(this global::Rocks.Expectations.Expectations<global::IConventionSkipNavigation> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.ExplicitPropertyGetterExpectations<global::IConventionSkipNavigation, global::IReadOnlyNavigationBase> Getters(this global::Rocks.Expectations.ExplicitPropertyExpectations<global::IConventionSkipNavigation, global::IReadOnlyNavigationBase> @self) =>
					new(@self);
				
				internal static global::IConventionSkipNavigation Instance(this global::Rocks.Expectations.Expectations<global::IConventionSkipNavigation> @self)
				{
					if (!@self.WasInstanceInvoked)
					{
						@self.WasInstanceInvoked = true;
						var @mock = new RockIConventionSkipNavigation(@self);
						@self.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				private sealed class RockIConventionSkipNavigation
					: global::IConventionSkipNavigation
				{
					private readonly global::IConventionSkipNavigation shimForIConventionSkipNavigation;
					private readonly global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<global::Rocks.HandlerInformation>> handlers;
					
					public RockIConventionSkipNavigation(global::Rocks.Expectations.Expectations<global::IConventionSkipNavigation> @expectations)
					{
						(this.handlers, this.shimForIConventionSkipNavigation) = (@expectations.Handlers, new ShimIConventionSkipNavigation396255620100734449241449954173443346123272207515(this));
					}
					
					[global::Rocks.MemberIdentifier(0, "get_Inverse()")]
					public global::IConventionSkipNavigation? Inverse
					{
						get
						{
							if (this.handlers.TryGetValue(0, out var @methodHandlers))
							{
								var @methodHandler = @methodHandlers[0];
								@methodHandler.IncrementCallCount();
								var @result = @methodHandler.Method is not null ?
									((global::System.Func<global::IConventionSkipNavigation?>)@methodHandler.Method)() :
									((global::Rocks.HandlerInformation<global::IConventionSkipNavigation?>)@methodHandler).ReturnValue;
								return @result!;
							}
							else
							{
								return this.shimForIConventionSkipNavigation.Inverse;
							}
						}
					}
					[global::Rocks.MemberIdentifier(1, "global::IReadOnlySkipNavigation.get_Inverse()")]
					global::IReadOnlySkipNavigation global::IReadOnlySkipNavigation.Inverse
					{
						get
						{
							if (this.handlers.TryGetValue(1, out var @methodHandlers))
							{
								var @methodHandler = @methodHandlers[0];
								@methodHandler.IncrementCallCount();
								var @result = @methodHandler.Method is not null ?
									((global::System.Func<global::IReadOnlySkipNavigation>)@methodHandler.Method)() :
									((global::Rocks.HandlerInformation<global::IReadOnlySkipNavigation>)@methodHandler).ReturnValue;
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::IReadOnlySkipNavigation.get_Inverse())");
						}
					}
					[global::Rocks.MemberIdentifier(2, "global::IReadOnlyNavigationBase.get_Inverse()")]
					global::IReadOnlyNavigationBase? global::IReadOnlyNavigationBase.Inverse
					{
						get
						{
							if (this.handlers.TryGetValue(2, out var @methodHandlers))
							{
								var @methodHandler = @methodHandlers[0];
								@methodHandler.IncrementCallCount();
								var @result = @methodHandler.Method is not null ?
									((global::System.Func<global::IReadOnlyNavigationBase?>)@methodHandler.Method)() :
									((global::Rocks.HandlerInformation<global::IReadOnlyNavigationBase?>)@methodHandler).ReturnValue;
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for global::IReadOnlyNavigationBase.get_Inverse())");
						}
					}
					
					private sealed class ShimIConventionSkipNavigation396255620100734449241449954173443346123272207515
						: global::IConventionSkipNavigation
					{
						private readonly RockIConventionSkipNavigation mock;
						
						public ShimIConventionSkipNavigation396255620100734449241449954173443346123272207515(RockIConventionSkipNavigation @mock) =>
							this.mock = @mock;
						
						global::IReadOnlySkipNavigation global::IReadOnlySkipNavigation.Inverse
						{
							get => ((global::IConventionSkipNavigation)this.mock).Inverse!;
						}
						
						global::IReadOnlyNavigationBase? global::IReadOnlyNavigationBase.Inverse
						{
							get => ((global::IConventionSkipNavigation)this.mock).Inverse!;
						}
					}
				}
			}
			
			internal static class PropertyGetterExpectationsOfIConventionSkipNavigationExtensions
			{
				internal static global::Rocks.PropertyAdornments<global::IConventionSkipNavigation, global::System.Func<global::IConventionSkipNavigation?>, global::IConventionSkipNavigation?> Inverse(this global::Rocks.Expectations.PropertyGetterExpectations<global::IConventionSkipNavigation> @self) =>
					new global::Rocks.PropertyAdornments<global::IConventionSkipNavigation, global::System.Func<global::IConventionSkipNavigation?>, global::IConventionSkipNavigation?>(@self.Add<global::IConventionSkipNavigation?>(0, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
			}
			internal static class ExplicitPropertyGetterExpectationsOfIConventionSkipNavigationForIReadOnlySkipNavigationExtensions
			{
				internal static global::Rocks.PropertyAdornments<global::IConventionSkipNavigation, global::System.Func<global::IReadOnlySkipNavigation>, global::IReadOnlySkipNavigation> Inverse(this global::Rocks.Expectations.ExplicitPropertyGetterExpectations<global::IConventionSkipNavigation, global::IReadOnlySkipNavigation> @self) =>
					new global::Rocks.PropertyAdornments<global::IConventionSkipNavigation, global::System.Func<global::IReadOnlySkipNavigation>, global::IReadOnlySkipNavigation>(@self.Add<global::IReadOnlySkipNavigation>(1, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
			}
			internal static class ExplicitPropertyGetterExpectationsOfIConventionSkipNavigationForIReadOnlyNavigationBaseExtensions
			{
				internal static global::Rocks.PropertyAdornments<global::IConventionSkipNavigation, global::System.Func<global::IReadOnlyNavigationBase?>, global::IReadOnlyNavigationBase?> Inverse(this global::Rocks.Expectations.ExplicitPropertyGetterExpectations<global::IConventionSkipNavigation, global::IReadOnlyNavigationBase> @self) =>
					new global::Rocks.PropertyAdornments<global::IConventionSkipNavigation, global::System.Func<global::IReadOnlyNavigationBase?>, global::IReadOnlyNavigationBase?>(@self.Add<global::IReadOnlyNavigationBase?>(2, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
			}
			
			""";

		await TestAssistants.RunAsync<RockCreateGenerator>(code,
			new[] { (typeof(RockCreateGenerator), "IConventionSkipNavigation_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWhenTargetIsInterfaceAndMethodIsConstrainedByTypeParameterThatIsAssignedAsync()
	{
		var code =
			"""
			using Rocks;

			public interface IDestination<TDestination>
			{
				void As<T>() where T : TDestination;
			}

			public static class Test
			{
				public static void Go() => Rock.Create<IDestination<object>>();
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal static class CreateExpectationsOfIDestinationOfobjectExtensions
			{
				internal static global::Rocks.Expectations.MethodExpectations<global::IDestination<object>> Methods(this global::Rocks.Expectations.Expectations<global::IDestination<object>> @self) =>
					new(@self);
				
				internal static global::IDestination<object> Instance(this global::Rocks.Expectations.Expectations<global::IDestination<object>> @self)
				{
					if (!@self.WasInstanceInvoked)
					{
						@self.WasInstanceInvoked = true;
						var @mock = new RockIDestinationOfobject(@self);
						@self.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				private sealed class RockIDestinationOfobject
					: global::IDestination<object>
				{
					private readonly global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<global::Rocks.HandlerInformation>> handlers;
					
					public RockIDestinationOfobject(global::Rocks.Expectations.Expectations<global::IDestination<object>> @expectations)
					{
						this.handlers = @expectations.Handlers;
					}
					
					[global::Rocks.MemberIdentifier(0, "void As<T>()")]
					public void As<T>()
						where T : notnull
					{
						if (this.handlers.TryGetValue(0, out var @methodHandlers))
						{
							var @methodHandler = @methodHandlers[0];
							@methodHandler.IncrementCallCount();
							if (@methodHandler.Method is not null && @methodHandler.Method is global::System.Action @method)
							{
								@method();
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void As<T>()");
						}
					}
					
				}
			}
			
			internal static class MethodExpectationsOfIDestinationOfobjectExtensions
			{
				internal static global::Rocks.MethodAdornments<global::IDestination<object>, global::System.Action> As<T>(this global::Rocks.Expectations.MethodExpectations<global::IDestination<object>> @self) where T : notnull =>
					new global::Rocks.MethodAdornments<global::IDestination<object>, global::System.Action>(@self.Add(0, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
			}
			
			""";

		await TestAssistants.RunAsync<RockCreateGenerator>(code,
			new[] { (typeof(RockCreateGenerator), "IDestinationobject_Rock_Create.g.cs", generatedCode) },
			Enumerable.Empty<DiagnosticResult>()).ConfigureAwait(false);
	}
}