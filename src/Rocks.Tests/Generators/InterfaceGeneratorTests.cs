using Microsoft.CodeAnalysis.Testing;
using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class InterfaceGeneratorTests
{
	[Test]
	public static async Task GenerateWithSealedMemberAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			public interface ISealed
			{
				void NonSealedMethod();
				sealed void SealedMethod() { }

				string NonSealedData { get; set; }
				sealed string SealedData { get => ""; set { } }

				event EventHandler NonSealedEvent;
				sealed event EventHandler SealedEvent { add { } remove { } }
			}
			
			public static class Test
			{
				public static void Go() => Rock.Create<ISealed>();
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal static class CreateExpectationsOfISealedExtensions
			{
				internal static global::Rocks.Expectations.MethodExpectations<global::ISealed> Methods(this global::Rocks.Expectations.Expectations<global::ISealed> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.PropertyExpectations<global::ISealed> Properties(this global::Rocks.Expectations.Expectations<global::ISealed> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.PropertyGetterExpectations<global::ISealed> Getters(this global::Rocks.Expectations.PropertyExpectations<global::ISealed> @self) =>
					new(@self);
				
				internal static global::Rocks.Expectations.PropertySetterExpectations<global::ISealed> Setters(this global::Rocks.Expectations.PropertyExpectations<global::ISealed> @self) =>
					new(@self);
				
				internal static global::ISealed Instance(this global::Rocks.Expectations.Expectations<global::ISealed> @self)
				{
					if (!@self.WasInstanceInvoked)
					{
						@self.WasInstanceInvoked = true;
						var @mock = new RockISealed(@self);
						@self.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				private sealed class RockISealed
					: global::ISealed, global::Rocks.IRaiseEvents
				{
					private readonly global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<global::Rocks.HandlerInformation>> handlers;
					
					public RockISealed(global::Rocks.Expectations.Expectations<global::ISealed> @expectations)
					{
						this.handlers = @expectations.Handlers;
					}
					
					[global::Rocks.MemberIdentifier(0, "void NonSealedMethod()")]
					public void NonSealedMethod()
					{
						if (this.handlers.TryGetValue(0, out var @methodHandlers))
						{
							var @methodHandler = @methodHandlers[0];
							@methodHandler.IncrementCallCount();
							if (@methodHandler.Method is not null)
							{
								((global::System.Action)@methodHandler.Method)();
							}
							
							@methodHandler.RaiseEvents(this);
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void NonSealedMethod()");
						}
					}
					
					[global::Rocks.MemberIdentifier(1, "get_NonSealedData()")]
					[global::Rocks.MemberIdentifier(2, "set_NonSealedData(value)")]
					public string NonSealedData
					{
						get
						{
							if (this.handlers.TryGetValue(1, out var @methodHandlers))
							{
								var @methodHandler = @methodHandlers[0];
								@methodHandler.IncrementCallCount();
								var @result = @methodHandler.Method is not null ?
									((global::System.Func<string>)@methodHandler.Method)() :
									((global::Rocks.HandlerInformation<string>)@methodHandler).ReturnValue;
								@methodHandler.RaiseEvents(this);
								return @result!;
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for get_NonSealedData())");
						}
						set
						{
							if (this.handlers.TryGetValue(2, out var @methodHandlers))
							{
								var @foundMatch = false;
								foreach (var @methodHandler in @methodHandlers)
								{
									if (((global::Rocks.Argument<string>)@methodHandler.Expectations[0]).IsValid(value!))
									{
										@methodHandler.IncrementCallCount();
										@foundMatch = true;
										
										if (@methodHandler.Method is not null)
										{
											((global::System.Action<string>)@methodHandler.Method)(value!);
										}
										
										if (!@foundMatch)
										{
											throw new global::Rocks.Exceptions.ExpectationException("No handlers match for set_NonSealedData(value)");
										}
										
										@methodHandler.RaiseEvents(this);
										break;
									}
								}
							}
							else
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for set_NonSealedData(value)");
							}
						}
					}
					
					#pragma warning disable CS0067
					public event global::System.EventHandler? NonSealedEvent;
					#pragma warning restore CS0067
					
					void global::Rocks.IRaiseEvents.Raise(string @fieldName, object @args)
					{
						var @thisType = this.GetType();
						var @eventDelegate = (global::System.MulticastDelegate)thisType.GetField(@fieldName, 
							global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.NonPublic)!.GetValue(this)!;
						
						if (@eventDelegate is not null)
						{
							foreach (var @handler in @eventDelegate.GetInvocationList())
							{
								@handler.Method.Invoke(@handler.Target, new object[]{this, @args});
							}
						}
					}
				}
			}
			
			internal static class MethodExpectationsOfISealedExtensions
			{
				internal static global::Rocks.MethodAdornments<global::ISealed, global::System.Action> NonSealedMethod(this global::Rocks.Expectations.MethodExpectations<global::ISealed> @self) =>
					new global::Rocks.MethodAdornments<global::ISealed, global::System.Action>(@self.Add(0, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
			}
			
			internal static class PropertyGetterExpectationsOfISealedExtensions
			{
				internal static global::Rocks.PropertyAdornments<global::ISealed, global::System.Func<string>, string> NonSealedData(this global::Rocks.Expectations.PropertyGetterExpectations<global::ISealed> @self) =>
					new global::Rocks.PropertyAdornments<global::ISealed, global::System.Func<string>, string>(@self.Add<string>(1, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
			}
			internal static class PropertySetterExpectationsOfISealedExtensions
			{
				internal static global::Rocks.PropertyAdornments<global::ISealed, global::System.Action<string>> NonSealedData(this global::Rocks.Expectations.PropertySetterExpectations<global::ISealed> @self, global::Rocks.Argument<string> @value) =>
					new global::Rocks.PropertyAdornments<global::ISealed, global::System.Action<string>>(@self.Add(2, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @value }));
			}
			
			internal static class MethodAdornmentsOfISealedExtensions
			{
				internal static global::Rocks.MethodAdornments<global::ISealed, TCallback, TReturn> RaisesNonSealedEvent<TCallback, TReturn>(this global::Rocks.MethodAdornments<global::ISealed, TCallback, TReturn> @self, global::System.EventArgs @args)
					where TCallback : global::System.Delegate
				{
					@self.Handler.AddRaiseEvent(new("NonSealedEvent", @args));
					return @self;
				}
				internal static global::Rocks.MethodAdornments<global::ISealed, TCallback> RaisesNonSealedEvent<TCallback>(this global::Rocks.MethodAdornments<global::ISealed, TCallback> @self, global::System.EventArgs @args)
					where TCallback : global::System.Delegate
				{
					@self.Handler.AddRaiseEvent(new("NonSealedEvent", @args));
					return @self;
				}
			}
			
			internal static class PropertyAdornmentsOfISealedExtensions
			{
				internal static global::Rocks.PropertyAdornments<global::ISealed, TCallback, TReturn> RaisesNonSealedEvent<TCallback, TReturn>(this global::Rocks.PropertyAdornments<global::ISealed, TCallback, TReturn> @self, global::System.EventArgs @args)
					where TCallback : global::System.Delegate
				{
					@self.Handler.AddRaiseEvent(new("NonSealedEvent", @args));
					return @self;
				}
				internal static global::Rocks.PropertyAdornments<global::ISealed, TCallback> RaisesNonSealedEvent<TCallback>(this global::Rocks.PropertyAdornments<global::ISealed, TCallback> @self, global::System.EventArgs @args)
					where TCallback : global::System.Delegate
				{
					@self.Handler.AddRaiseEvent(new("NonSealedEvent", @args));
					return @self;
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockCreateGenerator>(code,
			new[] { (typeof(RockCreateGenerator), "ISealed_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWithStaticMemberAsync()
	{
		var code =
			"""
			using Rocks;
			
			public interface IRequest
			{
				public static string ToString(IRequest request) => "";
				public static string ToMethodCallString(IRequest request) => "";
				void AddInvokeMethodOptions(int options);
			}
			
			public static class Test
			{
				public static void Go() => Rock.Create<IRequest>();
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			internal static class CreateExpectationsOfIRequestExtensions
			{
				internal static global::Rocks.Expectations.MethodExpectations<global::IRequest> Methods(this global::Rocks.Expectations.Expectations<global::IRequest> @self) =>
					new(@self);
				
				internal static global::IRequest Instance(this global::Rocks.Expectations.Expectations<global::IRequest> @self)
				{
					if (!@self.WasInstanceInvoked)
					{
						@self.WasInstanceInvoked = true;
						var @mock = new RockIRequest(@self);
						@self.MockType = @mock.GetType();
						return @mock;
					}
					else
					{
						throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
					}
				}
				
				private sealed class RockIRequest
					: global::IRequest
				{
					private readonly global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<global::Rocks.HandlerInformation>> handlers;
					
					public RockIRequest(global::Rocks.Expectations.Expectations<global::IRequest> @expectations)
					{
						this.handlers = @expectations.Handlers;
					}
					
					[global::Rocks.MemberIdentifier(0, "void AddInvokeMethodOptions(int @options)")]
					public void AddInvokeMethodOptions(int @options)
					{
						if (this.handlers.TryGetValue(0, out var @methodHandlers))
						{
							var @foundMatch = false;
							
							foreach (var @methodHandler in @methodHandlers)
							{
								if (((global::Rocks.Argument<int>)@methodHandler.Expectations[0]).IsValid(@options!))
								{
									@foundMatch = true;
									
									@methodHandler.IncrementCallCount();
									if (@methodHandler.Method is not null)
									{
										((global::System.Action<int>)@methodHandler.Method)(@options!);
									}
									break;
								}
							}
							
							if (!@foundMatch)
							{
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for void AddInvokeMethodOptions(int @options)");
							}
						}
						else
						{
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for void AddInvokeMethodOptions(int @options)");
						}
					}
					
				}
			}
			
			internal static class MethodExpectationsOfIRequestExtensions
			{
				internal static global::Rocks.MethodAdornments<global::IRequest, global::System.Action<int>> AddInvokeMethodOptions(this global::Rocks.Expectations.MethodExpectations<global::IRequest> @self, global::Rocks.Argument<int> @options)
				{
					global::System.ArgumentNullException.ThrowIfNull(@options);
					return new global::Rocks.MethodAdornments<global::IRequest, global::System.Action<int>>(@self.Add(0, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @options }));
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockCreateGenerator>(code,
			new[] { (typeof(RockCreateGenerator), "IRequest_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}

	[Test]
	public static async Task GenerateWithMethodAsync()
	{
		var code =
			"""
			using Rocks;
			using System;

			namespace MockTests
			{
				public interface ITarget
				{
					string Retrieve(int value);
				}

				public static class Test
				{
					public static void Generate()
					{
						var rock = Rock.Create<ITarget>();
					}
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;

			namespace MockTests
			{
				internal static class CreateExpectationsOfITargetExtensions
				{
					internal static global::Rocks.Expectations.MethodExpectations<global::MockTests.ITarget> Methods(this global::Rocks.Expectations.Expectations<global::MockTests.ITarget> @self) =>
						new(@self);
					
					internal static global::MockTests.ITarget Instance(this global::Rocks.Expectations.Expectations<global::MockTests.ITarget> @self)
					{
						if (!@self.WasInstanceInvoked)
						{
							@self.WasInstanceInvoked = true;
							var @mock = new RockITarget(@self);
							@self.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					private sealed class RockITarget
						: global::MockTests.ITarget
					{
						private readonly global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<global::Rocks.HandlerInformation>> handlers;
						
						public RockITarget(global::Rocks.Expectations.Expectations<global::MockTests.ITarget> @expectations)
						{
							this.handlers = @expectations.Handlers;
						}
						
						[global::Rocks.MemberIdentifier(0, "string Retrieve(int @value)")]
						public string Retrieve(int @value)
						{
							if (this.handlers.TryGetValue(0, out var @methodHandlers))
							{
								foreach (var @methodHandler in @methodHandlers)
								{
									if (((global::Rocks.Argument<int>)@methodHandler.Expectations[0]).IsValid(@value!))
									{
										@methodHandler.IncrementCallCount();
										var @result = @methodHandler.Method is not null ?
											((global::System.Func<int, string>)@methodHandler.Method)(@value!) :
											((global::Rocks.HandlerInformation<string>)@methodHandler).ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for string Retrieve(int @value)");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for string Retrieve(int @value)");
						}
						
					}
				}
				
				internal static class MethodExpectationsOfITargetExtensions
				{
					internal static global::Rocks.MethodAdornments<global::MockTests.ITarget, global::System.Func<int, string>, string> Retrieve(this global::Rocks.Expectations.MethodExpectations<global::MockTests.ITarget> @self, global::Rocks.Argument<int> @value)
					{
						global::System.ArgumentNullException.ThrowIfNull(@value);
						return new global::Rocks.MethodAdornments<global::MockTests.ITarget, global::System.Func<int, string>, string>(@self.Add<string>(0, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @value }));
					}
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockCreateGenerator>(code,
			new[] { (typeof(RockCreateGenerator), "MockTests.ITarget_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}
}