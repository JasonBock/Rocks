using Microsoft.CodeAnalysis.Testing;
using NUnit.Framework;

namespace Rocks.Tests.Generators;

public static class InheritanceGeneratorTests
{
	[Test]
	public static async Task GenerateWhenMethodIsIntroducedAsync()
	{
		var code =
			"""
			using Rocks;

			namespace MockTests
			{
				public struct ScriptScopeContext { }

				public abstract class JsToken
				{
					public abstract object Evaluate(ScriptScopeContext scope);
				}

				public abstract class JsOperator 
					: JsToken
				{
					public override object Evaluate(ScriptScopeContext scope) => this;
				}

				public abstract class JsBinaryOperator 
					: JsOperator
				{
					public abstract object Evaluate(object target);
				}

				public static class Test
				{
					public static void Generate()
					{
						var rock = Rock.Create<JsBinaryOperator>();
					}
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			#nullable enable
			
			using Rocks.Extensions;
			using System.Collections.Generic;
			using System.Collections.Immutable;
			
			namespace MockTests
			{
				internal static class CreateExpectationsOfJsBinaryOperatorExtensions
				{
					internal static global::Rocks.Expectations.MethodExpectations<global::MockTests.JsBinaryOperator> Methods(this global::Rocks.Expectations.Expectations<global::MockTests.JsBinaryOperator> @self) =>
						new(@self);
					
					internal static global::MockTests.JsBinaryOperator Instance(this global::Rocks.Expectations.Expectations<global::MockTests.JsBinaryOperator> @self)
					{
						if (!@self.WasInstanceInvoked)
						{
							@self.WasInstanceInvoked = true;
							var @mock = new RockJsBinaryOperator(@self);
							@self.MockType = @mock.GetType();
							return @mock;
						}
						else
						{
							throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
						}
					}
					
					private sealed class RockJsBinaryOperator
						: global::MockTests.JsBinaryOperator
					{
						private readonly global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.List<global::Rocks.HandlerInformation>> handlers;
						
						public RockJsBinaryOperator(global::Rocks.Expectations.Expectations<global::MockTests.JsBinaryOperator> @expectations)
						{
							this.handlers = @expectations.Handlers;
						}
						
						[global::Rocks.MemberIdentifier(0, "bool Equals(object? @obj)")]
						public override bool Equals(object? @obj)
						{
							if (this.handlers.TryGetValue(0, out var @methodHandlers))
							{
								foreach (var @methodHandler in @methodHandlers)
								{
									if (((global::Rocks.Argument<object?>)@methodHandler.Expectations[0]).IsValid(@obj!))
									{
										@methodHandler.IncrementCallCount();
										var @result = @methodHandler.Method is not null ?
											((global::System.Func<object?, bool>)@methodHandler.Method)(@obj!) :
											((global::Rocks.HandlerInformation<bool>)@methodHandler).ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for bool Equals(object? @obj)");
							}
							else
							{
								return base.Equals(obj: @obj!);
							}
						}
						
						[global::Rocks.MemberIdentifier(1, "int GetHashCode()")]
						public override int GetHashCode()
						{
							if (this.handlers.TryGetValue(1, out var @methodHandlers))
							{
								var @methodHandler = @methodHandlers[0];
								@methodHandler.IncrementCallCount();
								var @result = @methodHandler.Method is not null ?
									((global::System.Func<int>)@methodHandler.Method)() :
									((global::Rocks.HandlerInformation<int>)@methodHandler).ReturnValue;
								return @result!;
							}
							else
							{
								return base.GetHashCode();
							}
						}
						
						[global::Rocks.MemberIdentifier(2, "string? ToString()")]
						public override string? ToString()
						{
							if (this.handlers.TryGetValue(2, out var @methodHandlers))
							{
								var @methodHandler = @methodHandlers[0];
								@methodHandler.IncrementCallCount();
								var @result = @methodHandler.Method is not null ?
									((global::System.Func<string?>)@methodHandler.Method)() :
									((global::Rocks.HandlerInformation<string?>)@methodHandler).ReturnValue;
								return @result!;
							}
							else
							{
								return base.ToString();
							}
						}
						
						[global::Rocks.MemberIdentifier(4, "object Evaluate(global::MockTests.ScriptScopeContext @scope)")]
						public override object Evaluate(global::MockTests.ScriptScopeContext @scope)
						{
							if (this.handlers.TryGetValue(4, out var @methodHandlers))
							{
								foreach (var @methodHandler in @methodHandlers)
								{
									if (((global::Rocks.Argument<global::MockTests.ScriptScopeContext>)@methodHandler.Expectations[0]).IsValid(@scope!))
									{
										@methodHandler.IncrementCallCount();
										var @result = @methodHandler.Method is not null ?
											((global::System.Func<global::MockTests.ScriptScopeContext, object>)@methodHandler.Method)(@scope!) :
											((global::Rocks.HandlerInformation<object>)@methodHandler).ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for object Evaluate(global::MockTests.ScriptScopeContext @scope)");
							}
							else
							{
								return base.Evaluate(scope: @scope!);
							}
						}
						
						[global::Rocks.MemberIdentifier(5, "object Evaluate(object @target)")]
						public override object Evaluate(object @target)
						{
							if (this.handlers.TryGetValue(5, out var @methodHandlers))
							{
								foreach (var @methodHandler in @methodHandlers)
								{
									if (((global::Rocks.Argument<object>)@methodHandler.Expectations[0]).IsValid(@target!))
									{
										@methodHandler.IncrementCallCount();
										var @result = @methodHandler.Method is not null ?
											((global::System.Func<object, object>)@methodHandler.Method)(@target!) :
											((global::Rocks.HandlerInformation<object>)@methodHandler).ReturnValue;
										return @result!;
									}
								}
								
								throw new global::Rocks.Exceptions.ExpectationException("No handlers match for object Evaluate(object @target)");
							}
							
							throw new global::Rocks.Exceptions.ExpectationException("No handlers were found for object Evaluate(object @target)");
						}
						
					}
				}
				
				internal static class MethodExpectationsOfJsBinaryOperatorExtensions
				{
					internal static global::Rocks.MethodAdornments<global::MockTests.JsBinaryOperator, global::System.Func<object?, bool>, bool> Equals(this global::Rocks.Expectations.MethodExpectations<global::MockTests.JsBinaryOperator> @self, global::Rocks.Argument<object?> @obj)
					{
						global::System.ArgumentNullException.ThrowIfNull(@obj);
						return new global::Rocks.MethodAdornments<global::MockTests.JsBinaryOperator, global::System.Func<object?, bool>, bool>(@self.Add<bool>(0, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @obj }));
					}
					internal static global::Rocks.MethodAdornments<global::MockTests.JsBinaryOperator, global::System.Func<int>, int> GetHashCode(this global::Rocks.Expectations.MethodExpectations<global::MockTests.JsBinaryOperator> @self) =>
						new global::Rocks.MethodAdornments<global::MockTests.JsBinaryOperator, global::System.Func<int>, int>(@self.Add<int>(1, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
					internal static global::Rocks.MethodAdornments<global::MockTests.JsBinaryOperator, global::System.Func<string?>, string?> ToString(this global::Rocks.Expectations.MethodExpectations<global::MockTests.JsBinaryOperator> @self) =>
						new global::Rocks.MethodAdornments<global::MockTests.JsBinaryOperator, global::System.Func<string?>, string?>(@self.Add<string?>(2, new global::System.Collections.Generic.List<global::Rocks.Argument>()));
					internal static global::Rocks.MethodAdornments<global::MockTests.JsBinaryOperator, global::System.Func<global::MockTests.ScriptScopeContext, object>, object> Evaluate(this global::Rocks.Expectations.MethodExpectations<global::MockTests.JsBinaryOperator> @self, global::Rocks.Argument<global::MockTests.ScriptScopeContext> @scope)
					{
						global::System.ArgumentNullException.ThrowIfNull(@scope);
						return new global::Rocks.MethodAdornments<global::MockTests.JsBinaryOperator, global::System.Func<global::MockTests.ScriptScopeContext, object>, object>(@self.Add<object>(4, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @scope }));
					}
					internal static global::Rocks.MethodAdornments<global::MockTests.JsBinaryOperator, global::System.Func<object, object>, object> Evaluate(this global::Rocks.Expectations.MethodExpectations<global::MockTests.JsBinaryOperator> @self, global::Rocks.Argument<object> @target)
					{
						global::System.ArgumentNullException.ThrowIfNull(@target);
						return new global::Rocks.MethodAdornments<global::MockTests.JsBinaryOperator, global::System.Func<object, object>, object>(@self.Add<object>(5, new global::System.Collections.Generic.List<global::Rocks.Argument>(1) { @target }));
					}
				}
			}
			
			""";

		await TestAssistants.RunAsync<RockCreateGenerator>(code,
			new[] { (typeof(RockCreateGenerator), "MockTests.JsBinaryOperator_Rock_Create.g.cs", generatedCode) },
			[]).ConfigureAwait(false);
	}
}