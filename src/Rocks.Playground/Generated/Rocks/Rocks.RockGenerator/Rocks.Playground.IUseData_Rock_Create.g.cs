// <auto-generated/>

#pragma warning disable CS8618
#pragma warning disable CS8633
#pragma warning disable CS8714
#pragma warning disable CS8775

#nullable enable

using Rocks.Extensions;

namespace Rocks.Playground
{
	[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal sealed class IUseDataCreateExpectations
		: global::Rocks.Expectations
	{
		internal static class Projections
		{
			internal delegate global::Rocks.Playground.Data Callback_529986174654522105264612789909988604692966434259(global::Rocks.Playground.Data @data);
			internal delegate global::Rocks.Playground.Data ReturnValue_212615451941717473486869696939351007078488629196();
			internal delegate bool ArgumentEvaluationForData(global::Rocks.Playground.Data @value);
			
			internal sealed class ArgumentForData
				: global::Rocks.Argument
			{
				private readonly global::Rocks.Playground.IUseDataCreateExpectations.Projections.ArgumentEvaluationForData? evaluation;
				private readonly global::Rocks.ValidationState validation;
				
				internal ArgumentForData() => this.validation = global::Rocks.ValidationState.None;
				
				internal ArgumentForData(global::Rocks.Playground.IUseDataCreateExpectations.Projections.ArgumentEvaluationForData @evaluation)
				{
					this.evaluation = @evaluation;
					this.validation = global::Rocks.ValidationState.Evaluation;
				}
				
				public bool IsValid(global::Rocks.Playground.Data @value) =>
					this.validation switch
					{
						global::Rocks.ValidationState.None => true,
						global::Rocks.ValidationState.Evaluation => this.evaluation!(@value),
						_ => throw new global::System.NotSupportedException("Invalid validation state."),
					};
			}
		}
		
		internal sealed class Handler0
			: global::Rocks.Handler<global::Rocks.Playground.IUseDataCreateExpectations.Projections.Callback_529986174654522105264612789909988604692966434259, global::Rocks.Playground.IUseDataCreateExpectations.Projections.ReturnValue_212615451941717473486869696939351007078488629196>
		{
			public global::Rocks.Playground.IUseDataCreateExpectations.Projections.ArgumentForData @data { get; set; }
		}
		private global::Rocks.Handlers<global::Rocks.Playground.IUseDataCreateExpectations.Handler0>? @handlers0;
		
		public override void Verify()
		{
			if (this.WasInstanceInvoked)
			{
				var failures = new global::System.Collections.Generic.List<string>();
		
				if (this.handlers0 is not null) { failures.AddRange(this.Verify(this.handlers0, 0)); }
		
				if (failures.Count > 0)
				{
					throw new global::Rocks.Exceptions.VerificationException(failures);
				}
			}
		}
		
		private sealed class Mock
			: global::Rocks.Playground.IUseData
		{
			public Mock(global::Rocks.Playground.IUseDataCreateExpectations @expectations)
			{
				this.Expectations = @expectations;
			}
			
			[global::Rocks.MemberIdentifier(0)]
			public global::Rocks.Playground.Data Use(global::Rocks.Playground.Data @data)
			{
				if (this.Expectations.handlers0 is not null)
				{
					foreach (var @handler in this.Expectations.handlers0)
					{
						if (@handler.@data.IsValid(@data!))
						{
							@handler.CallCount++;
							var @result = @handler.Callback is not null ?
								@handler.Callback(@data!) : @handler.ReturnValue!();
							return @result!;
						}
					}
					
					throw new global::Rocks.Exceptions.ExpectationException($"No handlers match for {this.GetType().GetMemberDescription(0)}");
				}
				
				throw new global::Rocks.Exceptions.ExpectationException($"No handlers were found for {this.GetType().GetMemberDescription(0)}");
			}
			
			private global::Rocks.Playground.IUseDataCreateExpectations Expectations { get; }
		}
		
		internal sealed class MethodExpectations
		{
			internal MethodExpectations(global::Rocks.Playground.IUseDataCreateExpectations expectations) =>
				this.Expectations = expectations;
			
			internal global::Rocks.Playground.IUseDataCreateExpectations.Adornments.AdornmentsForHandler0 Use(global::Rocks.Playground.IUseDataCreateExpectations.Projections.ArgumentForData @data)
			{
				global::Rocks.Exceptions.ExpectationException.ThrowIf(this.Expectations.WasInstanceInvoked);
				global::System.ArgumentNullException.ThrowIfNull(@data);
				
				var @handler = new global::Rocks.Playground.IUseDataCreateExpectations.Handler0
				{
					@data = @data,
				};
				
				if (this.Expectations.handlers0 is null) { this.Expectations.handlers0 = new(@handler); }
				else { this.Expectations.handlers0.Add(@handler); }
				return new(@handler);
			}
			
			private global::Rocks.Playground.IUseDataCreateExpectations Expectations { get; }
		}
		
		internal global::Rocks.Playground.IUseDataCreateExpectations.MethodExpectations Methods { get; }
		
		internal IUseDataCreateExpectations() =>
			(this.Methods) = (new(this));
		
		internal global::Rocks.Playground.IUseData Instance()
		{
			if (!this.WasInstanceInvoked)
			{
				this.WasInstanceInvoked = true;
				var @mock = new Mock(this);
				this.MockType = @mock.GetType();
				return @mock;
			}
			else
			{
				throw new global::Rocks.Exceptions.NewMockInstanceException("Can only create a new mock once.");
			}
		}
		
		internal static class Adornments
		{
			public interface IAdornmentsForIUseData<TAdornments>
				: global::Rocks.IAdornments<TAdornments>
				where TAdornments : IAdornmentsForIUseData<TAdornments>
			{ }
			
			public sealed class AdornmentsForHandler0
				: global::Rocks.Adornments<AdornmentsForHandler0, global::Rocks.Playground.IUseDataCreateExpectations.Handler0, global::Rocks.Playground.IUseDataCreateExpectations.Projections.Callback_529986174654522105264612789909988604692966434259, global::Rocks.Playground.IUseDataCreateExpectations.Projections.ReturnValue_212615451941717473486869696939351007078488629196>, IAdornmentsForIUseData<AdornmentsForHandler0>
			{
				public AdornmentsForHandler0(global::Rocks.Playground.IUseDataCreateExpectations.Handler0 handler)
					: base(handler) { }
			}
		}
	}
}

#pragma warning restore CS8618
#pragma warning restore CS8633
#pragma warning restore CS8714
#pragma warning restore CS8775